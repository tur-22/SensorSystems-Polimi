
exam_simulation2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af30  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0800b0d0  0800b0d0  0000c0d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b498  0800b498  0000d200  2**0
                  CONTENTS
  4 .ARM          00000008  0800b498  0800b498  0000c498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4a0  0800b4a0  0000d200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4a0  0800b4a0  0000c4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b4a4  0800b4a4  0000c4a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  0800b4a8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  20000200  0800b6a8  0000d200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000730  0800b6a8  0000d730  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012cd3  00000000  00000000  0000d230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f9  00000000  00000000  0001ff03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00022700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e4a  00000000  00000000  00023920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191ce  00000000  00000000  0002476a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c6e  00000000  00000000  0003d938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009dfe0  00000000  00000000  000535a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1586  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ed8  00000000  00000000  000f15cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000f74a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000200 	.word	0x20000200
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b0b8 	.word	0x0800b0b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000204 	.word	0x20000204
 80001dc:	0800b0b8 	.word	0x0800b0b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <DWT_Delay_Init>:

//Microsecond delay functions. Credit:
//https://deepbluembedded.com/stm32-delay-microsecond-millisecond-utility-dwt-delay-timer-delay/

uint32_t DWT_Delay_Init(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000f8c:	4b14      	ldr	r3, [pc, #80]	@ (8000fe0 <DWT_Delay_Init+0x58>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	4a13      	ldr	r2, [pc, #76]	@ (8000fe0 <DWT_Delay_Init+0x58>)
 8000f92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000f96:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000f98:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <DWT_Delay_Init+0x58>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	4a10      	ldr	r2, [pc, #64]	@ (8000fe0 <DWT_Delay_Init+0x58>)
 8000f9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000fa2:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <DWT_Delay_Init+0x5c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe4 <DWT_Delay_Init+0x5c>)
 8000faa:	f023 0301 	bic.w	r3, r3, #1
 8000fae:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <DWT_Delay_Init+0x5c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe4 <DWT_Delay_Init+0x5c>)
 8000fb6:	f043 0301 	orr.w	r3, r3, #1
 8000fba:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000fbc:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <DWT_Delay_Init+0x5c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000fc2:	bf00      	nop
    __ASM volatile ("NOP");
 8000fc4:	bf00      	nop
    __ASM volatile ("NOP");
 8000fc6:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <DWT_Delay_Init+0x5c>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	e000      	b.n	8000fd6 <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 8000fd4:	2301      	movs	r3, #1
    }
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	e000edf0 	.word	0xe000edf0
 8000fe4:	e0001000 	.word	0xe0001000

08000fe8 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <DWT_Delay_us+0x48>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 8000ff6:	f005 fd27 	bl	8006a48 <HAL_RCC_GetHCLKFreq>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	@ (8001034 <DWT_Delay_us+0x4c>)
 8000ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8001002:	0c9b      	lsrs	r3, r3, #18
 8001004:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	fb02 f303 	mul.w	r3, r2, r3
 800100e:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8001010:	bf00      	nop
 8001012:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <DWT_Delay_us+0x48>)
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	1ad2      	subs	r2, r2, r3
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	1acb      	subs	r3, r1, r3
 8001020:	429a      	cmp	r2, r3
 8001022:	d3f6      	bcc.n	8001012 <DWT_Delay_us+0x2a>
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	e0001000 	.word	0xe0001000
 8001034:	431bde83 	.word	0x431bde83

08001038 <lcd_enable>:


//  LCD code


void lcd_enable(){
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
	//HAL_Delay(1);
	//DWT_Delay_us(50);
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_SET);  //pulse needs to be some clock cycles long, we are not in hurry right now
 800103c:	2201      	movs	r2, #1
 800103e:	2102      	movs	r1, #2
 8001040:	4807      	ldr	r0, [pc, #28]	@ (8001060 <lcd_enable+0x28>)
 8001042:	f002 fcbf 	bl	80039c4 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 8001046:	2032      	movs	r0, #50	@ 0x32
 8001048:	f7ff ffce 	bl	8000fe8 <DWT_Delay_us>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	2102      	movs	r1, #2
 8001050:	4803      	ldr	r0, [pc, #12]	@ (8001060 <lcd_enable+0x28>)
 8001052:	f002 fcb7 	bl	80039c4 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	DWT_Delay_us(50);
 8001056:	2032      	movs	r0, #50	@ 0x32
 8001058:	f7ff ffc6 	bl	8000fe8 <DWT_Delay_us>
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40020400 	.word	0x40020400

08001064 <lcd_write4>:

//  write a nibble (4 bits)
void lcd_write4(uint8_t word){
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(LCD_D4, (word & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET); //we AND the word and the mask. If it's true, we write GPIO_PIN_SET, else _RESET
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	b2db      	uxtb	r3, r3
 8001076:	461a      	mov	r2, r3
 8001078:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800107c:	4816      	ldr	r0, [pc, #88]	@ (80010d8 <lcd_write4+0x74>)
 800107e:	f002 fca1 	bl	80039c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D5, (word & 0x02)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	105b      	asrs	r3, r3, #1
 8001086:	b2db      	uxtb	r3, r3
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	b2db      	uxtb	r3, r3
 800108e:	461a      	mov	r2, r3
 8001090:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001094:	4810      	ldr	r0, [pc, #64]	@ (80010d8 <lcd_write4+0x74>)
 8001096:	f002 fc95 	bl	80039c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D6, (word & 0x04)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	109b      	asrs	r3, r3, #2
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	461a      	mov	r2, r3
 80010a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010ac:	480a      	ldr	r0, [pc, #40]	@ (80010d8 <lcd_write4+0x74>)
 80010ae:	f002 fc89 	bl	80039c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_D7, (word & 0x08)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	10db      	asrs	r3, r3, #3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	f003 0301 	and.w	r3, r3, #1
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	461a      	mov	r2, r3
 80010c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010c4:	4804      	ldr	r0, [pc, #16]	@ (80010d8 <lcd_write4+0x74>)
 80010c6:	f002 fc7d 	bl	80039c4 <HAL_GPIO_WritePin>
		lcd_enable();  //pulse the E line
 80010ca:	f7ff ffb5 	bl	8001038 <lcd_enable>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40020400 	.word	0x40020400

080010dc <lcd_write>:

//  write a byte (8 bits)
void lcd_write(uint8_t word){	
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
		lcd_write4(word>>4); //we first write the upper nibble
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	091b      	lsrs	r3, r3, #4
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ffb9 	bl	8001064 <lcd_write4>
		lcd_write4(word);    //and then the lower nibble
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ffb5 	bl	8001064 <lcd_write4>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <lcd_command>:
#define DISPLAY_ON 0x04
#define LCD_SETDRAMADD 0x80
uint8_t _display_ctrl = 0;

//  send an instruction to the LCD
void lcd_command(uint8_t byte){
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET); //write an instruction -> RS must be low
 800110e:	2200      	movs	r2, #0
 8001110:	2104      	movs	r1, #4
 8001112:	4805      	ldr	r0, [pc, #20]	@ (8001128 <lcd_command+0x24>)
 8001114:	f002 fc56 	bl	80039c4 <HAL_GPIO_WritePin>
	lcd_write(byte);
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff ffde 	bl	80010dc <lcd_write>
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40020400 	.word	0x40020400

0800112c <lcd_data>:
	lcd_command(LCD_CLEAR_COMMAND);
	DWT_Delay_us(2000);
}

//  send data to the LCD
void lcd_data(uint8_t byte){
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_SET); //write data, not instruction -> RS must be high
 8001136:	2201      	movs	r2, #1
 8001138:	2104      	movs	r1, #4
 800113a:	4805      	ldr	r0, [pc, #20]	@ (8001150 <lcd_data+0x24>)
 800113c:	f002 fc42 	bl	80039c4 <HAL_GPIO_WritePin>
	lcd_write(byte);
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ffca 	bl	80010dc <lcd_write>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40020400 	.word	0x40020400

08001154 <setCursor>:

//  set (x, y) position of the cursor
void setCursor(uint8_t col, uint8_t row){
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	460a      	mov	r2, r1
 800115e:	71fb      	strb	r3, [r7, #7]
 8001160:	4613      	mov	r3, r2
 8001162:	71bb      	strb	r3, [r7, #6]
	if ((col+1)*(row+1)<80){
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	3301      	adds	r3, #1
 8001168:	79ba      	ldrb	r2, [r7, #6]
 800116a:	3201      	adds	r2, #1
 800116c:	fb02 f303 	mul.w	r3, r2, r3
 8001170:	2b4f      	cmp	r3, #79	@ 0x4f
 8001172:	dc10      	bgt.n	8001196 <setCursor+0x42>
		lcd_command(LCD_SETDRAMADD|(col + 40*row)); //in the second row, address is offset by 40
 8001174:	79bb      	ldrb	r3, [r7, #6]
 8001176:	461a      	mov	r2, r3
 8001178:	0092      	lsls	r2, r2, #2
 800117a:	4413      	add	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	b2da      	uxtb	r2, r3
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	4413      	add	r3, r2
 8001184:	b2db      	uxtb	r3, r3
 8001186:	b25b      	sxtb	r3, r3
 8001188:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800118c:	b25b      	sxtb	r3, r3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ffb7 	bl	8001104 <lcd_command>
	}
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <lcd_print>:

//  print a string on the display, starting from the cursor position
void lcd_print(char string[]){  //pointer to first char in the string
 800119e:	b580      	push	{r7, lr}
 80011a0:	b084      	sub	sp, #16
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
	
	int size = strlen(string);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff f86a 	bl	8000280 <strlen>
 80011ac:	4603      	mov	r3, r0
 80011ae:	60fb      	str	r3, [r7, #12]
	
	while (size--){
 80011b0:	e006      	b.n	80011c0 <lcd_print+0x22>
		lcd_data(*string++);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	1c5a      	adds	r2, r3, #1
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ffb6 	bl	800112c <lcd_data>
	while (size--){
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	1e5a      	subs	r2, r3, #1
 80011c4:	60fa      	str	r2, [r7, #12]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f3      	bne.n	80011b2 <lcd_print+0x14>
	}
}
 80011ca:	bf00      	nop
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <lcd_println>:

void lcd_println(char string[], uint8_t row){
 80011d4:	b5b0      	push	{r4, r5, r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	70fb      	strb	r3, [r7, #3]
	
	char line[] = "                ";
 80011e0:	4b17      	ldr	r3, [pc, #92]	@ (8001240 <lcd_println+0x6c>)
 80011e2:	f107 0408 	add.w	r4, r7, #8
 80011e6:	461d      	mov	r5, r3
 80011e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ec:	682b      	ldr	r3, [r5, #0]
 80011ee:	7023      	strb	r3, [r4, #0]
	
	int size = strlen(string);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff f845 	bl	8000280 <strlen>
 80011f6:	4603      	mov	r3, r0
 80011f8:	61fb      	str	r3, [r7, #28]
	
	if (size > 16)
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	2b10      	cmp	r3, #16
 80011fe:	dd0c      	ble.n	800121a <lcd_println+0x46>
		size = 16;
 8001200:	2310      	movs	r3, #16
 8001202:	61fb      	str	r3, [r7, #28]

	while (size--){
 8001204:	e009      	b.n	800121a <lcd_println+0x46>
		line[size] = string[size];
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	4413      	add	r3, r2
 800120c:	7819      	ldrb	r1, [r3, #0]
 800120e:	f107 0208 	add.w	r2, r7, #8
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	4413      	add	r3, r2
 8001216:	460a      	mov	r2, r1
 8001218:	701a      	strb	r2, [r3, #0]
	while (size--){
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	1e5a      	subs	r2, r3, #1
 800121e:	61fa      	str	r2, [r7, #28]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1f0      	bne.n	8001206 <lcd_println+0x32>
	}
	setCursor(0, row);
 8001224:	78fb      	ldrb	r3, [r7, #3]
 8001226:	4619      	mov	r1, r3
 8001228:	2000      	movs	r0, #0
 800122a:	f7ff ff93 	bl	8001154 <setCursor>
	lcd_print(line);
 800122e:	f107 0308 	add.w	r3, r7, #8
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ffb3 	bl	800119e <lcd_print>
}
 8001238:	bf00      	nop
 800123a:	3720      	adds	r7, #32
 800123c:	46bd      	mov	sp, r7
 800123e:	bdb0      	pop	{r4, r5, r7, pc}
 8001240:	0800b0d0 	.word	0x0800b0d0

08001244 <writeCustomChar>:

void writeCustomChar(uint8_t address, uint8_t map[]){ //fill Character Generator RAM with custom symbols
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	71fb      	strb	r3, [r7, #7]
	address &= 0x7; //address must be 0 to 7
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	71fb      	strb	r3, [r7, #7]
	lcd_command(0x40 | (address <<3)); //Set CGRAM address + address shifted left by 3 bits to start writing first byte
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	b25b      	sxtb	r3, r3
 800125e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001262:	b25b      	sxtb	r3, r3
 8001264:	b2db      	uxtb	r3, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ff4c 	bl	8001104 <lcd_command>
	for (int i = 0; i<8; i++){
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	e009      	b.n	8001286 <writeCustomChar+0x42>
		lcd_data(map[i]);	
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	4413      	add	r3, r2
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff56 	bl	800112c <lcd_data>
	for (int i = 0; i<8; i++){
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	3301      	adds	r3, #1
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2b07      	cmp	r3, #7
 800128a:	ddf2      	ble.n	8001272 <writeCustomChar+0x2e>
	}
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <loadCustomChars>:

void loadCustomChars(){ //write all custom characters to the LCD module memory
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	writeCustomChar(CHAR_1_5, CUSTOM_1_5);
 800129c:	490a      	ldr	r1, [pc, #40]	@ (80012c8 <loadCustomChars+0x30>)
 800129e:	2001      	movs	r0, #1
 80012a0:	f7ff ffd0 	bl	8001244 <writeCustomChar>
	writeCustomChar(CHAR_2_5, CUSTOM_2_5);
 80012a4:	4909      	ldr	r1, [pc, #36]	@ (80012cc <loadCustomChars+0x34>)
 80012a6:	2002      	movs	r0, #2
 80012a8:	f7ff ffcc 	bl	8001244 <writeCustomChar>
	writeCustomChar(CHAR_3_5, CUSTOM_3_5);
 80012ac:	4908      	ldr	r1, [pc, #32]	@ (80012d0 <loadCustomChars+0x38>)
 80012ae:	2003      	movs	r0, #3
 80012b0:	f7ff ffc8 	bl	8001244 <writeCustomChar>
	writeCustomChar(CHAR_4_5, CUSTOM_4_5);
 80012b4:	4907      	ldr	r1, [pc, #28]	@ (80012d4 <loadCustomChars+0x3c>)
 80012b6:	2004      	movs	r0, #4
 80012b8:	f7ff ffc4 	bl	8001244 <writeCustomChar>
	writeCustomChar(CHAR_5_5, CUSTOM_5_5);
 80012bc:	4906      	ldr	r1, [pc, #24]	@ (80012d8 <loadCustomChars+0x40>)
 80012be:	2005      	movs	r0, #5
 80012c0:	f7ff ffc0 	bl	8001244 <writeCustomChar>
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000000 	.word	0x20000000
 80012cc:	20000008 	.word	0x20000008
 80012d0:	20000010 	.word	0x20000010
 80012d4:	20000018 	.word	0x20000018
 80012d8:	20000020 	.word	0x20000020

080012dc <lcd_initialize>:
		i++;
	}
	lcd_print(bar); //finally we write to the LCD
}

void lcd_initialize(){  //initialize WH1602C LCD module in 4 bit mode, page 25
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0

	HAL_Delay(50);  //wait >40 ms as per datasheet
 80012e0:	2032      	movs	r0, #50	@ 0x32
 80012e2:	f000 ff8d 	bl	8002200 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_RS, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2104      	movs	r1, #4
 80012ea:	4824      	ldr	r0, [pc, #144]	@ (800137c <lcd_initialize+0xa0>)
 80012ec:	f002 fb6a 	bl	80039c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_E, GPIO_PIN_RESET);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2102      	movs	r1, #2
 80012f4:	4821      	ldr	r0, [pc, #132]	@ (800137c <lcd_initialize+0xa0>)
 80012f6:	f002 fb65 	bl	80039c4 <HAL_GPIO_WritePin>
	//LCD WritePIn is hard-wired low as per board schematic
	DWT_Delay_Init();
 80012fa:	f7ff fe45 	bl	8000f88 <DWT_Delay_Init>
	//Magic reset sequence
	lcd_write4(0x03);  //4-bit mode
 80012fe:	2003      	movs	r0, #3
 8001300:	f7ff feb0 	bl	8001064 <lcd_write4>
	HAL_Delay(5);
 8001304:	2005      	movs	r0, #5
 8001306:	f000 ff7b 	bl	8002200 <HAL_Delay>
	lcd_write4(0x03);
 800130a:	2003      	movs	r0, #3
 800130c:	f7ff feaa 	bl	8001064 <lcd_write4>
	HAL_Delay(5);
 8001310:	2005      	movs	r0, #5
 8001312:	f000 ff75 	bl	8002200 <HAL_Delay>
	lcd_write4(0x03);
 8001316:	2003      	movs	r0, #3
 8001318:	f7ff fea4 	bl	8001064 <lcd_write4>
	HAL_Delay(5);
 800131c:	2005      	movs	r0, #5
 800131e:	f000 ff6f 	bl	8002200 <HAL_Delay>
	lcd_write4(0x02); //Set 4-bit mode
 8001322:	2002      	movs	r0, #2
 8001324:	f7ff fe9e 	bl	8001064 <lcd_write4>
	lcd_write(0x28); //4bit, 2 lines, 5x8 font
 8001328:	2028      	movs	r0, #40	@ 0x28
 800132a:	f7ff fed7 	bl	80010dc <lcd_write>
	HAL_Delay(5);
 800132e:	2005      	movs	r0, #5
 8001330:	f000 ff66 	bl	8002200 <HAL_Delay>
	lcd_write(0x08); //display off;
 8001334:	2008      	movs	r0, #8
 8001336:	f7ff fed1 	bl	80010dc <lcd_write>
	lcd_write(LCD_CLEAR_COMMAND); 			 //display clear;
 800133a:	2001      	movs	r0, #1
 800133c:	f7ff fece 	bl	80010dc <lcd_write>
	HAL_Delay(5);
 8001340:	2005      	movs	r0, #5
 8001342:	f000 ff5d 	bl	8002200 <HAL_Delay>
	lcd_write(0x06); //entry mode set: increment
 8001346:	2006      	movs	r0, #6
 8001348:	f7ff fec8 	bl	80010dc <lcd_write>
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);  //enable backlight
 800134c:	2201      	movs	r2, #1
 800134e:	2110      	movs	r1, #16
 8001350:	480b      	ldr	r0, [pc, #44]	@ (8001380 <lcd_initialize+0xa4>)
 8001352:	f002 fb37 	bl	80039c4 <HAL_GPIO_WritePin>
	//_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON|CURSOR_ON|BLINK_ON;
	_display_ctrl = DISPLAY_COMMAND|DISPLAY_ON;
 8001356:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <lcd_initialize+0xa8>)
 8001358:	220c      	movs	r2, #12
 800135a:	701a      	strb	r2, [r3, #0]
	lcd_write(_display_ctrl); //set as above
 800135c:	4b09      	ldr	r3, [pc, #36]	@ (8001384 <lcd_initialize+0xa8>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff febb 	bl	80010dc <lcd_write>
	lcd_write(0x02); //go home
 8001366:	2002      	movs	r0, #2
 8001368:	f7ff feb8 	bl	80010dc <lcd_write>
	HAL_Delay(2);
 800136c:	2002      	movs	r0, #2
 800136e:	f000 ff47 	bl	8002200 <HAL_Delay>
	loadCustomChars();
 8001372:	f7ff ff91 	bl	8001298 <loadCustomChars>

}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40020400 	.word	0x40020400
 8001380:	40020000 	.word	0x40020000
 8001384:	2000021c 	.word	0x2000021c

08001388 <lcd_backlight_ON>:

void lcd_backlight_ON(){
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_BL_ON, GPIO_PIN_SET);
 800138c:	2201      	movs	r2, #1
 800138e:	2110      	movs	r1, #16
 8001390:	4802      	ldr	r0, [pc, #8]	@ (800139c <lcd_backlight_ON+0x14>)
 8001392:	f002 fb17 	bl	80039c4 <HAL_GPIO_WritePin>
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40020000 	.word	0x40020000

080013a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a6:	f000 feb9 	bl	800211c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013aa:	f000 f82f 	bl	800140c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ae:	f000 f9d7 	bl	8001760 <MX_GPIO_Init>
  MX_DMA_Init();
 80013b2:	f000 f98f 	bl	80016d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013b6:	f000 f963 	bl	8001680 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80013ba:	f000 f8e5 	bl	8001588 <MX_I2C1_Init>
  MX_ADC1_Init();
 80013be:	f000 f891 	bl	80014e4 <MX_ADC1_Init>
  MX_TIM2_Init();
 80013c2:	f000 f90f 	bl	80015e4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcd_initialize();
 80013c6:	f7ff ff89 	bl	80012dc <lcd_initialize>
  lcd_backlight_ON();
 80013ca:	f7ff ffdd 	bl	8001388 <lcd_backlight_ON>
  HAL_TIM_Base_Start_IT(&htim2);
 80013ce:	4809      	ldr	r0, [pc, #36]	@ (80013f4 <main+0x54>)
 80013d0:	f005 fbbe 	bl	8006b50 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, &adc_value, 1);
 80013d4:	2201      	movs	r2, #1
 80013d6:	4908      	ldr	r1, [pc, #32]	@ (80013f8 <main+0x58>)
 80013d8:	4808      	ldr	r0, [pc, #32]	@ (80013fc <main+0x5c>)
 80013da:	f001 f889 	bl	80024f0 <HAL_ADC_Start_DMA>
  HAL_I2C_Master_Transmit(&hi2c1, address, &reg_address, 1, 50); // write temperature register address on pointer register
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <main+0x60>)
 80013e0:	8819      	ldrh	r1, [r3, #0]
 80013e2:	2332      	movs	r3, #50	@ 0x32
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2301      	movs	r3, #1
 80013e8:	4a06      	ldr	r2, [pc, #24]	@ (8001404 <main+0x64>)
 80013ea:	4807      	ldr	r0, [pc, #28]	@ (8001408 <main+0x68>)
 80013ec:	f002 fc5e 	bl	8003cac <HAL_I2C_Master_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <main+0x50>
 80013f4:	200003dc 	.word	0x200003dc
 80013f8:	200004cc 	.word	0x200004cc
 80013fc:	20000220 	.word	0x20000220
 8001400:	20000028 	.word	0x20000028
 8001404:	200004ce 	.word	0x200004ce
 8001408:	200002c8 	.word	0x200002c8

0800140c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b094      	sub	sp, #80	@ 0x50
 8001410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001412:	f107 0320 	add.w	r3, r7, #32
 8001416:	2230      	movs	r2, #48	@ 0x30
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f007 fd81 	bl	8008f22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	4b29      	ldr	r3, [pc, #164]	@ (80014dc <SystemClock_Config+0xd0>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001438:	4a28      	ldr	r2, [pc, #160]	@ (80014dc <SystemClock_Config+0xd0>)
 800143a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800143e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001440:	4b26      	ldr	r3, [pc, #152]	@ (80014dc <SystemClock_Config+0xd0>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800144c:	2300      	movs	r3, #0
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	4b23      	ldr	r3, [pc, #140]	@ (80014e0 <SystemClock_Config+0xd4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001458:	4a21      	ldr	r2, [pc, #132]	@ (80014e0 <SystemClock_Config+0xd4>)
 800145a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b1f      	ldr	r3, [pc, #124]	@ (80014e0 <SystemClock_Config+0xd4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800146c:	2302      	movs	r3, #2
 800146e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001470:	2301      	movs	r3, #1
 8001472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001474:	2310      	movs	r3, #16
 8001476:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001478:	2302      	movs	r3, #2
 800147a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800147c:	2300      	movs	r3, #0
 800147e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001480:	2310      	movs	r3, #16
 8001482:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001484:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001488:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800148a:	2304      	movs	r3, #4
 800148c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800148e:	2307      	movs	r3, #7
 8001490:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001492:	f107 0320 	add.w	r3, r7, #32
 8001496:	4618      	mov	r0, r3
 8001498:	f004 fe72 	bl	8006180 <HAL_RCC_OscConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80014a2:	f000 fabf 	bl	8001a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014a6:	230f      	movs	r3, #15
 80014a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014aa:	2302      	movs	r3, #2
 80014ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	2102      	movs	r1, #2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f005 f8d4 	bl	8006670 <HAL_RCC_ClockConfig>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80014ce:	f000 faa9 	bl	8001a24 <Error_Handler>
  }
}
 80014d2:	bf00      	nop
 80014d4:	3750      	adds	r7, #80	@ 0x50
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40007000 	.word	0x40007000

080014e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ea:	463b      	mov	r3, r7
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014f6:	4b22      	ldr	r3, [pc, #136]	@ (8001580 <MX_ADC1_Init+0x9c>)
 80014f8:	4a22      	ldr	r2, [pc, #136]	@ (8001584 <MX_ADC1_Init+0xa0>)
 80014fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014fc:	4b20      	ldr	r3, [pc, #128]	@ (8001580 <MX_ADC1_Init+0x9c>)
 80014fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001502:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001504:	4b1e      	ldr	r3, [pc, #120]	@ (8001580 <MX_ADC1_Init+0x9c>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800150a:	4b1d      	ldr	r3, [pc, #116]	@ (8001580 <MX_ADC1_Init+0x9c>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001510:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <MX_ADC1_Init+0x9c>)
 8001512:	2200      	movs	r2, #0
 8001514:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001516:	4b1a      	ldr	r3, [pc, #104]	@ (8001580 <MX_ADC1_Init+0x9c>)
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800151e:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <MX_ADC1_Init+0x9c>)
 8001520:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001524:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001526:	4b16      	ldr	r3, [pc, #88]	@ (8001580 <MX_ADC1_Init+0x9c>)
 8001528:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800152c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800152e:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <MX_ADC1_Init+0x9c>)
 8001530:	2200      	movs	r2, #0
 8001532:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <MX_ADC1_Init+0x9c>)
 8001536:	2201      	movs	r2, #1
 8001538:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800153a:	4b11      	ldr	r3, [pc, #68]	@ (8001580 <MX_ADC1_Init+0x9c>)
 800153c:	2201      	movs	r2, #1
 800153e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001542:	4b0f      	ldr	r3, [pc, #60]	@ (8001580 <MX_ADC1_Init+0x9c>)
 8001544:	2201      	movs	r2, #1
 8001546:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001548:	480d      	ldr	r0, [pc, #52]	@ (8001580 <MX_ADC1_Init+0x9c>)
 800154a:	f000 fe7d 	bl	8002248 <HAL_ADC_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001554:	f000 fa66 	bl	8001a24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001558:	2310      	movs	r3, #16
 800155a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800155c:	2301      	movs	r3, #1
 800155e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001560:	2307      	movs	r3, #7
 8001562:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001564:	463b      	mov	r3, r7
 8001566:	4619      	mov	r1, r3
 8001568:	4805      	ldr	r0, [pc, #20]	@ (8001580 <MX_ADC1_Init+0x9c>)
 800156a:	f001 f8cf 	bl	800270c <HAL_ADC_ConfigChannel>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001574:	f000 fa56 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000220 	.word	0x20000220
 8001584:	40012000 	.word	0x40012000

08001588 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800158c:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <MX_I2C1_Init+0x50>)
 800158e:	4a13      	ldr	r2, [pc, #76]	@ (80015dc <MX_I2C1_Init+0x54>)
 8001590:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001592:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <MX_I2C1_Init+0x50>)
 8001594:	4a12      	ldr	r2, [pc, #72]	@ (80015e0 <MX_I2C1_Init+0x58>)
 8001596:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001598:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <MX_I2C1_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800159e:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <MX_I2C1_Init+0x50>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <MX_I2C1_Init+0x50>)
 80015a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015ac:	4b0a      	ldr	r3, [pc, #40]	@ (80015d8 <MX_I2C1_Init+0x50>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015b2:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <MX_I2C1_Init+0x50>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b8:	4b07      	ldr	r3, [pc, #28]	@ (80015d8 <MX_I2C1_Init+0x50>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015be:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <MX_I2C1_Init+0x50>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015c4:	4804      	ldr	r0, [pc, #16]	@ (80015d8 <MX_I2C1_Init+0x50>)
 80015c6:	f002 fa17 	bl	80039f8 <HAL_I2C_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015d0:	f000 fa28 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	200002c8 	.word	0x200002c8
 80015dc:	40005400 	.word	0x40005400
 80015e0:	000186a0 	.word	0x000186a0

080015e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ea:	f107 0308 	add.w	r3, r7, #8
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f8:	463b      	mov	r3, r7
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001600:	4b1e      	ldr	r3, [pc, #120]	@ (800167c <MX_TIM2_Init+0x98>)
 8001602:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001606:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 8001608:	4b1c      	ldr	r3, [pc, #112]	@ (800167c <MX_TIM2_Init+0x98>)
 800160a:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800160e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001610:	4b1a      	ldr	r3, [pc, #104]	@ (800167c <MX_TIM2_Init+0x98>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001616:	4b19      	ldr	r3, [pc, #100]	@ (800167c <MX_TIM2_Init+0x98>)
 8001618:	f242 720f 	movw	r2, #9999	@ 0x270f
 800161c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800161e:	4b17      	ldr	r3, [pc, #92]	@ (800167c <MX_TIM2_Init+0x98>)
 8001620:	2200      	movs	r2, #0
 8001622:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001624:	4b15      	ldr	r3, [pc, #84]	@ (800167c <MX_TIM2_Init+0x98>)
 8001626:	2200      	movs	r2, #0
 8001628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800162a:	4814      	ldr	r0, [pc, #80]	@ (800167c <MX_TIM2_Init+0x98>)
 800162c:	f005 fa40 	bl	8006ab0 <HAL_TIM_Base_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001636:	f000 f9f5 	bl	8001a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800163a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800163e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001640:	f107 0308 	add.w	r3, r7, #8
 8001644:	4619      	mov	r1, r3
 8001646:	480d      	ldr	r0, [pc, #52]	@ (800167c <MX_TIM2_Init+0x98>)
 8001648:	f005 fbd4 	bl	8006df4 <HAL_TIM_ConfigClockSource>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001652:	f000 f9e7 	bl	8001a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001656:	2320      	movs	r3, #32
 8001658:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800165e:	463b      	mov	r3, r7
 8001660:	4619      	mov	r1, r3
 8001662:	4806      	ldr	r0, [pc, #24]	@ (800167c <MX_TIM2_Init+0x98>)
 8001664:	f005 fde6 	bl	8007234 <HAL_TIMEx_MasterConfigSynchronization>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800166e:	f000 f9d9 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200003dc 	.word	0x200003dc

08001680 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001684:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 8001686:	4a12      	ldr	r2, [pc, #72]	@ (80016d0 <MX_USART2_UART_Init+0x50>)
 8001688:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800168a:	4b10      	ldr	r3, [pc, #64]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 800168c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001690:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001692:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001698:	4b0c      	ldr	r3, [pc, #48]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800169e:	4b0b      	ldr	r3, [pc, #44]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016a4:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 80016a6:	220c      	movs	r2, #12
 80016a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016aa:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b0:	4b06      	ldr	r3, [pc, #24]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016b6:	4805      	ldr	r0, [pc, #20]	@ (80016cc <MX_USART2_UART_Init+0x4c>)
 80016b8:	f005 fe3e 	bl	8007338 <HAL_UART_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016c2:	f000 f9af 	bl	8001a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000424 	.word	0x20000424
 80016d0:	40004400 	.word	0x40004400

080016d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	4b1f      	ldr	r3, [pc, #124]	@ (800175c <MX_DMA_Init+0x88>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	4a1e      	ldr	r2, [pc, #120]	@ (800175c <MX_DMA_Init+0x88>)
 80016e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ea:	4b1c      	ldr	r3, [pc, #112]	@ (800175c <MX_DMA_Init+0x88>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	603b      	str	r3, [r7, #0]
 80016fa:	4b18      	ldr	r3, [pc, #96]	@ (800175c <MX_DMA_Init+0x88>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4a17      	ldr	r2, [pc, #92]	@ (800175c <MX_DMA_Init+0x88>)
 8001700:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001704:	6313      	str	r3, [r2, #48]	@ 0x30
 8001706:	4b15      	ldr	r3, [pc, #84]	@ (800175c <MX_DMA_Init+0x88>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 1, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2101      	movs	r1, #1
 8001716:	200b      	movs	r0, #11
 8001718:	f001 fb7d 	bl	8002e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800171c:	200b      	movs	r0, #11
 800171e:	f001 fb96 	bl	8002e4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	2101      	movs	r1, #1
 8001726:	2011      	movs	r0, #17
 8001728:	f001 fb75 	bl	8002e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800172c:	2011      	movs	r0, #17
 800172e:	f001 fb8e 	bl	8002e4e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 1, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2101      	movs	r1, #1
 8001736:	202f      	movs	r0, #47	@ 0x2f
 8001738:	f001 fb6d 	bl	8002e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800173c:	202f      	movs	r0, #47	@ 0x2f
 800173e:	f001 fb86 	bl	8002e4e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2101      	movs	r1, #1
 8001746:	2038      	movs	r0, #56	@ 0x38
 8001748:	f001 fb65 	bl	8002e16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800174c:	2038      	movs	r0, #56	@ 0x38
 800174e:	f001 fb7e 	bl	8002e4e <HAL_NVIC_EnableIRQ>

}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800

08001760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	@ 0x28
 8001764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
 8001774:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	4b38      	ldr	r3, [pc, #224]	@ (800185c <MX_GPIO_Init+0xfc>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	4a37      	ldr	r2, [pc, #220]	@ (800185c <MX_GPIO_Init+0xfc>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	6313      	str	r3, [r2, #48]	@ 0x30
 8001786:	4b35      	ldr	r3, [pc, #212]	@ (800185c <MX_GPIO_Init+0xfc>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	4b31      	ldr	r3, [pc, #196]	@ (800185c <MX_GPIO_Init+0xfc>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	4a30      	ldr	r2, [pc, #192]	@ (800185c <MX_GPIO_Init+0xfc>)
 800179c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a2:	4b2e      	ldr	r3, [pc, #184]	@ (800185c <MX_GPIO_Init+0xfc>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	4b2a      	ldr	r3, [pc, #168]	@ (800185c <MX_GPIO_Init+0xfc>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	4a29      	ldr	r2, [pc, #164]	@ (800185c <MX_GPIO_Init+0xfc>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017be:	4b27      	ldr	r3, [pc, #156]	@ (800185c <MX_GPIO_Init+0xfc>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	607b      	str	r3, [r7, #4]
 80017ce:	4b23      	ldr	r3, [pc, #140]	@ (800185c <MX_GPIO_Init+0xfc>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d2:	4a22      	ldr	r2, [pc, #136]	@ (800185c <MX_GPIO_Init+0xfc>)
 80017d4:	f043 0302 	orr.w	r3, r3, #2
 80017d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017da:	4b20      	ldr	r3, [pc, #128]	@ (800185c <MX_GPIO_Init+0xfc>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	607b      	str	r3, [r7, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 80017e6:	2200      	movs	r2, #0
 80017e8:	2130      	movs	r1, #48	@ 0x30
 80017ea:	481d      	ldr	r0, [pc, #116]	@ (8001860 <MX_GPIO_Init+0x100>)
 80017ec:	f002 f8ea 	bl	80039c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 80017f0:	2200      	movs	r2, #0
 80017f2:	f24f 0106 	movw	r1, #61446	@ 0xf006
 80017f6:	481b      	ldr	r0, [pc, #108]	@ (8001864 <MX_GPIO_Init+0x104>)
 80017f8:	f002 f8e4 	bl	80039c4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001802:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4619      	mov	r1, r3
 8001812:	4815      	ldr	r0, [pc, #84]	@ (8001868 <MX_GPIO_Init+0x108>)
 8001814:	f001 ff52 	bl	80036bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8001818:	2330      	movs	r3, #48	@ 0x30
 800181a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181c:	2301      	movs	r3, #1
 800181e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001824:	2300      	movs	r3, #0
 8001826:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	480c      	ldr	r0, [pc, #48]	@ (8001860 <MX_GPIO_Init+0x100>)
 8001830:	f001 ff44 	bl	80036bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB12 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 8001834:	f24f 0306 	movw	r3, #61446	@ 0xf006
 8001838:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183a:	2301      	movs	r3, #1
 800183c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	4805      	ldr	r0, [pc, #20]	@ (8001864 <MX_GPIO_Init+0x104>)
 800184e:	f001 ff35 	bl	80036bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001852:	bf00      	nop
 8001854:	3728      	adds	r7, #40	@ 0x28
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	40020000 	.word	0x40020000
 8001864:	40020400 	.word	0x40020400
 8001868:	40020800 	.word	0x40020800
 800186c:	00000000 	.word	0x00000000

08001870 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	int_temp = (adc_value * FSR/RESOLUTION_STEPS - V25)/AVG_SLOPE + 25;
 8001878:	4b27      	ldr	r3, [pc, #156]	@ (8001918 <HAL_ADC_ConvCpltCallback+0xa8>)
 800187a:	881b      	ldrh	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe59 	bl	8000534 <__aeabi_i2d>
 8001882:	a321      	add	r3, pc, #132	@ (adr r3, 8001908 <HAL_ADC_ConvCpltCallback+0x98>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7fe febe 	bl	8000608 <__aeabi_dmul>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	4b20      	ldr	r3, [pc, #128]	@ (800191c <HAL_ADC_ConvCpltCallback+0xac>)
 800189a:	f7fe ffdf 	bl	800085c <__aeabi_ddiv>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	a31a      	add	r3, pc, #104	@ (adr r3, 8001910 <HAL_ADC_ConvCpltCallback+0xa0>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	f7fe fcf4 	bl	8000298 <__aeabi_dsub>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	4b18      	ldr	r3, [pc, #96]	@ (8001920 <HAL_ADC_ConvCpltCallback+0xb0>)
 80018be:	f7fe ffcd 	bl	800085c <__aeabi_ddiv>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <HAL_ADC_ConvCpltCallback+0xb4>)
 80018d0:	f7fe fce4 	bl	800029c <__adddf3>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	f7ff f96c 	bl	8000bb8 <__aeabi_d2uiz>
 80018e0:	4603      	mov	r3, r0
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <HAL_ADC_ConvCpltCallback+0xb8>)
 80018e6:	701a      	strb	r2, [r3, #0]

	HAL_I2C_Master_Receive_DMA(&hi2c1, address+1, array, 2); // address+1 -> read mode
 80018e8:	4b10      	ldr	r3, [pc, #64]	@ (800192c <HAL_ADC_ConvCpltCallback+0xbc>)
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	3301      	adds	r3, #1
 80018ee:	b299      	uxth	r1, r3
 80018f0:	2302      	movs	r3, #2
 80018f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001930 <HAL_ADC_ConvCpltCallback+0xc0>)
 80018f4:	480f      	ldr	r0, [pc, #60]	@ (8001934 <HAL_ADC_ConvCpltCallback+0xc4>)
 80018f6:	f002 fad7 	bl	8003ea8 <HAL_I2C_Master_Receive_DMA>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	f3af 8000 	nop.w
 8001908:	66666666 	.word	0x66666666
 800190c:	400a6666 	.word	0x400a6666
 8001910:	851eb852 	.word	0x851eb852
 8001914:	3fe851eb 	.word	0x3fe851eb
 8001918:	200004cc 	.word	0x200004cc
 800191c:	40b00000 	.word	0x40b00000
 8001920:	40040000 	.word	0x40040000
 8001924:	40390000 	.word	0x40390000
 8001928:	200004d2 	.word	0x200004d2
 800192c:	20000028 	.word	0x20000028
 8001930:	200004d0 	.word	0x200004d0
 8001934:	200002c8 	.word	0x200002c8

08001938 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af02      	add	r7, sp, #8
 800193e:	6078      	str	r0, [r7, #4]
	int16_t value = (array[0] << 8) | array[1];
 8001940:	4b2e      	ldr	r3, [pc, #184]	@ (80019fc <HAL_I2C_MasterRxCpltCallback+0xc4>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	021b      	lsls	r3, r3, #8
 8001946:	b21a      	sxth	r2, r3
 8001948:	4b2c      	ldr	r3, [pc, #176]	@ (80019fc <HAL_I2C_MasterRxCpltCallback+0xc4>)
 800194a:	785b      	ldrb	r3, [r3, #1]
 800194c:	b21b      	sxth	r3, r3
 800194e:	4313      	orrs	r3, r2
 8001950:	81fb      	strh	r3, [r7, #14]
	float temp = value/256.0;
 8001952:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fdec 	bl	8000534 <__aeabi_i2d>
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	4b27      	ldr	r3, [pc, #156]	@ (8001a00 <HAL_I2C_MasterRxCpltCallback+0xc8>)
 8001962:	f7fe ff7b 	bl	800085c <__aeabi_ddiv>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f7ff f943 	bl	8000bf8 <__aeabi_d2f>
 8001972:	4603      	mov	r3, r0
 8001974:	60bb      	str	r3, [r7, #8]
	len1 = snprintf(string1, sizeof(string1), "IntTemp: %d C\n", int_temp);
 8001976:	4b23      	ldr	r3, [pc, #140]	@ (8001a04 <HAL_I2C_MasterRxCpltCallback+0xcc>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	4a23      	ldr	r2, [pc, #140]	@ (8001a08 <HAL_I2C_MasterRxCpltCallback+0xd0>)
 800197c:	2180      	movs	r1, #128	@ 0x80
 800197e:	4823      	ldr	r0, [pc, #140]	@ (8001a0c <HAL_I2C_MasterRxCpltCallback+0xd4>)
 8001980:	f007 fa58 	bl	8008e34 <sniprintf>
 8001984:	4603      	mov	r3, r0
 8001986:	4a22      	ldr	r2, [pc, #136]	@ (8001a10 <HAL_I2C_MasterRxCpltCallback+0xd8>)
 8001988:	6013      	str	r3, [r2, #0]
	len2 = snprintf(string2, sizeof(string2), "Temp: %.1f C\n", temp);
 800198a:	68b8      	ldr	r0, [r7, #8]
 800198c:	f7fe fde4 	bl	8000558 <__aeabi_f2d>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	e9cd 2300 	strd	r2, r3, [sp]
 8001998:	4a1e      	ldr	r2, [pc, #120]	@ (8001a14 <HAL_I2C_MasterRxCpltCallback+0xdc>)
 800199a:	2180      	movs	r1, #128	@ 0x80
 800199c:	481e      	ldr	r0, [pc, #120]	@ (8001a18 <HAL_I2C_MasterRxCpltCallback+0xe0>)
 800199e:	f007 fa49 	bl	8008e34 <sniprintf>
 80019a2:	4603      	mov	r3, r0
 80019a4:	4a1d      	ldr	r2, [pc, #116]	@ (8001a1c <HAL_I2C_MasterRxCpltCallback+0xe4>)
 80019a6:	6013      	str	r3, [r2, #0]

	lcd_println(string1, 0);
 80019a8:	2100      	movs	r1, #0
 80019aa:	4818      	ldr	r0, [pc, #96]	@ (8001a0c <HAL_I2C_MasterRxCpltCallback+0xd4>)
 80019ac:	f7ff fc12 	bl	80011d4 <lcd_println>
	lcd_println(string2, 1);
 80019b0:	2101      	movs	r1, #1
 80019b2:	4819      	ldr	r0, [pc, #100]	@ (8001a18 <HAL_I2C_MasterRxCpltCallback+0xe0>)
 80019b4:	f7ff fc0e 	bl	80011d4 <lcd_println>
	if (int_temp > temp)
 80019b8:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <HAL_I2C_MasterRxCpltCallback+0xcc>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	ee07 3a90 	vmov	s15, r3
 80019c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c4:	ed97 7a02 	vldr	s14, [r7, #8]
 80019c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d0:	d508      	bpl.n	80019e4 <HAL_I2C_MasterRxCpltCallback+0xac>
		HAL_UART_Transmit_DMA(&huart2, string1, len1);
 80019d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a10 <HAL_I2C_MasterRxCpltCallback+0xd8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	461a      	mov	r2, r3
 80019da:	490c      	ldr	r1, [pc, #48]	@ (8001a0c <HAL_I2C_MasterRxCpltCallback+0xd4>)
 80019dc:	4810      	ldr	r0, [pc, #64]	@ (8001a20 <HAL_I2C_MasterRxCpltCallback+0xe8>)
 80019de:	f005 fcfb 	bl	80073d8 <HAL_UART_Transmit_DMA>
	else
		HAL_UART_Transmit_DMA(&huart2, string2, len2);
}
 80019e2:	e007      	b.n	80019f4 <HAL_I2C_MasterRxCpltCallback+0xbc>
		HAL_UART_Transmit_DMA(&huart2, string2, len2);
 80019e4:	4b0d      	ldr	r3, [pc, #52]	@ (8001a1c <HAL_I2C_MasterRxCpltCallback+0xe4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	461a      	mov	r2, r3
 80019ec:	490a      	ldr	r1, [pc, #40]	@ (8001a18 <HAL_I2C_MasterRxCpltCallback+0xe0>)
 80019ee:	480c      	ldr	r0, [pc, #48]	@ (8001a20 <HAL_I2C_MasterRxCpltCallback+0xe8>)
 80019f0:	f005 fcf2 	bl	80073d8 <HAL_UART_Transmit_DMA>
}
 80019f4:	bf00      	nop
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	200004d0 	.word	0x200004d0
 8001a00:	40700000 	.word	0x40700000
 8001a04:	200004d2 	.word	0x200004d2
 8001a08:	0800b0e4 	.word	0x0800b0e4
 8001a0c:	20000554 	.word	0x20000554
 8001a10:	200005d4 	.word	0x200005d4
 8001a14:	0800b0f4 	.word	0x0800b0f4
 8001a18:	200004d4 	.word	0x200004d4
 8001a1c:	200005d8 	.word	0x200005d8
 8001a20:	20000424 	.word	0x20000424

08001a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a28:	b672      	cpsid	i
}
 8001a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <Error_Handler+0x8>

08001a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	4b10      	ldr	r3, [pc, #64]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a46:	4b0d      	ldr	r3, [pc, #52]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	4a08      	ldr	r2, [pc, #32]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a62:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <HAL_MspInit+0x4c>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 8001a6e:	2006      	movs	r0, #6
 8001a70:	f001 f9c6 	bl	8002e00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40023800 	.word	0x40023800

08001a80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a26      	ldr	r2, [pc, #152]	@ (8001b28 <HAL_ADC_MspInit+0xa8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d145      	bne.n	8001b1e <HAL_ADC_MspInit+0x9e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b25      	ldr	r3, [pc, #148]	@ (8001b2c <HAL_ADC_MspInit+0xac>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9a:	4a24      	ldr	r2, [pc, #144]	@ (8001b2c <HAL_ADC_MspInit+0xac>)
 8001a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aa2:	4b22      	ldr	r3, [pc, #136]	@ (8001b2c <HAL_ADC_MspInit+0xac>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001aae:	4b20      	ldr	r3, [pc, #128]	@ (8001b30 <HAL_ADC_MspInit+0xb0>)
 8001ab0:	4a20      	ldr	r2, [pc, #128]	@ (8001b34 <HAL_ADC_MspInit+0xb4>)
 8001ab2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b30 <HAL_ADC_MspInit+0xb0>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aba:	4b1d      	ldr	r3, [pc, #116]	@ (8001b30 <HAL_ADC_MspInit+0xb0>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ac0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b30 <HAL_ADC_MspInit+0xb0>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b30 <HAL_ADC_MspInit+0xb0>)
 8001ac8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001acc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ace:	4b18      	ldr	r3, [pc, #96]	@ (8001b30 <HAL_ADC_MspInit+0xb0>)
 8001ad0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ad4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ad6:	4b16      	ldr	r3, [pc, #88]	@ (8001b30 <HAL_ADC_MspInit+0xb0>)
 8001ad8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001adc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001ade:	4b14      	ldr	r3, [pc, #80]	@ (8001b30 <HAL_ADC_MspInit+0xb0>)
 8001ae0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ae4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ae6:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <HAL_ADC_MspInit+0xb0>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aec:	4b10      	ldr	r3, [pc, #64]	@ (8001b30 <HAL_ADC_MspInit+0xb0>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001af2:	480f      	ldr	r0, [pc, #60]	@ (8001b30 <HAL_ADC_MspInit+0xb0>)
 8001af4:	f001 f9c6 	bl	8002e84 <HAL_DMA_Init>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_ADC_MspInit+0x82>
    {
      Error_Handler();
 8001afe:	f7ff ff91 	bl	8001a24 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a0a      	ldr	r2, [pc, #40]	@ (8001b30 <HAL_ADC_MspInit+0xb0>)
 8001b06:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b08:	4a09      	ldr	r2, [pc, #36]	@ (8001b30 <HAL_ADC_MspInit+0xb0>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2100      	movs	r1, #0
 8001b12:	2012      	movs	r0, #18
 8001b14:	f001 f97f 	bl	8002e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001b18:	2012      	movs	r0, #18
 8001b1a:	f001 f998 	bl	8002e4e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b1e:	bf00      	nop
 8001b20:	3710      	adds	r7, #16
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40012000 	.word	0x40012000
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	20000268 	.word	0x20000268
 8001b34:	40026410 	.word	0x40026410

08001b38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	@ 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a50      	ldr	r2, [pc, #320]	@ (8001c98 <HAL_I2C_MspInit+0x160>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	f040 8099 	bne.w	8001c8e <HAL_I2C_MspInit+0x156>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	4b4e      	ldr	r3, [pc, #312]	@ (8001c9c <HAL_I2C_MspInit+0x164>)
 8001b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b64:	4a4d      	ldr	r2, [pc, #308]	@ (8001c9c <HAL_I2C_MspInit+0x164>)
 8001b66:	f043 0302 	orr.w	r3, r3, #2
 8001b6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6c:	4b4b      	ldr	r3, [pc, #300]	@ (8001c9c <HAL_I2C_MspInit+0x164>)
 8001b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b78:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b7e:	2312      	movs	r3, #18
 8001b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b86:	2303      	movs	r3, #3
 8001b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b8a:	2304      	movs	r3, #4
 8001b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8e:	f107 0314 	add.w	r3, r7, #20
 8001b92:	4619      	mov	r1, r3
 8001b94:	4842      	ldr	r0, [pc, #264]	@ (8001ca0 <HAL_I2C_MspInit+0x168>)
 8001b96:	f001 fd91 	bl	80036bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c9c <HAL_I2C_MspInit+0x164>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	4a3e      	ldr	r2, [pc, #248]	@ (8001c9c <HAL_I2C_MspInit+0x164>)
 8001ba4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001baa:	4b3c      	ldr	r3, [pc, #240]	@ (8001c9c <HAL_I2C_MspInit+0x164>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8001bb6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ca4 <HAL_I2C_MspInit+0x16c>)
 8001bb8:	4a3b      	ldr	r2, [pc, #236]	@ (8001ca8 <HAL_I2C_MspInit+0x170>)
 8001bba:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001bbc:	4b39      	ldr	r3, [pc, #228]	@ (8001ca4 <HAL_I2C_MspInit+0x16c>)
 8001bbe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bc2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bc4:	4b37      	ldr	r3, [pc, #220]	@ (8001ca4 <HAL_I2C_MspInit+0x16c>)
 8001bc6:	2240      	movs	r2, #64	@ 0x40
 8001bc8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bca:	4b36      	ldr	r3, [pc, #216]	@ (8001ca4 <HAL_I2C_MspInit+0x16c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bd0:	4b34      	ldr	r3, [pc, #208]	@ (8001ca4 <HAL_I2C_MspInit+0x16c>)
 8001bd2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bd6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bd8:	4b32      	ldr	r3, [pc, #200]	@ (8001ca4 <HAL_I2C_MspInit+0x16c>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bde:	4b31      	ldr	r3, [pc, #196]	@ (8001ca4 <HAL_I2C_MspInit+0x16c>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001be4:	4b2f      	ldr	r3, [pc, #188]	@ (8001ca4 <HAL_I2C_MspInit+0x16c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bea:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca4 <HAL_I2C_MspInit+0x16c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8001ca4 <HAL_I2C_MspInit+0x16c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001bf6:	482b      	ldr	r0, [pc, #172]	@ (8001ca4 <HAL_I2C_MspInit+0x16c>)
 8001bf8:	f001 f944 	bl	8002e84 <HAL_DMA_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8001c02:	f7ff ff0f 	bl	8001a24 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a26      	ldr	r2, [pc, #152]	@ (8001ca4 <HAL_I2C_MspInit+0x16c>)
 8001c0a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c0c:	4a25      	ldr	r2, [pc, #148]	@ (8001ca4 <HAL_I2C_MspInit+0x16c>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001c12:	4b26      	ldr	r3, [pc, #152]	@ (8001cac <HAL_I2C_MspInit+0x174>)
 8001c14:	4a26      	ldr	r2, [pc, #152]	@ (8001cb0 <HAL_I2C_MspInit+0x178>)
 8001c16:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001c18:	4b24      	ldr	r3, [pc, #144]	@ (8001cac <HAL_I2C_MspInit+0x174>)
 8001c1a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c1e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c20:	4b22      	ldr	r3, [pc, #136]	@ (8001cac <HAL_I2C_MspInit+0x174>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c26:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <HAL_I2C_MspInit+0x174>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001cac <HAL_I2C_MspInit+0x174>)
 8001c2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c32:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c34:	4b1d      	ldr	r3, [pc, #116]	@ (8001cac <HAL_I2C_MspInit+0x174>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cac <HAL_I2C_MspInit+0x174>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001c40:	4b1a      	ldr	r3, [pc, #104]	@ (8001cac <HAL_I2C_MspInit+0x174>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c46:	4b19      	ldr	r3, [pc, #100]	@ (8001cac <HAL_I2C_MspInit+0x174>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c4c:	4b17      	ldr	r3, [pc, #92]	@ (8001cac <HAL_I2C_MspInit+0x174>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001c52:	4816      	ldr	r0, [pc, #88]	@ (8001cac <HAL_I2C_MspInit+0x174>)
 8001c54:	f001 f916 	bl	8002e84 <HAL_DMA_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 8001c5e:	f7ff fee1 	bl	8001a24 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a11      	ldr	r2, [pc, #68]	@ (8001cac <HAL_I2C_MspInit+0x174>)
 8001c66:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c68:	4a10      	ldr	r2, [pc, #64]	@ (8001cac <HAL_I2C_MspInit+0x174>)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2100      	movs	r1, #0
 8001c72:	201f      	movs	r0, #31
 8001c74:	f001 f8cf 	bl	8002e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001c78:	201f      	movs	r0, #31
 8001c7a:	f001 f8e8 	bl	8002e4e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2100      	movs	r1, #0
 8001c82:	2020      	movs	r0, #32
 8001c84:	f001 f8c7 	bl	8002e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001c88:	2020      	movs	r0, #32
 8001c8a:	f001 f8e0 	bl	8002e4e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c8e:	bf00      	nop
 8001c90:	3728      	adds	r7, #40	@ 0x28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40005400 	.word	0x40005400
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40020400 	.word	0x40020400
 8001ca4:	2000031c 	.word	0x2000031c
 8001ca8:	400260b8 	.word	0x400260b8
 8001cac:	2000037c 	.word	0x2000037c
 8001cb0:	40026010 	.word	0x40026010

08001cb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cc4:	d115      	bne.n	8001cf2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	4b0c      	ldr	r3, [pc, #48]	@ (8001cfc <HAL_TIM_Base_MspInit+0x48>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	4a0b      	ldr	r2, [pc, #44]	@ (8001cfc <HAL_TIM_Base_MspInit+0x48>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cd6:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <HAL_TIM_Base_MspInit+0x48>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	201c      	movs	r0, #28
 8001ce8:	f001 f895 	bl	8002e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cec:	201c      	movs	r0, #28
 8001cee:	f001 f8ae 	bl	8002e4e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800

08001d00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	@ 0x28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	60da      	str	r2, [r3, #12]
 8001d16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a34      	ldr	r2, [pc, #208]	@ (8001df0 <HAL_UART_MspInit+0xf0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d161      	bne.n	8001de6 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	613b      	str	r3, [r7, #16]
 8001d26:	4b33      	ldr	r3, [pc, #204]	@ (8001df4 <HAL_UART_MspInit+0xf4>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	4a32      	ldr	r2, [pc, #200]	@ (8001df4 <HAL_UART_MspInit+0xf4>)
 8001d2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d32:	4b30      	ldr	r3, [pc, #192]	@ (8001df4 <HAL_UART_MspInit+0xf4>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3a:	613b      	str	r3, [r7, #16]
 8001d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	4b2c      	ldr	r3, [pc, #176]	@ (8001df4 <HAL_UART_MspInit+0xf4>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	4a2b      	ldr	r2, [pc, #172]	@ (8001df4 <HAL_UART_MspInit+0xf4>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d4e:	4b29      	ldr	r3, [pc, #164]	@ (8001df4 <HAL_UART_MspInit+0xf4>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d5a:	230c      	movs	r3, #12
 8001d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d66:	2300      	movs	r3, #0
 8001d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d6a:	2307      	movs	r3, #7
 8001d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6e:	f107 0314 	add.w	r3, r7, #20
 8001d72:	4619      	mov	r1, r3
 8001d74:	4820      	ldr	r0, [pc, #128]	@ (8001df8 <HAL_UART_MspInit+0xf8>)
 8001d76:	f001 fca1 	bl	80036bc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001d7a:	4b20      	ldr	r3, [pc, #128]	@ (8001dfc <HAL_UART_MspInit+0xfc>)
 8001d7c:	4a20      	ldr	r2, [pc, #128]	@ (8001e00 <HAL_UART_MspInit+0x100>)
 8001d7e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001d80:	4b1e      	ldr	r3, [pc, #120]	@ (8001dfc <HAL_UART_MspInit+0xfc>)
 8001d82:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d86:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d88:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <HAL_UART_MspInit+0xfc>)
 8001d8a:	2240      	movs	r2, #64	@ 0x40
 8001d8c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dfc <HAL_UART_MspInit+0xfc>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d94:	4b19      	ldr	r3, [pc, #100]	@ (8001dfc <HAL_UART_MspInit+0xfc>)
 8001d96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d9a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d9c:	4b17      	ldr	r3, [pc, #92]	@ (8001dfc <HAL_UART_MspInit+0xfc>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001da2:	4b16      	ldr	r3, [pc, #88]	@ (8001dfc <HAL_UART_MspInit+0xfc>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001da8:	4b14      	ldr	r3, [pc, #80]	@ (8001dfc <HAL_UART_MspInit+0xfc>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001dae:	4b13      	ldr	r3, [pc, #76]	@ (8001dfc <HAL_UART_MspInit+0xfc>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001db4:	4b11      	ldr	r3, [pc, #68]	@ (8001dfc <HAL_UART_MspInit+0xfc>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001dba:	4810      	ldr	r0, [pc, #64]	@ (8001dfc <HAL_UART_MspInit+0xfc>)
 8001dbc:	f001 f862 	bl	8002e84 <HAL_DMA_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8001dc6:	f7ff fe2d 	bl	8001a24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a0b      	ldr	r2, [pc, #44]	@ (8001dfc <HAL_UART_MspInit+0xfc>)
 8001dce:	639a      	str	r2, [r3, #56]	@ 0x38
 8001dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8001dfc <HAL_UART_MspInit+0xfc>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2100      	movs	r1, #0
 8001dda:	2026      	movs	r0, #38	@ 0x26
 8001ddc:	f001 f81b 	bl	8002e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001de0:	2026      	movs	r0, #38	@ 0x26
 8001de2:	f001 f834 	bl	8002e4e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001de6:	bf00      	nop
 8001de8:	3728      	adds	r7, #40	@ 0x28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40004400 	.word	0x40004400
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40020000 	.word	0x40020000
 8001dfc:	2000046c 	.word	0x2000046c
 8001e00:	400260a0 	.word	0x400260a0

08001e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <NMI_Handler+0x4>

08001e0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <HardFault_Handler+0x4>

08001e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <MemManage_Handler+0x4>

08001e1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <BusFault_Handler+0x4>

08001e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <UsageFault_Handler+0x4>

08001e2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e5a:	f000 f9b1 	bl	80021c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001e68:	4802      	ldr	r0, [pc, #8]	@ (8001e74 <DMA1_Stream0_IRQHandler+0x10>)
 8001e6a:	f001 f9a3 	bl	80031b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2000037c 	.word	0x2000037c

08001e78 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001e7c:	4802      	ldr	r0, [pc, #8]	@ (8001e88 <DMA1_Stream6_IRQHandler+0x10>)
 8001e7e:	f001 f999 	bl	80031b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	2000046c 	.word	0x2000046c

08001e8c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e90:	4802      	ldr	r0, [pc, #8]	@ (8001e9c <ADC_IRQHandler+0x10>)
 8001e92:	f000 fa1c 	bl	80022ce <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000220 	.word	0x20000220

08001ea0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ea4:	4802      	ldr	r0, [pc, #8]	@ (8001eb0 <TIM2_IRQHandler+0x10>)
 8001ea6:	f004 feb5 	bl	8006c14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200003dc 	.word	0x200003dc

08001eb4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001eb8:	4802      	ldr	r0, [pc, #8]	@ (8001ec4 <I2C1_EV_IRQHandler+0x10>)
 8001eba:	f002 f921 	bl	8004100 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200002c8 	.word	0x200002c8

08001ec8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ecc:	4802      	ldr	r0, [pc, #8]	@ (8001ed8 <I2C1_ER_IRQHandler+0x10>)
 8001ece:	f002 fa6a 	bl	80043a6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200002c8 	.word	0x200002c8

08001edc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ee0:	4802      	ldr	r0, [pc, #8]	@ (8001eec <USART2_IRQHandler+0x10>)
 8001ee2:	f005 fae9 	bl	80074b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000424 	.word	0x20000424

08001ef0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001ef4:	4802      	ldr	r0, [pc, #8]	@ (8001f00 <DMA1_Stream7_IRQHandler+0x10>)
 8001ef6:	f001 f95d 	bl	80031b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	2000031c 	.word	0x2000031c

08001f04 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f08:	4802      	ldr	r0, [pc, #8]	@ (8001f14 <DMA2_Stream0_IRQHandler+0x10>)
 8001f0a:	f001 f953 	bl	80031b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000268 	.word	0x20000268

08001f18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return 1;
 8001f1c:	2301      	movs	r3, #1
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <_kill>:

int _kill(int pid, int sig)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f32:	f007 f849 	bl	8008fc8 <__errno>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2216      	movs	r2, #22
 8001f3a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <_exit>:

void _exit (int status)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f50:	f04f 31ff 	mov.w	r1, #4294967295
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ffe7 	bl	8001f28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f5a:	bf00      	nop
 8001f5c:	e7fd      	b.n	8001f5a <_exit+0x12>

08001f5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b086      	sub	sp, #24
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	60f8      	str	r0, [r7, #12]
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	e00a      	b.n	8001f86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f70:	f3af 8000 	nop.w
 8001f74:	4601      	mov	r1, r0
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	60ba      	str	r2, [r7, #8]
 8001f7c:	b2ca      	uxtb	r2, r1
 8001f7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	3301      	adds	r3, #1
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	dbf0      	blt.n	8001f70 <_read+0x12>
  }

  return len;
 8001f8e:	687b      	ldr	r3, [r7, #4]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	e009      	b.n	8001fbe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	60ba      	str	r2, [r7, #8]
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	697a      	ldr	r2, [r7, #20]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	dbf1      	blt.n	8001faa <_write+0x12>
  }
  return len;
 8001fc6:	687b      	ldr	r3, [r7, #4]
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <_close>:

int _close(int file)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ff8:	605a      	str	r2, [r3, #4]
  return 0;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <_isatty>:

int _isatty(int file)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002010:	2301      	movs	r3, #1
}
 8002012:	4618      	mov	r0, r3
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800201e:	b480      	push	{r7}
 8002020:	b085      	sub	sp, #20
 8002022:	af00      	add	r7, sp, #0
 8002024:	60f8      	str	r0, [r7, #12]
 8002026:	60b9      	str	r1, [r7, #8]
 8002028:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002040:	4a14      	ldr	r2, [pc, #80]	@ (8002094 <_sbrk+0x5c>)
 8002042:	4b15      	ldr	r3, [pc, #84]	@ (8002098 <_sbrk+0x60>)
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800204c:	4b13      	ldr	r3, [pc, #76]	@ (800209c <_sbrk+0x64>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d102      	bne.n	800205a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002054:	4b11      	ldr	r3, [pc, #68]	@ (800209c <_sbrk+0x64>)
 8002056:	4a12      	ldr	r2, [pc, #72]	@ (80020a0 <_sbrk+0x68>)
 8002058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205a:	4b10      	ldr	r3, [pc, #64]	@ (800209c <_sbrk+0x64>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	429a      	cmp	r2, r3
 8002066:	d207      	bcs.n	8002078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002068:	f006 ffae 	bl	8008fc8 <__errno>
 800206c:	4603      	mov	r3, r0
 800206e:	220c      	movs	r2, #12
 8002070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
 8002076:	e009      	b.n	800208c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002078:	4b08      	ldr	r3, [pc, #32]	@ (800209c <_sbrk+0x64>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800207e:	4b07      	ldr	r3, [pc, #28]	@ (800209c <_sbrk+0x64>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	4a05      	ldr	r2, [pc, #20]	@ (800209c <_sbrk+0x64>)
 8002088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800208a:	68fb      	ldr	r3, [r7, #12]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	20018000 	.word	0x20018000
 8002098:	00000400 	.word	0x00000400
 800209c:	200005dc 	.word	0x200005dc
 80020a0:	20000730 	.word	0x20000730

080020a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020a8:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <SystemInit+0x20>)
 80020aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ae:	4a05      	ldr	r2, [pc, #20]	@ (80020c4 <SystemInit+0x20>)
 80020b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002100 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020cc:	f7ff ffea 	bl	80020a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020d0:	480c      	ldr	r0, [pc, #48]	@ (8002104 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020d2:	490d      	ldr	r1, [pc, #52]	@ (8002108 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020d4:	4a0d      	ldr	r2, [pc, #52]	@ (800210c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d8:	e002      	b.n	80020e0 <LoopCopyDataInit>

080020da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020de:	3304      	adds	r3, #4

080020e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e4:	d3f9      	bcc.n	80020da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002110 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002114 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020ec:	e001      	b.n	80020f2 <LoopFillZerobss>

080020ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f0:	3204      	adds	r2, #4

080020f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f4:	d3fb      	bcc.n	80020ee <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80020f6:	f006 ff6d 	bl	8008fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020fa:	f7ff f951 	bl	80013a0 <main>
  bx  lr    
 80020fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002100:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002108:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 800210c:	0800b4a8 	.word	0x0800b4a8
  ldr r2, =_sbss
 8002110:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002114:	20000730 	.word	0x20000730

08002118 <DMA1_Stream1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002118:	e7fe      	b.n	8002118 <DMA1_Stream1_IRQHandler>
	...

0800211c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002120:	4b0e      	ldr	r3, [pc, #56]	@ (800215c <HAL_Init+0x40>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0d      	ldr	r2, [pc, #52]	@ (800215c <HAL_Init+0x40>)
 8002126:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800212a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800212c:	4b0b      	ldr	r3, [pc, #44]	@ (800215c <HAL_Init+0x40>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a0a      	ldr	r2, [pc, #40]	@ (800215c <HAL_Init+0x40>)
 8002132:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002136:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002138:	4b08      	ldr	r3, [pc, #32]	@ (800215c <HAL_Init+0x40>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a07      	ldr	r2, [pc, #28]	@ (800215c <HAL_Init+0x40>)
 800213e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002142:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002144:	2003      	movs	r0, #3
 8002146:	f000 fe5b 	bl	8002e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800214a:	2000      	movs	r0, #0
 800214c:	f000 f808 	bl	8002160 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002150:	f7ff fc6e 	bl	8001a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40023c00 	.word	0x40023c00

08002160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002168:	4b12      	ldr	r3, [pc, #72]	@ (80021b4 <HAL_InitTick+0x54>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b12      	ldr	r3, [pc, #72]	@ (80021b8 <HAL_InitTick+0x58>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	4619      	mov	r1, r3
 8002172:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002176:	fbb3 f3f1 	udiv	r3, r3, r1
 800217a:	fbb2 f3f3 	udiv	r3, r2, r3
 800217e:	4618      	mov	r0, r3
 8002180:	f000 fe73 	bl	8002e6a <HAL_SYSTICK_Config>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e00e      	b.n	80021ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b0f      	cmp	r3, #15
 8002192:	d80a      	bhi.n	80021aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002194:	2200      	movs	r2, #0
 8002196:	6879      	ldr	r1, [r7, #4]
 8002198:	f04f 30ff 	mov.w	r0, #4294967295
 800219c:	f000 fe3b 	bl	8002e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021a0:	4a06      	ldr	r2, [pc, #24]	@ (80021bc <HAL_InitTick+0x5c>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
 80021a8:	e000      	b.n	80021ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	2000002c 	.word	0x2000002c
 80021b8:	20000034 	.word	0x20000034
 80021bc:	20000030 	.word	0x20000030

080021c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c4:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <HAL_IncTick+0x20>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <HAL_IncTick+0x24>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4413      	add	r3, r2
 80021d0:	4a04      	ldr	r2, [pc, #16]	@ (80021e4 <HAL_IncTick+0x24>)
 80021d2:	6013      	str	r3, [r2, #0]
}
 80021d4:	bf00      	nop
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000034 	.word	0x20000034
 80021e4:	200005e0 	.word	0x200005e0

080021e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return uwTick;
 80021ec:	4b03      	ldr	r3, [pc, #12]	@ (80021fc <HAL_GetTick+0x14>)
 80021ee:	681b      	ldr	r3, [r3, #0]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	200005e0 	.word	0x200005e0

08002200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002208:	f7ff ffee 	bl	80021e8 <HAL_GetTick>
 800220c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002218:	d005      	beq.n	8002226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800221a:	4b0a      	ldr	r3, [pc, #40]	@ (8002244 <HAL_Delay+0x44>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	461a      	mov	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4413      	add	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002226:	bf00      	nop
 8002228:	f7ff ffde 	bl	80021e8 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	429a      	cmp	r2, r3
 8002236:	d8f7      	bhi.n	8002228 <HAL_Delay+0x28>
  {
  }
}
 8002238:	bf00      	nop
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000034 	.word	0x20000034

08002248 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e033      	b.n	80022c6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	d109      	bne.n	800227a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff fc0a 	bl	8001a80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	2b00      	cmp	r3, #0
 8002284:	d118      	bne.n	80022b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800228e:	f023 0302 	bic.w	r3, r3, #2
 8002292:	f043 0202 	orr.w	r2, r3, #2
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 fb58 	bl	8002950 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	f023 0303 	bic.w	r3, r3, #3
 80022ae:	f043 0201 	orr.w	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80022b6:	e001      	b.n	80022bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d049      	beq.n	8002398 <HAL_ADC_IRQHandler+0xca>
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d046      	beq.n	8002398 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	2b00      	cmp	r3, #0
 8002314:	d105      	bne.n	8002322 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d12b      	bne.n	8002388 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002334:	2b00      	cmp	r3, #0
 8002336:	d127      	bne.n	8002388 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002342:	2b00      	cmp	r3, #0
 8002344:	d006      	beq.n	8002354 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002350:	2b00      	cmp	r3, #0
 8002352:	d119      	bne.n	8002388 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0220 	bic.w	r2, r2, #32
 8002362:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002368:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002374:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d105      	bne.n	8002388 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002380:	f043 0201 	orr.w	r2, r3, #1
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff fa71 	bl	8001870 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f06f 0212 	mvn.w	r2, #18
 8002396:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023a6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d057      	beq.n	800245e <HAL_ADC_IRQHandler+0x190>
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d054      	beq.n	800245e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	f003 0310 	and.w	r3, r3, #16
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d105      	bne.n	80023cc <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d139      	bne.n	800244e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d006      	beq.n	80023f6 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d12b      	bne.n	800244e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002400:	2b00      	cmp	r3, #0
 8002402:	d124      	bne.n	800244e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800240e:	2b00      	cmp	r3, #0
 8002410:	d11d      	bne.n	800244e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002416:	2b00      	cmp	r3, #0
 8002418:	d119      	bne.n	800244e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002428:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800243e:	2b00      	cmp	r3, #0
 8002440:	d105      	bne.n	800244e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002446:	f043 0201 	orr.w	r2, r3, #1
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 fbfc 	bl	8002c4c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f06f 020c 	mvn.w	r2, #12
 800245c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800246c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d017      	beq.n	80024a4 <HAL_ADC_IRQHandler+0x1d6>
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d014      	beq.n	80024a4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b01      	cmp	r3, #1
 8002486:	d10d      	bne.n	80024a4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f925 	bl	80026e4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f06f 0201 	mvn.w	r2, #1
 80024a2:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 0320 	and.w	r3, r3, #32
 80024aa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024b2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d015      	beq.n	80024e6 <HAL_ADC_IRQHandler+0x218>
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d012      	beq.n	80024e6 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c4:	f043 0202 	orr.w	r2, r3, #2
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f06f 0220 	mvn.w	r2, #32
 80024d4:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f90e 	bl	80026f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f06f 0220 	mvn.w	r2, #32
 80024e4:	601a      	str	r2, [r3, #0]
  }
}
 80024e6:	bf00      	nop
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002506:	2b01      	cmp	r3, #1
 8002508:	d101      	bne.n	800250e <HAL_ADC_Start_DMA+0x1e>
 800250a:	2302      	movs	r3, #2
 800250c:	e0ce      	b.n	80026ac <HAL_ADC_Start_DMA+0x1bc>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b01      	cmp	r3, #1
 8002522:	d018      	beq.n	8002556 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0201 	orr.w	r2, r2, #1
 8002532:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002534:	4b5f      	ldr	r3, [pc, #380]	@ (80026b4 <HAL_ADC_Start_DMA+0x1c4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a5f      	ldr	r2, [pc, #380]	@ (80026b8 <HAL_ADC_Start_DMA+0x1c8>)
 800253a:	fba2 2303 	umull	r2, r3, r2, r3
 800253e:	0c9a      	lsrs	r2, r3, #18
 8002540:	4613      	mov	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4413      	add	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002548:	e002      	b.n	8002550 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	3b01      	subs	r3, #1
 800254e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1f9      	bne.n	800254a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002560:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002564:	d107      	bne.n	8002576 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002574:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b01      	cmp	r3, #1
 8002582:	f040 8086 	bne.w	8002692 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800258e:	f023 0301 	bic.w	r3, r3, #1
 8002592:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d007      	beq.n	80025b8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80025b0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025c4:	d106      	bne.n	80025d4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ca:	f023 0206 	bic.w	r2, r3, #6
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	645a      	str	r2, [r3, #68]	@ 0x44
 80025d2:	e002      	b.n	80025da <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025e2:	4b36      	ldr	r3, [pc, #216]	@ (80026bc <HAL_ADC_Start_DMA+0x1cc>)
 80025e4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ea:	4a35      	ldr	r2, [pc, #212]	@ (80026c0 <HAL_ADC_Start_DMA+0x1d0>)
 80025ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f2:	4a34      	ldr	r2, [pc, #208]	@ (80026c4 <HAL_ADC_Start_DMA+0x1d4>)
 80025f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025fa:	4a33      	ldr	r2, [pc, #204]	@ (80026c8 <HAL_ADC_Start_DMA+0x1d8>)
 80025fc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002606:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002616:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002626:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	334c      	adds	r3, #76	@ 0x4c
 8002632:	4619      	mov	r1, r3
 8002634:	68ba      	ldr	r2, [r7, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f000 fcd2 	bl	8002fe0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10f      	bne.n	8002668 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d129      	bne.n	80026aa <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002664:	609a      	str	r2, [r3, #8]
 8002666:	e020      	b.n	80026aa <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a17      	ldr	r2, [pc, #92]	@ (80026cc <HAL_ADC_Start_DMA+0x1dc>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d11b      	bne.n	80026aa <HAL_ADC_Start_DMA+0x1ba>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d114      	bne.n	80026aa <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800268e:	609a      	str	r2, [r3, #8]
 8002690:	e00b      	b.n	80026aa <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002696:	f043 0210 	orr.w	r2, r3, #16
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a2:	f043 0201 	orr.w	r2, r3, #1
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	2000002c 	.word	0x2000002c
 80026b8:	431bde83 	.word	0x431bde83
 80026bc:	40012300 	.word	0x40012300
 80026c0:	08002b49 	.word	0x08002b49
 80026c4:	08002c03 	.word	0x08002c03
 80026c8:	08002c1f 	.word	0x08002c1f
 80026cc:	40012000 	.word	0x40012000

080026d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002716:	2300      	movs	r3, #0
 8002718:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002720:	2b01      	cmp	r3, #1
 8002722:	d101      	bne.n	8002728 <HAL_ADC_ConfigChannel+0x1c>
 8002724:	2302      	movs	r3, #2
 8002726:	e105      	b.n	8002934 <HAL_ADC_ConfigChannel+0x228>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b09      	cmp	r3, #9
 8002736:	d925      	bls.n	8002784 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68d9      	ldr	r1, [r3, #12]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	b29b      	uxth	r3, r3
 8002744:	461a      	mov	r2, r3
 8002746:	4613      	mov	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4413      	add	r3, r2
 800274c:	3b1e      	subs	r3, #30
 800274e:	2207      	movs	r2, #7
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43da      	mvns	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	400a      	ands	r2, r1
 800275c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68d9      	ldr	r1, [r3, #12]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	b29b      	uxth	r3, r3
 800276e:	4618      	mov	r0, r3
 8002770:	4603      	mov	r3, r0
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	4403      	add	r3, r0
 8002776:	3b1e      	subs	r3, #30
 8002778:	409a      	lsls	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	e022      	b.n	80027ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6919      	ldr	r1, [r3, #16]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	b29b      	uxth	r3, r3
 8002790:	461a      	mov	r2, r3
 8002792:	4613      	mov	r3, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	4413      	add	r3, r2
 8002798:	2207      	movs	r2, #7
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43da      	mvns	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	400a      	ands	r2, r1
 80027a6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6919      	ldr	r1, [r3, #16]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	4618      	mov	r0, r3
 80027ba:	4603      	mov	r3, r0
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	4403      	add	r3, r0
 80027c0:	409a      	lsls	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b06      	cmp	r3, #6
 80027d0:	d824      	bhi.n	800281c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	3b05      	subs	r3, #5
 80027e4:	221f      	movs	r2, #31
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43da      	mvns	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	400a      	ands	r2, r1
 80027f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	4618      	mov	r0, r3
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685a      	ldr	r2, [r3, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	4413      	add	r3, r2
 800280c:	3b05      	subs	r3, #5
 800280e:	fa00 f203 	lsl.w	r2, r0, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	635a      	str	r2, [r3, #52]	@ 0x34
 800281a:	e04c      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b0c      	cmp	r3, #12
 8002822:	d824      	bhi.n	800286e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	4613      	mov	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	3b23      	subs	r3, #35	@ 0x23
 8002836:	221f      	movs	r2, #31
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43da      	mvns	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	400a      	ands	r2, r1
 8002844:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	b29b      	uxth	r3, r3
 8002852:	4618      	mov	r0, r3
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	3b23      	subs	r3, #35	@ 0x23
 8002860:	fa00 f203 	lsl.w	r2, r0, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	631a      	str	r2, [r3, #48]	@ 0x30
 800286c:	e023      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	3b41      	subs	r3, #65	@ 0x41
 8002880:	221f      	movs	r2, #31
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43da      	mvns	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	400a      	ands	r2, r1
 800288e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	b29b      	uxth	r3, r3
 800289c:	4618      	mov	r0, r3
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	3b41      	subs	r3, #65	@ 0x41
 80028aa:	fa00 f203 	lsl.w	r2, r0, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028b6:	4b22      	ldr	r3, [pc, #136]	@ (8002940 <HAL_ADC_ConfigChannel+0x234>)
 80028b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a21      	ldr	r2, [pc, #132]	@ (8002944 <HAL_ADC_ConfigChannel+0x238>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d109      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x1cc>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b12      	cmp	r3, #18
 80028ca:	d105      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a19      	ldr	r2, [pc, #100]	@ (8002944 <HAL_ADC_ConfigChannel+0x238>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d123      	bne.n	800292a <HAL_ADC_ConfigChannel+0x21e>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b10      	cmp	r3, #16
 80028e8:	d003      	beq.n	80028f2 <HAL_ADC_ConfigChannel+0x1e6>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b11      	cmp	r3, #17
 80028f0:	d11b      	bne.n	800292a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b10      	cmp	r3, #16
 8002904:	d111      	bne.n	800292a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002906:	4b10      	ldr	r3, [pc, #64]	@ (8002948 <HAL_ADC_ConfigChannel+0x23c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a10      	ldr	r2, [pc, #64]	@ (800294c <HAL_ADC_ConfigChannel+0x240>)
 800290c:	fba2 2303 	umull	r2, r3, r2, r3
 8002910:	0c9a      	lsrs	r2, r3, #18
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800291c:	e002      	b.n	8002924 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	3b01      	subs	r3, #1
 8002922:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f9      	bne.n	800291e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	40012300 	.word	0x40012300
 8002944:	40012000 	.word	0x40012000
 8002948:	2000002c 	.word	0x2000002c
 800294c:	431bde83 	.word	0x431bde83

08002950 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002958:	4b79      	ldr	r3, [pc, #484]	@ (8002b40 <ADC_Init+0x1f0>)
 800295a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	431a      	orrs	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002984:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6859      	ldr	r1, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	021a      	lsls	r2, r3, #8
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80029a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6859      	ldr	r1, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6899      	ldr	r1, [r3, #8]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e2:	4a58      	ldr	r2, [pc, #352]	@ (8002b44 <ADC_Init+0x1f4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d022      	beq.n	8002a2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6899      	ldr	r1, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	430a      	orrs	r2, r1
 8002a08:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6899      	ldr	r1, [r3, #8]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	e00f      	b.n	8002a4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a4c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0202 	bic.w	r2, r2, #2
 8002a5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6899      	ldr	r1, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	7e1b      	ldrb	r3, [r3, #24]
 8002a68:	005a      	lsls	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d01b      	beq.n	8002ab4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a8a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685a      	ldr	r2, [r3, #4]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6859      	ldr	r1, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	035a      	lsls	r2, r3, #13
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	e007      	b.n	8002ac4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ac2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69db      	ldr	r3, [r3, #28]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	051a      	lsls	r2, r3, #20
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002af8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6899      	ldr	r1, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b06:	025a      	lsls	r2, r3, #9
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6899      	ldr	r1, [r3, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	029a      	lsls	r2, r3, #10
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	609a      	str	r2, [r3, #8]
}
 8002b34:	bf00      	nop
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	40012300 	.word	0x40012300
 8002b44:	0f000001 	.word	0x0f000001

08002b48 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b54:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d13c      	bne.n	8002bdc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b66:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d12b      	bne.n	8002bd4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d127      	bne.n	8002bd4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d006      	beq.n	8002ba0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d119      	bne.n	8002bd4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0220 	bic.w	r2, r2, #32
 8002bae:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d105      	bne.n	8002bd4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bcc:	f043 0201 	orr.w	r2, r3, #1
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f7fe fe4b 	bl	8001870 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002bda:	e00e      	b.n	8002bfa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f7ff fd85 	bl	80026f8 <HAL_ADC_ErrorCallback>
}
 8002bee:	e004      	b.n	8002bfa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	4798      	blx	r3
}
 8002bfa:	bf00      	nop
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b084      	sub	sp, #16
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c0e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f7ff fd5d 	bl	80026d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b084      	sub	sp, #16
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c2a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2240      	movs	r2, #64	@ 0x40
 8002c30:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c36:	f043 0204 	orr.w	r2, r3, #4
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f7ff fd5a 	bl	80026f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c44:	bf00      	nop
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c70:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c92:	4a04      	ldr	r2, [pc, #16]	@ (8002ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	60d3      	str	r3, [r2, #12]
}
 8002c98:	bf00      	nop
 8002c9a:	3714      	adds	r7, #20
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cac:	4b04      	ldr	r3, [pc, #16]	@ (8002cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	0a1b      	lsrs	r3, r3, #8
 8002cb2:	f003 0307 	and.w	r3, r3, #7
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	db0b      	blt.n	8002cee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	f003 021f 	and.w	r2, r3, #31
 8002cdc:	4907      	ldr	r1, [pc, #28]	@ (8002cfc <__NVIC_EnableIRQ+0x38>)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	e000e100 	.word	0xe000e100

08002d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	6039      	str	r1, [r7, #0]
 8002d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	db0a      	blt.n	8002d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	490c      	ldr	r1, [pc, #48]	@ (8002d4c <__NVIC_SetPriority+0x4c>)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	0112      	lsls	r2, r2, #4
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	440b      	add	r3, r1
 8002d24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d28:	e00a      	b.n	8002d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	4908      	ldr	r1, [pc, #32]	@ (8002d50 <__NVIC_SetPriority+0x50>)
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	3b04      	subs	r3, #4
 8002d38:	0112      	lsls	r2, r2, #4
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	761a      	strb	r2, [r3, #24]
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	e000e100 	.word	0xe000e100
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b089      	sub	sp, #36	@ 0x24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f1c3 0307 	rsb	r3, r3, #7
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	bf28      	it	cs
 8002d72:	2304      	movcs	r3, #4
 8002d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	2b06      	cmp	r3, #6
 8002d7c:	d902      	bls.n	8002d84 <NVIC_EncodePriority+0x30>
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3b03      	subs	r3, #3
 8002d82:	e000      	b.n	8002d86 <NVIC_EncodePriority+0x32>
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d88:	f04f 32ff 	mov.w	r2, #4294967295
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43da      	mvns	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	401a      	ands	r2, r3
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	fa01 f303 	lsl.w	r3, r1, r3
 8002da6:	43d9      	mvns	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dac:	4313      	orrs	r3, r2
         );
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3724      	adds	r7, #36	@ 0x24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
	...

08002dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dcc:	d301      	bcc.n	8002dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e00f      	b.n	8002df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8002dfc <SysTick_Config+0x40>)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dda:	210f      	movs	r1, #15
 8002ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8002de0:	f7ff ff8e 	bl	8002d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de4:	4b05      	ldr	r3, [pc, #20]	@ (8002dfc <SysTick_Config+0x40>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dea:	4b04      	ldr	r3, [pc, #16]	@ (8002dfc <SysTick_Config+0x40>)
 8002dec:	2207      	movs	r2, #7
 8002dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	e000e010 	.word	0xe000e010

08002e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f7ff ff29 	bl	8002c60 <__NVIC_SetPriorityGrouping>
}
 8002e0e:	bf00      	nop
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b086      	sub	sp, #24
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e28:	f7ff ff3e 	bl	8002ca8 <__NVIC_GetPriorityGrouping>
 8002e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	6978      	ldr	r0, [r7, #20]
 8002e34:	f7ff ff8e 	bl	8002d54 <NVIC_EncodePriority>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff ff5d 	bl	8002d00 <__NVIC_SetPriority>
}
 8002e46:	bf00      	nop
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	4603      	mov	r3, r0
 8002e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff ff31 	bl	8002cc4 <__NVIC_EnableIRQ>
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff ffa2 	bl	8002dbc <SysTick_Config>
 8002e78:	4603      	mov	r3, r0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002e90:	f7ff f9aa 	bl	80021e8 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e099      	b.n	8002fd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0201 	bic.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ec0:	e00f      	b.n	8002ee2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ec2:	f7ff f991 	bl	80021e8 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b05      	cmp	r3, #5
 8002ece:	d908      	bls.n	8002ee2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2203      	movs	r2, #3
 8002eda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e078      	b.n	8002fd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1e8      	bne.n	8002ec2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	4b38      	ldr	r3, [pc, #224]	@ (8002fdc <HAL_DMA_Init+0x158>)
 8002efc:	4013      	ands	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	2b04      	cmp	r3, #4
 8002f3a:	d107      	bne.n	8002f4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f44:	4313      	orrs	r3, r2
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f023 0307 	bic.w	r3, r3, #7
 8002f62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d117      	bne.n	8002fa6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00e      	beq.n	8002fa6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 fb1b 	bl	80035c4 <DMA_CheckFifoParam>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2240      	movs	r2, #64	@ 0x40
 8002f98:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e016      	b.n	8002fd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 fad2 	bl	8003558 <DMA_CalcBaseAndBitshift>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fbc:	223f      	movs	r2, #63	@ 0x3f
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	f010803f 	.word	0xf010803f

08002fe0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
 8002fec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_DMA_Start_IT+0x26>
 8003002:	2302      	movs	r3, #2
 8003004:	e040      	b.n	8003088 <HAL_DMA_Start_IT+0xa8>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b01      	cmp	r3, #1
 8003018:	d12f      	bne.n	800307a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2202      	movs	r2, #2
 800301e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68b9      	ldr	r1, [r7, #8]
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 fa64 	bl	80034fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003038:	223f      	movs	r2, #63	@ 0x3f
 800303a:	409a      	lsls	r2, r3
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f042 0216 	orr.w	r2, r2, #22
 800304e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003054:	2b00      	cmp	r3, #0
 8003056:	d007      	beq.n	8003068 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0208 	orr.w	r2, r2, #8
 8003066:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0201 	orr.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	e005      	b.n	8003086 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003082:	2302      	movs	r3, #2
 8003084:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003086:	7dfb      	ldrb	r3, [r7, #23]
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800309e:	f7ff f8a3 	bl	80021e8 <HAL_GetTick>
 80030a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d008      	beq.n	80030c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2280      	movs	r2, #128	@ 0x80
 80030b4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e052      	b.n	8003168 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0216 	bic.w	r2, r2, #22
 80030d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d103      	bne.n	80030f2 <HAL_DMA_Abort+0x62>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d007      	beq.n	8003102 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0208 	bic.w	r2, r2, #8
 8003100:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0201 	bic.w	r2, r2, #1
 8003110:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003112:	e013      	b.n	800313c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003114:	f7ff f868 	bl	80021e8 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b05      	cmp	r3, #5
 8003120:	d90c      	bls.n	800313c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2220      	movs	r2, #32
 8003126:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2203      	movs	r2, #3
 800312c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e015      	b.n	8003168 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1e4      	bne.n	8003114 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314e:	223f      	movs	r2, #63	@ 0x3f
 8003150:	409a      	lsls	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d004      	beq.n	800318e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2280      	movs	r2, #128	@ 0x80
 8003188:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e00c      	b.n	80031a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2205      	movs	r2, #5
 8003192:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0201 	bic.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031c0:	4b8e      	ldr	r3, [pc, #568]	@ (80033fc <HAL_DMA_IRQHandler+0x248>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a8e      	ldr	r2, [pc, #568]	@ (8003400 <HAL_DMA_IRQHandler+0x24c>)
 80031c6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ca:	0a9b      	lsrs	r3, r3, #10
 80031cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031de:	2208      	movs	r2, #8
 80031e0:	409a      	lsls	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4013      	ands	r3, r2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d01a      	beq.n	8003220 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d013      	beq.n	8003220 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0204 	bic.w	r2, r2, #4
 8003206:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320c:	2208      	movs	r2, #8
 800320e:	409a      	lsls	r2, r3
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003218:	f043 0201 	orr.w	r2, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003224:	2201      	movs	r2, #1
 8003226:	409a      	lsls	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	4013      	ands	r3, r2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d012      	beq.n	8003256 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003242:	2201      	movs	r2, #1
 8003244:	409a      	lsls	r2, r3
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800324e:	f043 0202 	orr.w	r2, r3, #2
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800325a:	2204      	movs	r2, #4
 800325c:	409a      	lsls	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4013      	ands	r3, r2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d012      	beq.n	800328c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00b      	beq.n	800328c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003278:	2204      	movs	r2, #4
 800327a:	409a      	lsls	r2, r3
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003284:	f043 0204 	orr.w	r2, r3, #4
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003290:	2210      	movs	r2, #16
 8003292:	409a      	lsls	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4013      	ands	r3, r2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d043      	beq.n	8003324 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d03c      	beq.n	8003324 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ae:	2210      	movs	r2, #16
 80032b0:	409a      	lsls	r2, r3
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d018      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d108      	bne.n	80032e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d024      	beq.n	8003324 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	4798      	blx	r3
 80032e2:	e01f      	b.n	8003324 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d01b      	beq.n	8003324 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	4798      	blx	r3
 80032f4:	e016      	b.n	8003324 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003300:	2b00      	cmp	r3, #0
 8003302:	d107      	bne.n	8003314 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0208 	bic.w	r2, r2, #8
 8003312:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003328:	2220      	movs	r2, #32
 800332a:	409a      	lsls	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4013      	ands	r3, r2
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 808f 	beq.w	8003454 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 8087 	beq.w	8003454 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800334a:	2220      	movs	r2, #32
 800334c:	409a      	lsls	r2, r3
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b05      	cmp	r3, #5
 800335c:	d136      	bne.n	80033cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0216 	bic.w	r2, r2, #22
 800336c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	695a      	ldr	r2, [r3, #20]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800337c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003382:	2b00      	cmp	r3, #0
 8003384:	d103      	bne.n	800338e <HAL_DMA_IRQHandler+0x1da>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800338a:	2b00      	cmp	r3, #0
 800338c:	d007      	beq.n	800339e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0208 	bic.w	r2, r2, #8
 800339c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a2:	223f      	movs	r2, #63	@ 0x3f
 80033a4:	409a      	lsls	r2, r3
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d07e      	beq.n	80034c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	4798      	blx	r3
        }
        return;
 80033ca:	e079      	b.n	80034c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d01d      	beq.n	8003416 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10d      	bne.n	8003404 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d031      	beq.n	8003454 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	4798      	blx	r3
 80033f8:	e02c      	b.n	8003454 <HAL_DMA_IRQHandler+0x2a0>
 80033fa:	bf00      	nop
 80033fc:	2000002c 	.word	0x2000002c
 8003400:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003408:	2b00      	cmp	r3, #0
 800340a:	d023      	beq.n	8003454 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	4798      	blx	r3
 8003414:	e01e      	b.n	8003454 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10f      	bne.n	8003444 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0210 	bic.w	r2, r2, #16
 8003432:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003458:	2b00      	cmp	r3, #0
 800345a:	d032      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b00      	cmp	r3, #0
 8003466:	d022      	beq.n	80034ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2205      	movs	r2, #5
 800346c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0201 	bic.w	r2, r2, #1
 800347e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	3301      	adds	r3, #1
 8003484:	60bb      	str	r3, [r7, #8]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	429a      	cmp	r2, r3
 800348a:	d307      	bcc.n	800349c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1f2      	bne.n	8003480 <HAL_DMA_IRQHandler+0x2cc>
 800349a:	e000      	b.n	800349e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800349c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d005      	beq.n	80034c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	4798      	blx	r3
 80034be:	e000      	b.n	80034c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80034c0:	bf00      	nop
    }
  }
}
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034d6:	b2db      	uxtb	r3, r3
}
 80034d8:	4618      	mov	r0, r3
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003518:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	2b40      	cmp	r3, #64	@ 0x40
 8003528:	d108      	bne.n	800353c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800353a:	e007      	b.n	800354c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	60da      	str	r2, [r3, #12]
}
 800354c:	bf00      	nop
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	3b10      	subs	r3, #16
 8003568:	4a14      	ldr	r2, [pc, #80]	@ (80035bc <DMA_CalcBaseAndBitshift+0x64>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	091b      	lsrs	r3, r3, #4
 8003570:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003572:	4a13      	ldr	r2, [pc, #76]	@ (80035c0 <DMA_CalcBaseAndBitshift+0x68>)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b03      	cmp	r3, #3
 8003584:	d909      	bls.n	800359a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800358e:	f023 0303 	bic.w	r3, r3, #3
 8003592:	1d1a      	adds	r2, r3, #4
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	659a      	str	r2, [r3, #88]	@ 0x58
 8003598:	e007      	b.n	80035aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035a2:	f023 0303 	bic.w	r3, r3, #3
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	aaaaaaab 	.word	0xaaaaaaab
 80035c0:	0800b11c 	.word	0x0800b11c

080035c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d11f      	bne.n	800361e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d856      	bhi.n	8003692 <DMA_CheckFifoParam+0xce>
 80035e4:	a201      	add	r2, pc, #4	@ (adr r2, 80035ec <DMA_CheckFifoParam+0x28>)
 80035e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ea:	bf00      	nop
 80035ec:	080035fd 	.word	0x080035fd
 80035f0:	0800360f 	.word	0x0800360f
 80035f4:	080035fd 	.word	0x080035fd
 80035f8:	08003693 	.word	0x08003693
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003600:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d046      	beq.n	8003696 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800360c:	e043      	b.n	8003696 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003612:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003616:	d140      	bne.n	800369a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800361c:	e03d      	b.n	800369a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003626:	d121      	bne.n	800366c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b03      	cmp	r3, #3
 800362c:	d837      	bhi.n	800369e <DMA_CheckFifoParam+0xda>
 800362e:	a201      	add	r2, pc, #4	@ (adr r2, 8003634 <DMA_CheckFifoParam+0x70>)
 8003630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003634:	08003645 	.word	0x08003645
 8003638:	0800364b 	.word	0x0800364b
 800363c:	08003645 	.word	0x08003645
 8003640:	0800365d 	.word	0x0800365d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
      break;
 8003648:	e030      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d025      	beq.n	80036a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800365a:	e022      	b.n	80036a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003660:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003664:	d11f      	bne.n	80036a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800366a:	e01c      	b.n	80036a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d903      	bls.n	800367a <DMA_CheckFifoParam+0xb6>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b03      	cmp	r3, #3
 8003676:	d003      	beq.n	8003680 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003678:	e018      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
      break;
 800367e:	e015      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003684:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00e      	beq.n	80036aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
      break;
 8003690:	e00b      	b.n	80036aa <DMA_CheckFifoParam+0xe6>
      break;
 8003692:	bf00      	nop
 8003694:	e00a      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
      break;
 8003696:	bf00      	nop
 8003698:	e008      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
      break;
 800369a:	bf00      	nop
 800369c:	e006      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
      break;
 800369e:	bf00      	nop
 80036a0:	e004      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
      break;
 80036a2:	bf00      	nop
 80036a4:	e002      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
      break;   
 80036a6:	bf00      	nop
 80036a8:	e000      	b.n	80036ac <DMA_CheckFifoParam+0xe8>
      break;
 80036aa:	bf00      	nop
    }
  } 
  
  return status; 
 80036ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr
 80036ba:	bf00      	nop

080036bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036bc:	b480      	push	{r7}
 80036be:	b089      	sub	sp, #36	@ 0x24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036d2:	2300      	movs	r3, #0
 80036d4:	61fb      	str	r3, [r7, #28]
 80036d6:	e159      	b.n	800398c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036d8:	2201      	movs	r2, #1
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4013      	ands	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	f040 8148 	bne.w	8003986 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f003 0303 	and.w	r3, r3, #3
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d005      	beq.n	800370e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800370a:	2b02      	cmp	r3, #2
 800370c:	d130      	bne.n	8003770 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	2203      	movs	r2, #3
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43db      	mvns	r3, r3
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	4013      	ands	r3, r2
 8003724:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	fa02 f303 	lsl.w	r3, r2, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4313      	orrs	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003744:	2201      	movs	r2, #1
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4013      	ands	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	091b      	lsrs	r3, r3, #4
 800375a:	f003 0201 	and.w	r2, r3, #1
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	2b03      	cmp	r3, #3
 800377a:	d017      	beq.n	80037ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	2203      	movs	r2, #3
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43db      	mvns	r3, r3
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	4013      	ands	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 0303 	and.w	r3, r3, #3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d123      	bne.n	8003800 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	08da      	lsrs	r2, r3, #3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3208      	adds	r2, #8
 80037c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	220f      	movs	r2, #15
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4013      	ands	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f003 0307 	and.w	r3, r3, #7
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	08da      	lsrs	r2, r3, #3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3208      	adds	r2, #8
 80037fa:	69b9      	ldr	r1, [r7, #24]
 80037fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	2203      	movs	r2, #3
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 0203 	and.w	r2, r3, #3
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	fa02 f303 	lsl.w	r3, r2, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4313      	orrs	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 80a2 	beq.w	8003986 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	4b57      	ldr	r3, [pc, #348]	@ (80039a4 <HAL_GPIO_Init+0x2e8>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800384a:	4a56      	ldr	r2, [pc, #344]	@ (80039a4 <HAL_GPIO_Init+0x2e8>)
 800384c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003850:	6453      	str	r3, [r2, #68]	@ 0x44
 8003852:	4b54      	ldr	r3, [pc, #336]	@ (80039a4 <HAL_GPIO_Init+0x2e8>)
 8003854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003856:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800385e:	4a52      	ldr	r2, [pc, #328]	@ (80039a8 <HAL_GPIO_Init+0x2ec>)
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	089b      	lsrs	r3, r3, #2
 8003864:	3302      	adds	r3, #2
 8003866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800386a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	220f      	movs	r2, #15
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	43db      	mvns	r3, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4013      	ands	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a49      	ldr	r2, [pc, #292]	@ (80039ac <HAL_GPIO_Init+0x2f0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d019      	beq.n	80038be <HAL_GPIO_Init+0x202>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a48      	ldr	r2, [pc, #288]	@ (80039b0 <HAL_GPIO_Init+0x2f4>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d013      	beq.n	80038ba <HAL_GPIO_Init+0x1fe>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a47      	ldr	r2, [pc, #284]	@ (80039b4 <HAL_GPIO_Init+0x2f8>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d00d      	beq.n	80038b6 <HAL_GPIO_Init+0x1fa>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a46      	ldr	r2, [pc, #280]	@ (80039b8 <HAL_GPIO_Init+0x2fc>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d007      	beq.n	80038b2 <HAL_GPIO_Init+0x1f6>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a45      	ldr	r2, [pc, #276]	@ (80039bc <HAL_GPIO_Init+0x300>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d101      	bne.n	80038ae <HAL_GPIO_Init+0x1f2>
 80038aa:	2304      	movs	r3, #4
 80038ac:	e008      	b.n	80038c0 <HAL_GPIO_Init+0x204>
 80038ae:	2307      	movs	r3, #7
 80038b0:	e006      	b.n	80038c0 <HAL_GPIO_Init+0x204>
 80038b2:	2303      	movs	r3, #3
 80038b4:	e004      	b.n	80038c0 <HAL_GPIO_Init+0x204>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e002      	b.n	80038c0 <HAL_GPIO_Init+0x204>
 80038ba:	2301      	movs	r3, #1
 80038bc:	e000      	b.n	80038c0 <HAL_GPIO_Init+0x204>
 80038be:	2300      	movs	r3, #0
 80038c0:	69fa      	ldr	r2, [r7, #28]
 80038c2:	f002 0203 	and.w	r2, r2, #3
 80038c6:	0092      	lsls	r2, r2, #2
 80038c8:	4093      	lsls	r3, r2
 80038ca:	69ba      	ldr	r2, [r7, #24]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038d0:	4935      	ldr	r1, [pc, #212]	@ (80039a8 <HAL_GPIO_Init+0x2ec>)
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	089b      	lsrs	r3, r3, #2
 80038d6:	3302      	adds	r3, #2
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038de:	4b38      	ldr	r3, [pc, #224]	@ (80039c0 <HAL_GPIO_Init+0x304>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	43db      	mvns	r3, r3
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4013      	ands	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003902:	4a2f      	ldr	r2, [pc, #188]	@ (80039c0 <HAL_GPIO_Init+0x304>)
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003908:	4b2d      	ldr	r3, [pc, #180]	@ (80039c0 <HAL_GPIO_Init+0x304>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	43db      	mvns	r3, r3
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4013      	ands	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	4313      	orrs	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800392c:	4a24      	ldr	r2, [pc, #144]	@ (80039c0 <HAL_GPIO_Init+0x304>)
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003932:	4b23      	ldr	r3, [pc, #140]	@ (80039c0 <HAL_GPIO_Init+0x304>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	43db      	mvns	r3, r3
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	4013      	ands	r3, r2
 8003940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4313      	orrs	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003956:	4a1a      	ldr	r2, [pc, #104]	@ (80039c0 <HAL_GPIO_Init+0x304>)
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800395c:	4b18      	ldr	r3, [pc, #96]	@ (80039c0 <HAL_GPIO_Init+0x304>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	43db      	mvns	r3, r3
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	4013      	ands	r3, r2
 800396a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	4313      	orrs	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003980:	4a0f      	ldr	r2, [pc, #60]	@ (80039c0 <HAL_GPIO_Init+0x304>)
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	3301      	adds	r3, #1
 800398a:	61fb      	str	r3, [r7, #28]
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	2b0f      	cmp	r3, #15
 8003990:	f67f aea2 	bls.w	80036d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003994:	bf00      	nop
 8003996:	bf00      	nop
 8003998:	3724      	adds	r7, #36	@ 0x24
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40023800 	.word	0x40023800
 80039a8:	40013800 	.word	0x40013800
 80039ac:	40020000 	.word	0x40020000
 80039b0:	40020400 	.word	0x40020400
 80039b4:	40020800 	.word	0x40020800
 80039b8:	40020c00 	.word	0x40020c00
 80039bc:	40021000 	.word	0x40021000
 80039c0:	40013c00 	.word	0x40013c00

080039c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	807b      	strh	r3, [r7, #2]
 80039d0:	4613      	mov	r3, r2
 80039d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039d4:	787b      	ldrb	r3, [r7, #1]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039da:	887a      	ldrh	r2, [r7, #2]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039e0:	e003      	b.n	80039ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039e2:	887b      	ldrh	r3, [r7, #2]
 80039e4:	041a      	lsls	r2, r3, #16
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	619a      	str	r2, [r3, #24]
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e12b      	b.n	8003c62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d106      	bne.n	8003a24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fe f88a 	bl	8001b38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2224      	movs	r2, #36	@ 0x24
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0201 	bic.w	r2, r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a5c:	f003 f800 	bl	8006a60 <HAL_RCC_GetPCLK1Freq>
 8003a60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	4a81      	ldr	r2, [pc, #516]	@ (8003c6c <HAL_I2C_Init+0x274>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d807      	bhi.n	8003a7c <HAL_I2C_Init+0x84>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4a80      	ldr	r2, [pc, #512]	@ (8003c70 <HAL_I2C_Init+0x278>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	bf94      	ite	ls
 8003a74:	2301      	movls	r3, #1
 8003a76:	2300      	movhi	r3, #0
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	e006      	b.n	8003a8a <HAL_I2C_Init+0x92>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4a7d      	ldr	r2, [pc, #500]	@ (8003c74 <HAL_I2C_Init+0x27c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	bf94      	ite	ls
 8003a84:	2301      	movls	r3, #1
 8003a86:	2300      	movhi	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e0e7      	b.n	8003c62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4a78      	ldr	r2, [pc, #480]	@ (8003c78 <HAL_I2C_Init+0x280>)
 8003a96:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9a:	0c9b      	lsrs	r3, r3, #18
 8003a9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	4a6a      	ldr	r2, [pc, #424]	@ (8003c6c <HAL_I2C_Init+0x274>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d802      	bhi.n	8003acc <HAL_I2C_Init+0xd4>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	e009      	b.n	8003ae0 <HAL_I2C_Init+0xe8>
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003ad2:	fb02 f303 	mul.w	r3, r2, r3
 8003ad6:	4a69      	ldr	r2, [pc, #420]	@ (8003c7c <HAL_I2C_Init+0x284>)
 8003ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8003adc:	099b      	lsrs	r3, r3, #6
 8003ade:	3301      	adds	r3, #1
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6812      	ldr	r2, [r2, #0]
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003af2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	495c      	ldr	r1, [pc, #368]	@ (8003c6c <HAL_I2C_Init+0x274>)
 8003afc:	428b      	cmp	r3, r1
 8003afe:	d819      	bhi.n	8003b34 <HAL_I2C_Init+0x13c>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	1e59      	subs	r1, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b0e:	1c59      	adds	r1, r3, #1
 8003b10:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b14:	400b      	ands	r3, r1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <HAL_I2C_Init+0x138>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1e59      	subs	r1, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b28:	3301      	adds	r3, #1
 8003b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b2e:	e051      	b.n	8003bd4 <HAL_I2C_Init+0x1dc>
 8003b30:	2304      	movs	r3, #4
 8003b32:	e04f      	b.n	8003bd4 <HAL_I2C_Init+0x1dc>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d111      	bne.n	8003b60 <HAL_I2C_Init+0x168>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	1e58      	subs	r0, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6859      	ldr	r1, [r3, #4]
 8003b44:	460b      	mov	r3, r1
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	440b      	add	r3, r1
 8003b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b4e:	3301      	adds	r3, #1
 8003b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	bf0c      	ite	eq
 8003b58:	2301      	moveq	r3, #1
 8003b5a:	2300      	movne	r3, #0
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	e012      	b.n	8003b86 <HAL_I2C_Init+0x18e>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	1e58      	subs	r0, r3, #1
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6859      	ldr	r1, [r3, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	0099      	lsls	r1, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b76:	3301      	adds	r3, #1
 8003b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bf0c      	ite	eq
 8003b80:	2301      	moveq	r3, #1
 8003b82:	2300      	movne	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_I2C_Init+0x196>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e022      	b.n	8003bd4 <HAL_I2C_Init+0x1dc>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10e      	bne.n	8003bb4 <HAL_I2C_Init+0x1bc>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1e58      	subs	r0, r3, #1
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6859      	ldr	r1, [r3, #4]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	440b      	add	r3, r1
 8003ba4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ba8:	3301      	adds	r3, #1
 8003baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bb2:	e00f      	b.n	8003bd4 <HAL_I2C_Init+0x1dc>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	1e58      	subs	r0, r3, #1
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6859      	ldr	r1, [r3, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	0099      	lsls	r1, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bca:	3301      	adds	r3, #1
 8003bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	6809      	ldr	r1, [r1, #0]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	69da      	ldr	r2, [r3, #28]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	431a      	orrs	r2, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6911      	ldr	r1, [r2, #16]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	68d2      	ldr	r2, [r2, #12]
 8003c0e:	4311      	orrs	r1, r2
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	430b      	orrs	r3, r1
 8003c16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695a      	ldr	r2, [r3, #20]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0201 	orr.w	r2, r2, #1
 8003c42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	000186a0 	.word	0x000186a0
 8003c70:	001e847f 	.word	0x001e847f
 8003c74:	003d08ff 	.word	0x003d08ff
 8003c78:	431bde83 	.word	0x431bde83
 8003c7c:	10624dd3 	.word	0x10624dd3

08003c80 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c92:	2b80      	cmp	r3, #128	@ 0x80
 8003c94:	d103      	bne.n	8003c9e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	611a      	str	r2, [r3, #16]
  }
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
	...

08003cac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b088      	sub	sp, #32
 8003cb0:	af02      	add	r7, sp, #8
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	607a      	str	r2, [r7, #4]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	460b      	mov	r3, r1
 8003cba:	817b      	strh	r3, [r7, #10]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cc0:	f7fe fa92 	bl	80021e8 <HAL_GetTick>
 8003cc4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b20      	cmp	r3, #32
 8003cd0:	f040 80e0 	bne.w	8003e94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	2319      	movs	r3, #25
 8003cda:	2201      	movs	r2, #1
 8003cdc:	4970      	ldr	r1, [pc, #448]	@ (8003ea0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f002 f828 	bl	8005d34 <I2C_WaitOnFlagUntilTimeout>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003cea:	2302      	movs	r3, #2
 8003cec:	e0d3      	b.n	8003e96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_I2C_Master_Transmit+0x50>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e0cc      	b.n	8003e96 <HAL_I2C_Master_Transmit+0x1ea>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d007      	beq.n	8003d22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0201 	orr.w	r2, r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2221      	movs	r2, #33	@ 0x21
 8003d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2210      	movs	r2, #16
 8003d3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	893a      	ldrh	r2, [r7, #8]
 8003d52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4a50      	ldr	r2, [pc, #320]	@ (8003ea4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003d62:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d64:	8979      	ldrh	r1, [r7, #10]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	6a3a      	ldr	r2, [r7, #32]
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f001 fd9c 	bl	80058a8 <I2C_MasterRequestWrite>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e08d      	b.n	8003e96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	613b      	str	r3, [r7, #16]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d90:	e066      	b.n	8003e60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	6a39      	ldr	r1, [r7, #32]
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f002 f8e6 	bl	8005f68 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00d      	beq.n	8003dbe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d107      	bne.n	8003dba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003db8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e06b      	b.n	8003e96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc2:	781a      	ldrb	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b04      	cmp	r3, #4
 8003dfa:	d11b      	bne.n	8003e34 <HAL_I2C_Master_Transmit+0x188>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d017      	beq.n	8003e34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	781a      	ldrb	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	6a39      	ldr	r1, [r7, #32]
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f002 f8dd 	bl	8005ff8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00d      	beq.n	8003e60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e48:	2b04      	cmp	r3, #4
 8003e4a:	d107      	bne.n	8003e5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e01a      	b.n	8003e96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d194      	bne.n	8003d92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	e000      	b.n	8003e96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e94:	2302      	movs	r3, #2
  }
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	00100002 	.word	0x00100002
 8003ea4:	ffff0000 	.word	0xffff0000

08003ea8 <HAL_I2C_Master_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	607a      	str	r2, [r7, #4]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	817b      	strh	r3, [r7, #10]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b20      	cmp	r3, #32
 8003eca:	f040 8109 	bne.w	80040e0 <HAL_I2C_Master_Receive_DMA+0x238>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ece:	4b87      	ldr	r3, [pc, #540]	@ (80040ec <HAL_I2C_Master_Receive_DMA+0x244>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	08db      	lsrs	r3, r3, #3
 8003ed4:	4a86      	ldr	r2, [pc, #536]	@ (80040f0 <HAL_I2C_Master_Receive_DMA+0x248>)
 8003ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eda:	0a1a      	lsrs	r2, r3, #8
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009a      	lsls	r2, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d112      	bne.n	8003f1a <HAL_I2C_Master_Receive_DMA+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	f043 0220 	orr.w	r2, r3, #32
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8003f16:	2302      	movs	r3, #2
 8003f18:	e0e3      	b.n	80040e2 <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d0df      	beq.n	8003ee8 <HAL_I2C_Master_Receive_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d101      	bne.n	8003f36 <HAL_I2C_Master_Receive_DMA+0x8e>
 8003f32:	2302      	movs	r3, #2
 8003f34:	e0d5      	b.n	80040e2 <HAL_I2C_Master_Receive_DMA+0x23a>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d007      	beq.n	8003f5c <HAL_I2C_Master_Receive_DMA+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0201 	orr.w	r2, r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2222      	movs	r2, #34	@ 0x22
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2210      	movs	r2, #16
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	893a      	ldrh	r2, [r7, #8]
 8003f8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4a56      	ldr	r2, [pc, #344]	@ (80040f4 <HAL_I2C_Master_Receive_DMA+0x24c>)
 8003f9c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8003f9e:	897a      	ldrh	r2, [r7, #10]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	645a      	str	r2, [r3, #68]	@ 0x44

    if (hi2c->XferSize > 0U)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d07b      	beq.n	80040a4 <HAL_I2C_Master_Receive_DMA+0x1fc>
    {
      if (hi2c->hdmarx != NULL)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d02a      	beq.n	800400a <HAL_I2C_Master_Receive_DMA+0x162>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb8:	4a4f      	ldr	r2, [pc, #316]	@ (80040f8 <HAL_I2C_Master_Receive_DMA+0x250>)
 8003fba:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc0:	4a4e      	ldr	r2, [pc, #312]	@ (80040fc <HAL_I2C_Master_Receive_DMA+0x254>)
 8003fc2:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fc8:	2200      	movs	r2, #0
 8003fca:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd8:	2200      	movs	r2, #0
 8003fda:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3310      	adds	r3, #16
 8003fee:	4619      	mov	r1, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffa:	f7fe fff1 	bl	8002fe0 <HAL_DMA_Start_IT>
 8003ffe:	4603      	mov	r3, r0
 8004000:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004002:	7dfb      	ldrb	r3, [r7, #23]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d139      	bne.n	800407c <HAL_I2C_Master_Receive_DMA+0x1d4>
 8004008:	e013      	b.n	8004032 <HAL_I2C_Master_Receive_DMA+0x18a>
        hi2c->State     = HAL_I2C_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e057      	b.n	80040e2 <HAL_I2C_Master_Receive_DMA+0x23a>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004040:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004050:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004068:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004078:	605a      	str	r2, [r3, #4]
 800407a:	e02f      	b.n	80040dc <HAL_I2C_Master_Receive_DMA+0x234>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2220      	movs	r2, #32
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004090:	f043 0210 	orr.w	r2, r3, #16
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e01e      	b.n	80040e2 <HAL_I2C_Master_Receive_DMA+0x23a>
      }
    }
    else
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80040ba:	605a      	str	r2, [r3, #4]

      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040ca:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040da:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	e000      	b.n	80040e2 <HAL_I2C_Master_Receive_DMA+0x23a>
  }
  else
  {
    return HAL_BUSY;
 80040e0:	2302      	movs	r3, #2
  }
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3718      	adds	r7, #24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	2000002c 	.word	0x2000002c
 80040f0:	14f8b589 	.word	0x14f8b589
 80040f4:	ffff0000 	.word	0xffff0000
 80040f8:	080059ad 	.word	0x080059ad
 80040fc:	08005b6b 	.word	0x08005b6b

08004100 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004118:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004120:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004128:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800412a:	7bfb      	ldrb	r3, [r7, #15]
 800412c:	2b10      	cmp	r3, #16
 800412e:	d003      	beq.n	8004138 <HAL_I2C_EV_IRQHandler+0x38>
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	2b40      	cmp	r3, #64	@ 0x40
 8004134:	f040 80b1 	bne.w	800429a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
 8004146:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10d      	bne.n	800416e <HAL_I2C_EV_IRQHandler+0x6e>
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004158:	d003      	beq.n	8004162 <HAL_I2C_EV_IRQHandler+0x62>
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004160:	d101      	bne.n	8004166 <HAL_I2C_EV_IRQHandler+0x66>
 8004162:	2301      	movs	r3, #1
 8004164:	e000      	b.n	8004168 <HAL_I2C_EV_IRQHandler+0x68>
 8004166:	2300      	movs	r3, #0
 8004168:	2b01      	cmp	r3, #1
 800416a:	f000 8114 	beq.w	8004396 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00b      	beq.n	8004190 <HAL_I2C_EV_IRQHandler+0x90>
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800417e:	2b00      	cmp	r3, #0
 8004180:	d006      	beq.n	8004190 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f001 ffe1 	bl	800614a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 fd70 	bl	8004c6e <I2C_Master_SB>
 800418e:	e083      	b.n	8004298 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b00      	cmp	r3, #0
 8004198:	d008      	beq.n	80041ac <HAL_I2C_EV_IRQHandler+0xac>
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fde8 	bl	8004d7a <I2C_Master_ADD10>
 80041aa:	e075      	b.n	8004298 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d008      	beq.n	80041c8 <HAL_I2C_EV_IRQHandler+0xc8>
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 fe04 	bl	8004dce <I2C_Master_ADDR>
 80041c6:	e067      	b.n	8004298 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	f003 0304 	and.w	r3, r3, #4
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d036      	beq.n	8004240 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041e0:	f000 80db 	beq.w	800439a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00d      	beq.n	800420a <HAL_I2C_EV_IRQHandler+0x10a>
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d008      	beq.n	800420a <HAL_I2C_EV_IRQHandler+0x10a>
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d103      	bne.n	800420a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f9cc 	bl	80045a0 <I2C_MasterTransmit_TXE>
 8004208:	e046      	b.n	8004298 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 80c2 	beq.w	800439a <HAL_I2C_EV_IRQHandler+0x29a>
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 80bc 	beq.w	800439a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004222:	7bbb      	ldrb	r3, [r7, #14]
 8004224:	2b21      	cmp	r3, #33	@ 0x21
 8004226:	d103      	bne.n	8004230 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 fa55 	bl	80046d8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800422e:	e0b4      	b.n	800439a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	2b40      	cmp	r3, #64	@ 0x40
 8004234:	f040 80b1 	bne.w	800439a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 fac3 	bl	80047c4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800423e:	e0ac      	b.n	800439a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800424a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800424e:	f000 80a4 	beq.w	800439a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00d      	beq.n	8004278 <HAL_I2C_EV_IRQHandler+0x178>
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004262:	2b00      	cmp	r3, #0
 8004264:	d008      	beq.n	8004278 <HAL_I2C_EV_IRQHandler+0x178>
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	f003 0304 	and.w	r3, r3, #4
 800426c:	2b00      	cmp	r3, #0
 800426e:	d103      	bne.n	8004278 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fb3f 	bl	80048f4 <I2C_MasterReceive_RXNE>
 8004276:	e00f      	b.n	8004298 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 808b 	beq.w	800439a <HAL_I2C_EV_IRQHandler+0x29a>
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 8085 	beq.w	800439a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 fbf7 	bl	8004a84 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004296:	e080      	b.n	800439a <HAL_I2C_EV_IRQHandler+0x29a>
 8004298:	e07f      	b.n	800439a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d004      	beq.n	80042ac <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	61fb      	str	r3, [r7, #28]
 80042aa:	e007      	b.n	80042bc <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d011      	beq.n	80042ea <HAL_I2C_EV_IRQHandler+0x1ea>
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00c      	beq.n	80042ea <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d003      	beq.n	80042e0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80042e0:	69b9      	ldr	r1, [r7, #24]
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 ffc2 	bl	800526c <I2C_Slave_ADDR>
 80042e8:	e05a      	b.n	80043a0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	f003 0310 	and.w	r3, r3, #16
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d008      	beq.n	8004306 <HAL_I2C_EV_IRQHandler+0x206>
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fffc 	bl	80052fc <I2C_Slave_STOPF>
 8004304:	e04c      	b.n	80043a0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004306:	7bbb      	ldrb	r3, [r7, #14]
 8004308:	2b21      	cmp	r3, #33	@ 0x21
 800430a:	d002      	beq.n	8004312 <HAL_I2C_EV_IRQHandler+0x212>
 800430c:	7bbb      	ldrb	r3, [r7, #14]
 800430e:	2b29      	cmp	r3, #41	@ 0x29
 8004310:	d120      	bne.n	8004354 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00d      	beq.n	8004338 <HAL_I2C_EV_IRQHandler+0x238>
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004322:	2b00      	cmp	r3, #0
 8004324:	d008      	beq.n	8004338 <HAL_I2C_EV_IRQHandler+0x238>
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	d103      	bne.n	8004338 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 fedd 	bl	80050f0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004336:	e032      	b.n	800439e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b00      	cmp	r3, #0
 8004340:	d02d      	beq.n	800439e <HAL_I2C_EV_IRQHandler+0x29e>
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004348:	2b00      	cmp	r3, #0
 800434a:	d028      	beq.n	800439e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 ff0c 	bl	800516a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004352:	e024      	b.n	800439e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00d      	beq.n	800437a <HAL_I2C_EV_IRQHandler+0x27a>
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_I2C_EV_IRQHandler+0x27a>
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	f003 0304 	and.w	r3, r3, #4
 800436e:	2b00      	cmp	r3, #0
 8004370:	d103      	bne.n	800437a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 ff1a 	bl	80051ac <I2C_SlaveReceive_RXNE>
 8004378:	e012      	b.n	80043a0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00d      	beq.n	80043a0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800438a:	2b00      	cmp	r3, #0
 800438c:	d008      	beq.n	80043a0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 ff4a 	bl	8005228 <I2C_SlaveReceive_BTF>
 8004394:	e004      	b.n	80043a0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8004396:	bf00      	nop
 8004398:	e002      	b.n	80043a0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800439a:	bf00      	nop
 800439c:	e000      	b.n	80043a0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800439e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80043a0:	3720      	adds	r7, #32
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b08a      	sub	sp, #40	@ 0x28
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80043be:	2300      	movs	r3, #0
 80043c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043c8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00d      	beq.n	80043f0 <HAL_I2C_ER_IRQHandler+0x4a>
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d008      	beq.n	80043f0 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80043de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e0:	f043 0301 	orr.w	r3, r3, #1
 80043e4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80043ee:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00d      	beq.n	8004416 <HAL_I2C_ER_IRQHandler+0x70>
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004400:	2b00      	cmp	r3, #0
 8004402:	d008      	beq.n	8004416 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004406:	f043 0302 	orr.w	r3, r3, #2
 800440a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004414:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800441c:	2b00      	cmp	r3, #0
 800441e:	d03e      	beq.n	800449e <HAL_I2C_ER_IRQHandler+0xf8>
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004426:	2b00      	cmp	r3, #0
 8004428:	d039      	beq.n	800449e <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800442a:	7efb      	ldrb	r3, [r7, #27]
 800442c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004432:	b29b      	uxth	r3, r3
 8004434:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800443c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004442:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004444:	7ebb      	ldrb	r3, [r7, #26]
 8004446:	2b20      	cmp	r3, #32
 8004448:	d112      	bne.n	8004470 <HAL_I2C_ER_IRQHandler+0xca>
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10f      	bne.n	8004470 <HAL_I2C_ER_IRQHandler+0xca>
 8004450:	7cfb      	ldrb	r3, [r7, #19]
 8004452:	2b21      	cmp	r3, #33	@ 0x21
 8004454:	d008      	beq.n	8004468 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004456:	7cfb      	ldrb	r3, [r7, #19]
 8004458:	2b29      	cmp	r3, #41	@ 0x29
 800445a:	d005      	beq.n	8004468 <HAL_I2C_ER_IRQHandler+0xc2>
 800445c:	7cfb      	ldrb	r3, [r7, #19]
 800445e:	2b28      	cmp	r3, #40	@ 0x28
 8004460:	d106      	bne.n	8004470 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b21      	cmp	r3, #33	@ 0x21
 8004466:	d103      	bne.n	8004470 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f001 f877 	bl	800555c <I2C_Slave_AF>
 800446e:	e016      	b.n	800449e <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004478:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800447a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447c:	f043 0304 	orr.w	r3, r3, #4
 8004480:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004482:	7efb      	ldrb	r3, [r7, #27]
 8004484:	2b10      	cmp	r3, #16
 8004486:	d002      	beq.n	800448e <HAL_I2C_ER_IRQHandler+0xe8>
 8004488:	7efb      	ldrb	r3, [r7, #27]
 800448a:	2b40      	cmp	r3, #64	@ 0x40
 800448c:	d107      	bne.n	800449e <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800449c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800449e:	6a3b      	ldr	r3, [r7, #32]
 80044a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00d      	beq.n	80044c4 <HAL_I2C_ER_IRQHandler+0x11e>
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d008      	beq.n	80044c4 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80044b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b4:	f043 0308 	orr.w	r3, r3, #8
 80044b8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80044c2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80044c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d008      	beq.n	80044dc <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f001 f8b4 	bl	8005644 <I2C_ITError>
  }
}
 80044dc:	bf00      	nop
 80044de:	3728      	adds	r7, #40	@ 0x28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]
 800452c:	4613      	mov	r3, r2
 800452e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045ae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045b6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045bc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d150      	bne.n	8004668 <I2C_MasterTransmit_TXE+0xc8>
 80045c6:	7bfb      	ldrb	r3, [r7, #15]
 80045c8:	2b21      	cmp	r3, #33	@ 0x21
 80045ca:	d14d      	bne.n	8004668 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d01d      	beq.n	800460e <I2C_MasterTransmit_TXE+0x6e>
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d01a      	beq.n	800460e <I2C_MasterTransmit_TXE+0x6e>
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045de:	d016      	beq.n	800460e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80045ee:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2211      	movs	r2, #17
 80045f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7ff ff6c 	bl	80044e4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800460c:	e060      	b.n	80046d0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	685a      	ldr	r2, [r3, #4]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800461c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800462c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b40      	cmp	r3, #64	@ 0x40
 8004646:	d107      	bne.n	8004658 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7ff ff7d 	bl	8004550 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004656:	e03b      	b.n	80046d0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f7ff ff3f 	bl	80044e4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004666:	e033      	b.n	80046d0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	2b21      	cmp	r3, #33	@ 0x21
 800466c:	d005      	beq.n	800467a <I2C_MasterTransmit_TXE+0xda>
 800466e:	7bbb      	ldrb	r3, [r7, #14]
 8004670:	2b40      	cmp	r3, #64	@ 0x40
 8004672:	d12d      	bne.n	80046d0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004674:	7bfb      	ldrb	r3, [r7, #15]
 8004676:	2b22      	cmp	r3, #34	@ 0x22
 8004678:	d12a      	bne.n	80046d0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800467e:	b29b      	uxth	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	d108      	bne.n	8004696 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004692:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004694:	e01c      	b.n	80046d0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b40      	cmp	r3, #64	@ 0x40
 80046a0:	d103      	bne.n	80046aa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f88e 	bl	80047c4 <I2C_MemoryTransmit_TXE_BTF>
}
 80046a8:	e012      	b.n	80046d0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ae:	781a      	ldrb	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80046ce:	e7ff      	b.n	80046d0 <I2C_MasterTransmit_TXE+0x130>
 80046d0:	bf00      	nop
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b21      	cmp	r3, #33	@ 0x21
 80046f0:	d164      	bne.n	80047bc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d012      	beq.n	8004722 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004700:	781a      	ldrb	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004716:	b29b      	uxth	r3, r3
 8004718:	3b01      	subs	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004720:	e04c      	b.n	80047bc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b08      	cmp	r3, #8
 8004726:	d01d      	beq.n	8004764 <I2C_MasterTransmit_BTF+0x8c>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b20      	cmp	r3, #32
 800472c:	d01a      	beq.n	8004764 <I2C_MasterTransmit_BTF+0x8c>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004734:	d016      	beq.n	8004764 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004744:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2211      	movs	r2, #17
 800474a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f7ff fec1 	bl	80044e4 <HAL_I2C_MasterTxCpltCallback>
}
 8004762:	e02b      	b.n	80047bc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685a      	ldr	r2, [r3, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004772:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004782:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b40      	cmp	r3, #64	@ 0x40
 800479c:	d107      	bne.n	80047ae <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7ff fed2 	bl	8004550 <HAL_I2C_MemTxCpltCallback>
}
 80047ac:	e006      	b.n	80047bc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7ff fe94 	bl	80044e4 <HAL_I2C_MasterTxCpltCallback>
}
 80047bc:	bf00      	nop
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047d2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d11d      	bne.n	8004818 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d10b      	bne.n	80047fc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047f4:	1c9a      	adds	r2, r3, #2
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80047fa:	e077      	b.n	80048ec <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004800:	b29b      	uxth	r3, r3
 8004802:	121b      	asrs	r3, r3, #8
 8004804:	b2da      	uxtb	r2, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004816:	e069      	b.n	80048ec <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800481c:	2b01      	cmp	r3, #1
 800481e:	d10b      	bne.n	8004838 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004824:	b2da      	uxtb	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004836:	e059      	b.n	80048ec <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800483c:	2b02      	cmp	r3, #2
 800483e:	d152      	bne.n	80048e6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004840:	7bfb      	ldrb	r3, [r7, #15]
 8004842:	2b22      	cmp	r3, #34	@ 0x22
 8004844:	d10d      	bne.n	8004862 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004854:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800485a:	1c5a      	adds	r2, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004860:	e044      	b.n	80048ec <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004866:	b29b      	uxth	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d015      	beq.n	8004898 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800486c:	7bfb      	ldrb	r3, [r7, #15]
 800486e:	2b21      	cmp	r3, #33	@ 0x21
 8004870:	d112      	bne.n	8004898 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004876:	781a      	ldrb	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800488c:	b29b      	uxth	r3, r3
 800488e:	3b01      	subs	r3, #1
 8004890:	b29a      	uxth	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004896:	e029      	b.n	80048ec <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800489c:	b29b      	uxth	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d124      	bne.n	80048ec <I2C_MemoryTransmit_TXE_BTF+0x128>
 80048a2:	7bfb      	ldrb	r3, [r7, #15]
 80048a4:	2b21      	cmp	r3, #33	@ 0x21
 80048a6:	d121      	bne.n	80048ec <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048b6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048c6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2220      	movs	r2, #32
 80048d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff fe36 	bl	8004550 <HAL_I2C_MemTxCpltCallback>
}
 80048e4:	e002      	b.n	80048ec <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7ff f9ca 	bl	8003c80 <I2C_Flush_DR>
}
 80048ec:	bf00      	nop
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b22      	cmp	r3, #34	@ 0x22
 8004906:	f040 80b9 	bne.w	8004a7c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004914:	b29b      	uxth	r3, r3
 8004916:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	2b03      	cmp	r3, #3
 800491c:	d921      	bls.n	8004962 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	691a      	ldr	r2, [r3, #16]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004930:	1c5a      	adds	r2, r3, #1
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800493a:	b29b      	uxth	r3, r3
 800493c:	3b01      	subs	r3, #1
 800493e:	b29a      	uxth	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b03      	cmp	r3, #3
 800494c:	f040 8096 	bne.w	8004a7c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800495e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004960:	e08c      	b.n	8004a7c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004966:	2b02      	cmp	r3, #2
 8004968:	d07f      	beq.n	8004a6a <I2C_MasterReceive_RXNE+0x176>
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d002      	beq.n	8004976 <I2C_MasterReceive_RXNE+0x82>
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d179      	bne.n	8004a6a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f001 fb86 	bl	8006088 <I2C_WaitOnSTOPRequestThroughIT>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d14c      	bne.n	8004a1c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004990:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80049a0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ac:	b2d2      	uxtb	r2, r2
 80049ae:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049be:	b29b      	uxth	r3, r3
 80049c0:	3b01      	subs	r3, #1
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b40      	cmp	r3, #64	@ 0x40
 80049da:	d10a      	bne.n	80049f2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff fdba 	bl	8004564 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80049f0:	e044      	b.n	8004a7c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d002      	beq.n	8004a06 <I2C_MasterReceive_RXNE+0x112>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b20      	cmp	r3, #32
 8004a04:	d103      	bne.n	8004a0e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8004a0c:	e002      	b.n	8004a14 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2212      	movs	r2, #18
 8004a12:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7fc ff8f 	bl	8001938 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004a1a:	e02f      	b.n	8004a7c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a2a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691a      	ldr	r2, [r3, #16]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	3b01      	subs	r3, #1
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7ff fd88 	bl	8004578 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004a68:	e008      	b.n	8004a7c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a78:	605a      	str	r2, [r3, #4]
}
 8004a7a:	e7ff      	b.n	8004a7c <I2C_MasterReceive_RXNE+0x188>
 8004a7c:	bf00      	nop
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a90:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d11b      	bne.n	8004ad4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aaa:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691a      	ldr	r2, [r3, #16]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab6:	b2d2      	uxtb	r2, r2
 8004ab8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	3b01      	subs	r3, #1
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004ad2:	e0c8      	b.n	8004c66 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2b03      	cmp	r3, #3
 8004adc:	d129      	bne.n	8004b32 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aec:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d00a      	beq.n	8004b0a <I2C_MasterReceive_BTF+0x86>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d007      	beq.n	8004b0a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b08:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004b30:	e099      	b.n	8004c66 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	f040 8081 	bne.w	8004c40 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d002      	beq.n	8004b4a <I2C_MasterReceive_BTF+0xc6>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2b10      	cmp	r3, #16
 8004b48:	d108      	bne.n	8004b5c <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	e019      	b.n	8004b90 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	d002      	beq.n	8004b68 <I2C_MasterReceive_BTF+0xe4>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d108      	bne.n	8004b7a <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	e00a      	b.n	8004b90 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2b10      	cmp	r3, #16
 8004b7e:	d007      	beq.n	8004b90 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b8e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691a      	ldr	r2, [r3, #16]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9a:	b2d2      	uxtb	r2, r2
 8004b9c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	691a      	ldr	r2, [r3, #16]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc0:	b2d2      	uxtb	r2, r2
 8004bc2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc8:	1c5a      	adds	r2, r3, #1
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004bea:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b40      	cmp	r3, #64	@ 0x40
 8004bfe:	d10a      	bne.n	8004c16 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7ff fca8 	bl	8004564 <HAL_I2C_MemRxCpltCallback>
}
 8004c14:	e027      	b.n	8004c66 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d002      	beq.n	8004c2a <I2C_MasterReceive_BTF+0x1a6>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2b20      	cmp	r3, #32
 8004c28:	d103      	bne.n	8004c32 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c30:	e002      	b.n	8004c38 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2212      	movs	r2, #18
 8004c36:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7fc fe7d 	bl	8001938 <HAL_I2C_MasterRxCpltCallback>
}
 8004c3e:	e012      	b.n	8004c66 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	691a      	ldr	r2, [r3, #16]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004c66:	bf00      	nop
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b40      	cmp	r3, #64	@ 0x40
 8004c80:	d117      	bne.n	8004cb2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d109      	bne.n	8004c9e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	461a      	mov	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c9a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004c9c:	e067      	b.n	8004d6e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	f043 0301 	orr.w	r3, r3, #1
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	611a      	str	r2, [r3, #16]
}
 8004cb0:	e05d      	b.n	8004d6e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cba:	d133      	bne.n	8004d24 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b21      	cmp	r3, #33	@ 0x21
 8004cc6:	d109      	bne.n	8004cdc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	461a      	mov	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004cd8:	611a      	str	r2, [r3, #16]
 8004cda:	e008      	b.n	8004cee <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	f043 0301 	orr.w	r3, r3, #1
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d004      	beq.n	8004d00 <I2C_Master_SB+0x92>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d108      	bne.n	8004d12 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d032      	beq.n	8004d6e <I2C_Master_SB+0x100>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d02d      	beq.n	8004d6e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d20:	605a      	str	r2, [r3, #4]
}
 8004d22:	e024      	b.n	8004d6e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10e      	bne.n	8004d4a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	11db      	asrs	r3, r3, #7
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	f003 0306 	and.w	r3, r3, #6
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	f063 030f 	orn	r3, r3, #15
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	611a      	str	r2, [r3, #16]
}
 8004d48:	e011      	b.n	8004d6e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d10d      	bne.n	8004d6e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	11db      	asrs	r3, r3, #7
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	f003 0306 	and.w	r3, r3, #6
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	f063 030e 	orn	r3, r3, #14
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	611a      	str	r2, [r3, #16]
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d86:	b2da      	uxtb	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d004      	beq.n	8004da0 <I2C_Master_ADD10+0x26>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d108      	bne.n	8004db2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00c      	beq.n	8004dc2 <I2C_Master_ADD10+0x48>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d007      	beq.n	8004dc2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dc0:	605a      	str	r2, [r3, #4]
  }
}
 8004dc2:	bf00      	nop
 8004dc4:	370c      	adds	r7, #12
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b091      	sub	sp, #68	@ 0x44
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ddc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dea:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b22      	cmp	r3, #34	@ 0x22
 8004df6:	f040 8169 	bne.w	80050cc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10f      	bne.n	8004e22 <I2C_Master_ADDR+0x54>
 8004e02:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004e06:	2b40      	cmp	r3, #64	@ 0x40
 8004e08:	d10b      	bne.n	8004e22 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e20:	e160      	b.n	80050e4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d11d      	bne.n	8004e66 <I2C_Master_ADDR+0x98>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004e32:	d118      	bne.n	8004e66 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e34:	2300      	movs	r3, #0
 8004e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e58:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	651a      	str	r2, [r3, #80]	@ 0x50
 8004e64:	e13e      	b.n	80050e4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d113      	bne.n	8004e98 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e70:	2300      	movs	r3, #0
 8004e72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	e115      	b.n	80050c4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	f040 808a 	bne.w	8004fb8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ea6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004eaa:	d137      	bne.n	8004f1c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eba:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ec6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004eca:	d113      	bne.n	8004ef4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004eda:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004edc:	2300      	movs	r3, #0
 8004ede:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef2:	e0e7      	b.n	80050c4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	623b      	str	r3, [r7, #32]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	623b      	str	r3, [r7, #32]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	623b      	str	r3, [r7, #32]
 8004f08:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	e0d3      	b.n	80050c4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1e:	2b08      	cmp	r3, #8
 8004f20:	d02e      	beq.n	8004f80 <I2C_Master_ADDR+0x1b2>
 8004f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	d02b      	beq.n	8004f80 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f2a:	2b12      	cmp	r3, #18
 8004f2c:	d102      	bne.n	8004f34 <I2C_Master_ADDR+0x166>
 8004f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d125      	bne.n	8004f80 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d00e      	beq.n	8004f58 <I2C_Master_ADDR+0x18a>
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d00b      	beq.n	8004f58 <I2C_Master_ADDR+0x18a>
 8004f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f42:	2b10      	cmp	r3, #16
 8004f44:	d008      	beq.n	8004f58 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	e007      	b.n	8004f68 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f66:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f68:	2300      	movs	r3, #0
 8004f6a:	61fb      	str	r3, [r7, #28]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	61fb      	str	r3, [r7, #28]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	61fb      	str	r3, [r7, #28]
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	e0a1      	b.n	80050c4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f8e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f90:	2300      	movs	r3, #0
 8004f92:	61bb      	str	r3, [r7, #24]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	61bb      	str	r3, [r7, #24]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	61bb      	str	r3, [r7, #24]
 8004fa4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	e085      	b.n	80050c4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d14d      	bne.n	800505e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc4:	2b04      	cmp	r3, #4
 8004fc6:	d016      	beq.n	8004ff6 <I2C_Master_ADDR+0x228>
 8004fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d013      	beq.n	8004ff6 <I2C_Master_ADDR+0x228>
 8004fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd0:	2b10      	cmp	r3, #16
 8004fd2:	d010      	beq.n	8004ff6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fe2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	e007      	b.n	8005006 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005004:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005010:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005014:	d117      	bne.n	8005046 <I2C_Master_ADDR+0x278>
 8005016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005018:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800501c:	d00b      	beq.n	8005036 <I2C_Master_ADDR+0x268>
 800501e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005020:	2b01      	cmp	r3, #1
 8005022:	d008      	beq.n	8005036 <I2C_Master_ADDR+0x268>
 8005024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005026:	2b08      	cmp	r3, #8
 8005028:	d005      	beq.n	8005036 <I2C_Master_ADDR+0x268>
 800502a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800502c:	2b10      	cmp	r3, #16
 800502e:	d002      	beq.n	8005036 <I2C_Master_ADDR+0x268>
 8005030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005032:	2b20      	cmp	r3, #32
 8005034:	d107      	bne.n	8005046 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005044:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005046:	2300      	movs	r3, #0
 8005048:	617b      	str	r3, [r7, #20]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	617b      	str	r3, [r7, #20]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	617b      	str	r3, [r7, #20]
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	e032      	b.n	80050c4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800506c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005078:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800507c:	d117      	bne.n	80050ae <I2C_Master_ADDR+0x2e0>
 800507e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005080:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005084:	d00b      	beq.n	800509e <I2C_Master_ADDR+0x2d0>
 8005086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005088:	2b01      	cmp	r3, #1
 800508a:	d008      	beq.n	800509e <I2C_Master_ADDR+0x2d0>
 800508c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800508e:	2b08      	cmp	r3, #8
 8005090:	d005      	beq.n	800509e <I2C_Master_ADDR+0x2d0>
 8005092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005094:	2b10      	cmp	r3, #16
 8005096:	d002      	beq.n	800509e <I2C_Master_ADDR+0x2d0>
 8005098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509a:	2b20      	cmp	r3, #32
 800509c:	d107      	bne.n	80050ae <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80050ac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ae:	2300      	movs	r3, #0
 80050b0:	613b      	str	r3, [r7, #16]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	613b      	str	r3, [r7, #16]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	613b      	str	r3, [r7, #16]
 80050c2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80050ca:	e00b      	b.n	80050e4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050cc:	2300      	movs	r3, #0
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	60fb      	str	r3, [r7, #12]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
}
 80050e2:	e7ff      	b.n	80050e4 <I2C_Master_ADDR+0x316>
 80050e4:	bf00      	nop
 80050e6:	3744      	adds	r7, #68	@ 0x44
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050fe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005104:	b29b      	uxth	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d02b      	beq.n	8005162 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510e:	781a      	ldrb	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005124:	b29b      	uxth	r3, r3
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005132:	b29b      	uxth	r3, r3
 8005134:	2b00      	cmp	r3, #0
 8005136:	d114      	bne.n	8005162 <I2C_SlaveTransmit_TXE+0x72>
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	2b29      	cmp	r3, #41	@ 0x29
 800513c:	d111      	bne.n	8005162 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800514c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2221      	movs	r2, #33	@ 0x21
 8005152:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2228      	movs	r2, #40	@ 0x28
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7ff f9cb 	bl	80044f8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005162:	bf00      	nop
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d011      	beq.n	80051a0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005180:	781a      	ldrb	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005196:	b29b      	uxth	r3, r3
 8005198:	3b01      	subs	r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80051a0:	bf00      	nop
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051ba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d02c      	beq.n	8005220 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	691a      	ldr	r2, [r3, #16]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d0:	b2d2      	uxtb	r2, r2
 80051d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d114      	bne.n	8005220 <I2C_SlaveReceive_RXNE+0x74>
 80051f6:	7bfb      	ldrb	r3, [r7, #15]
 80051f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80051fa:	d111      	bne.n	8005220 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800520a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2222      	movs	r2, #34	@ 0x22
 8005210:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2228      	movs	r2, #40	@ 0x28
 8005216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7ff f976 	bl	800450c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005220:	bf00      	nop
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005234:	b29b      	uxth	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d012      	beq.n	8005260 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	691a      	ldr	r2, [r3, #16]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524c:	1c5a      	adds	r2, r3, #1
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005256:	b29b      	uxth	r3, r3
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005276:	2300      	movs	r3, #0
 8005278:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005280:	b2db      	uxtb	r3, r3
 8005282:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005286:	2b28      	cmp	r3, #40	@ 0x28
 8005288:	d125      	bne.n	80052d6 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005298:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80052a4:	2301      	movs	r3, #1
 80052a6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d103      	bne.n	80052ba <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	81bb      	strh	r3, [r7, #12]
 80052b8:	e002      	b.n	80052c0 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80052c8:	89ba      	ldrh	r2, [r7, #12]
 80052ca:	7bfb      	ldrb	r3, [r7, #15]
 80052cc:	4619      	mov	r1, r3
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f7ff f926 	bl	8004520 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80052d4:	e00e      	b.n	80052f4 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d6:	2300      	movs	r3, #0
 80052d8:	60bb      	str	r3, [r7, #8]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	60bb      	str	r3, [r7, #8]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	60bb      	str	r3, [r7, #8]
 80052ea:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80052f4:	bf00      	nop
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800530a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685a      	ldr	r2, [r3, #4]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800531a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800531c:	2300      	movs	r3, #0
 800531e:	60bb      	str	r3, [r7, #8]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	60bb      	str	r3, [r7, #8]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0201 	orr.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005348:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005354:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005358:	d172      	bne.n	8005440 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800535a:	7bfb      	ldrb	r3, [r7, #15]
 800535c:	2b22      	cmp	r3, #34	@ 0x22
 800535e:	d002      	beq.n	8005366 <I2C_Slave_STOPF+0x6a>
 8005360:	7bfb      	ldrb	r3, [r7, #15]
 8005362:	2b2a      	cmp	r3, #42	@ 0x2a
 8005364:	d135      	bne.n	80053d2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	b29a      	uxth	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005378:	b29b      	uxth	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d005      	beq.n	800538a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005382:	f043 0204 	orr.w	r2, r3, #4
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005398:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fe f892 	bl	80034c8 <HAL_DMA_GetState>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d049      	beq.n	800543e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ae:	4a69      	ldr	r2, [pc, #420]	@ (8005554 <I2C_Slave_STOPF+0x258>)
 80053b0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7fd feda 	bl	8003170 <HAL_DMA_Abort_IT>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d03d      	beq.n	800543e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80053cc:	4610      	mov	r0, r2
 80053ce:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80053d0:	e035      	b.n	800543e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	b29a      	uxth	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d005      	beq.n	80053f6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ee:	f043 0204 	orr.w	r2, r3, #4
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005404:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800540a:	4618      	mov	r0, r3
 800540c:	f7fe f85c 	bl	80034c8 <HAL_DMA_GetState>
 8005410:	4603      	mov	r3, r0
 8005412:	2b01      	cmp	r3, #1
 8005414:	d014      	beq.n	8005440 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800541a:	4a4e      	ldr	r2, [pc, #312]	@ (8005554 <I2C_Slave_STOPF+0x258>)
 800541c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005422:	4618      	mov	r0, r3
 8005424:	f7fd fea4 	bl	8003170 <HAL_DMA_Abort_IT>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d008      	beq.n	8005440 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005438:	4610      	mov	r0, r2
 800543a:	4798      	blx	r3
 800543c:	e000      	b.n	8005440 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800543e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005444:	b29b      	uxth	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d03e      	beq.n	80054c8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	f003 0304 	and.w	r3, r3, #4
 8005454:	2b04      	cmp	r3, #4
 8005456:	d112      	bne.n	800547e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	691a      	ldr	r2, [r3, #16]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005462:	b2d2      	uxtb	r2, r2
 8005464:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005474:	b29b      	uxth	r3, r3
 8005476:	3b01      	subs	r3, #1
 8005478:	b29a      	uxth	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005488:	2b40      	cmp	r3, #64	@ 0x40
 800548a:	d112      	bne.n	80054b2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	691a      	ldr	r2, [r3, #16]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	3b01      	subs	r3, #1
 80054ac:	b29a      	uxth	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d005      	beq.n	80054c8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c0:	f043 0204 	orr.w	r2, r3, #4
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d003      	beq.n	80054d8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f8b7 	bl	8005644 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80054d6:	e039      	b.n	800554c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80054d8:	7bfb      	ldrb	r3, [r7, #15]
 80054da:	2b2a      	cmp	r3, #42	@ 0x2a
 80054dc:	d109      	bne.n	80054f2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2228      	movs	r2, #40	@ 0x28
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f7ff f80d 	bl	800450c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b28      	cmp	r3, #40	@ 0x28
 80054fc:	d111      	bne.n	8005522 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a15      	ldr	r2, [pc, #84]	@ (8005558 <I2C_Slave_STOPF+0x25c>)
 8005502:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2220      	movs	r2, #32
 800550e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7ff f80e 	bl	800453c <HAL_I2C_ListenCpltCallback>
}
 8005520:	e014      	b.n	800554c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005526:	2b22      	cmp	r3, #34	@ 0x22
 8005528:	d002      	beq.n	8005530 <I2C_Slave_STOPF+0x234>
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	2b22      	cmp	r3, #34	@ 0x22
 800552e:	d10d      	bne.n	800554c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2220      	movs	r2, #32
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7fe ffe0 	bl	800450c <HAL_I2C_SlaveRxCpltCallback>
}
 800554c:	bf00      	nop
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	08005be5 	.word	0x08005be5
 8005558:	ffff0000 	.word	0xffff0000

0800555c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800556a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005570:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b08      	cmp	r3, #8
 8005576:	d002      	beq.n	800557e <I2C_Slave_AF+0x22>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b20      	cmp	r3, #32
 800557c:	d129      	bne.n	80055d2 <I2C_Slave_AF+0x76>
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	2b28      	cmp	r3, #40	@ 0x28
 8005582:	d126      	bne.n	80055d2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a2e      	ldr	r2, [pc, #184]	@ (8005640 <I2C_Slave_AF+0xe4>)
 8005588:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005598:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80055a2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055b2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2220      	movs	r2, #32
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7fe ffb6 	bl	800453c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80055d0:	e031      	b.n	8005636 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80055d2:	7bfb      	ldrb	r3, [r7, #15]
 80055d4:	2b21      	cmp	r3, #33	@ 0x21
 80055d6:	d129      	bne.n	800562c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a19      	ldr	r2, [pc, #100]	@ (8005640 <I2C_Slave_AF+0xe4>)
 80055dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2221      	movs	r2, #33	@ 0x21
 80055e2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005602:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800560c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800561c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7fe fb2e 	bl	8003c80 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7fe ff67 	bl	80044f8 <HAL_I2C_SlaveTxCpltCallback>
}
 800562a:	e004      	b.n	8005636 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005634:	615a      	str	r2, [r3, #20]
}
 8005636:	bf00      	nop
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	ffff0000 	.word	0xffff0000

08005644 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005652:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800565a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800565c:	7bbb      	ldrb	r3, [r7, #14]
 800565e:	2b10      	cmp	r3, #16
 8005660:	d002      	beq.n	8005668 <I2C_ITError+0x24>
 8005662:	7bbb      	ldrb	r3, [r7, #14]
 8005664:	2b40      	cmp	r3, #64	@ 0x40
 8005666:	d10a      	bne.n	800567e <I2C_ITError+0x3a>
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	2b22      	cmp	r3, #34	@ 0x22
 800566c:	d107      	bne.n	800567e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800567c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800567e:	7bfb      	ldrb	r3, [r7, #15]
 8005680:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005684:	2b28      	cmp	r3, #40	@ 0x28
 8005686:	d107      	bne.n	8005698 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2228      	movs	r2, #40	@ 0x28
 8005692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005696:	e015      	b.n	80056c4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056a6:	d00a      	beq.n	80056be <I2C_ITError+0x7a>
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
 80056aa:	2b60      	cmp	r3, #96	@ 0x60
 80056ac:	d007      	beq.n	80056be <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056d2:	d162      	bne.n	800579a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056e2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d020      	beq.n	8005734 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056f6:	4a6a      	ldr	r2, [pc, #424]	@ (80058a0 <I2C_ITError+0x25c>)
 80056f8:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fd fd36 	bl	8003170 <HAL_DMA_Abort_IT>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	f000 8089 	beq.w	800581e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f022 0201 	bic.w	r2, r2, #1
 800571a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2220      	movs	r2, #32
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800572e:	4610      	mov	r0, r2
 8005730:	4798      	blx	r3
 8005732:	e074      	b.n	800581e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005738:	4a59      	ldr	r2, [pc, #356]	@ (80058a0 <I2C_ITError+0x25c>)
 800573a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005740:	4618      	mov	r0, r3
 8005742:	f7fd fd15 	bl	8003170 <HAL_DMA_Abort_IT>
 8005746:	4603      	mov	r3, r0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d068      	beq.n	800581e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005756:	2b40      	cmp	r3, #64	@ 0x40
 8005758:	d10b      	bne.n	8005772 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	691a      	ldr	r2, [r3, #16]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005764:	b2d2      	uxtb	r2, r2
 8005766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576c:	1c5a      	adds	r2, r3, #1
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 0201 	bic.w	r2, r2, #1
 8005780:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2220      	movs	r2, #32
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800578e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005794:	4610      	mov	r0, r2
 8005796:	4798      	blx	r3
 8005798:	e041      	b.n	800581e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b60      	cmp	r3, #96	@ 0x60
 80057a4:	d125      	bne.n	80057f2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057be:	2b40      	cmp	r3, #64	@ 0x40
 80057c0:	d10b      	bne.n	80057da <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	691a      	ldr	r2, [r3, #16]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057cc:	b2d2      	uxtb	r2, r2
 80057ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0201 	bic.w	r2, r2, #1
 80057e8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7fe fece 	bl	800458c <HAL_I2C_AbortCpltCallback>
 80057f0:	e015      	b.n	800581e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fc:	2b40      	cmp	r3, #64	@ 0x40
 80057fe:	d10b      	bne.n	8005818 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	691a      	ldr	r2, [r3, #16]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7fe fead 	bl	8004578 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005822:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10e      	bne.n	800584c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005834:	2b00      	cmp	r3, #0
 8005836:	d109      	bne.n	800584c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800583e:	2b00      	cmp	r3, #0
 8005840:	d104      	bne.n	800584c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005848:	2b00      	cmp	r3, #0
 800584a:	d007      	beq.n	800585c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800585a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005862:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005868:	f003 0304 	and.w	r3, r3, #4
 800586c:	2b04      	cmp	r3, #4
 800586e:	d113      	bne.n	8005898 <I2C_ITError+0x254>
 8005870:	7bfb      	ldrb	r3, [r7, #15]
 8005872:	2b28      	cmp	r3, #40	@ 0x28
 8005874:	d110      	bne.n	8005898 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a0a      	ldr	r2, [pc, #40]	@ (80058a4 <I2C_ITError+0x260>)
 800587a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2220      	movs	r2, #32
 8005886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7fe fe52 	bl	800453c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005898:	bf00      	nop
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	08005be5 	.word	0x08005be5
 80058a4:	ffff0000 	.word	0xffff0000

080058a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b088      	sub	sp, #32
 80058ac:	af02      	add	r7, sp, #8
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	607a      	str	r2, [r7, #4]
 80058b2:	603b      	str	r3, [r7, #0]
 80058b4:	460b      	mov	r3, r1
 80058b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2b08      	cmp	r3, #8
 80058c2:	d006      	beq.n	80058d2 <I2C_MasterRequestWrite+0x2a>
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d003      	beq.n	80058d2 <I2C_MasterRequestWrite+0x2a>
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80058d0:	d108      	bne.n	80058e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	e00b      	b.n	80058fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e8:	2b12      	cmp	r3, #18
 80058ea:	d107      	bne.n	80058fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 fa13 	bl	8005d34 <I2C_WaitOnFlagUntilTimeout>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00d      	beq.n	8005930 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800591e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005922:	d103      	bne.n	800592c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800592a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e035      	b.n	800599c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005938:	d108      	bne.n	800594c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800593a:	897b      	ldrh	r3, [r7, #10]
 800593c:	b2db      	uxtb	r3, r3
 800593e:	461a      	mov	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005948:	611a      	str	r2, [r3, #16]
 800594a:	e01b      	b.n	8005984 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800594c:	897b      	ldrh	r3, [r7, #10]
 800594e:	11db      	asrs	r3, r3, #7
 8005950:	b2db      	uxtb	r3, r3
 8005952:	f003 0306 	and.w	r3, r3, #6
 8005956:	b2db      	uxtb	r3, r3
 8005958:	f063 030f 	orn	r3, r3, #15
 800595c:	b2da      	uxtb	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	490e      	ldr	r1, [pc, #56]	@ (80059a4 <I2C_MasterRequestWrite+0xfc>)
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 fa5c 	bl	8005e28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e010      	b.n	800599c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800597a:	897b      	ldrh	r3, [r7, #10]
 800597c:	b2da      	uxtb	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	4907      	ldr	r1, [pc, #28]	@ (80059a8 <I2C_MasterRequestWrite+0x100>)
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f000 fa4c 	bl	8005e28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e000      	b.n	800599c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3718      	adds	r7, #24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	00010008 	.word	0x00010008
 80059a8:	00010002 	.word	0x00010002

080059ac <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059c0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059c8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80059de:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d003      	beq.n	80059f0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059ec:	2200      	movs	r2, #0
 80059ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fc:	2200      	movs	r2, #0
 80059fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005a00:	7cfb      	ldrb	r3, [r7, #19]
 8005a02:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005a06:	2b21      	cmp	r3, #33	@ 0x21
 8005a08:	d007      	beq.n	8005a1a <I2C_DMAXferCplt+0x6e>
 8005a0a:	7cfb      	ldrb	r3, [r7, #19]
 8005a0c:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8005a10:	2b22      	cmp	r3, #34	@ 0x22
 8005a12:	d131      	bne.n	8005a78 <I2C_DMAXferCplt+0xcc>
 8005a14:	7cbb      	ldrb	r3, [r7, #18]
 8005a16:	2b20      	cmp	r3, #32
 8005a18:	d12e      	bne.n	8005a78 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a28:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005a30:	7cfb      	ldrb	r3, [r7, #19]
 8005a32:	2b29      	cmp	r3, #41	@ 0x29
 8005a34:	d10a      	bne.n	8005a4c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	2221      	movs	r2, #33	@ 0x21
 8005a3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	2228      	movs	r2, #40	@ 0x28
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a44:	6978      	ldr	r0, [r7, #20]
 8005a46:	f7fe fd57 	bl	80044f8 <HAL_I2C_SlaveTxCpltCallback>
 8005a4a:	e00c      	b.n	8005a66 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005a4c:	7cfb      	ldrb	r3, [r7, #19]
 8005a4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a50:	d109      	bne.n	8005a66 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2222      	movs	r2, #34	@ 0x22
 8005a56:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	2228      	movs	r2, #40	@ 0x28
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a60:	6978      	ldr	r0, [r7, #20]
 8005a62:	f7fe fd53 	bl	800450c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005a74:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005a76:	e074      	b.n	8005b62 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d06e      	beq.n	8005b62 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d107      	bne.n	8005a9e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a9c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005aac:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005ab4:	d009      	beq.n	8005aca <I2C_DMAXferCplt+0x11e>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	d006      	beq.n	8005aca <I2C_DMAXferCplt+0x11e>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005ac2:	d002      	beq.n	8005aca <I2C_DMAXferCplt+0x11e>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2b20      	cmp	r3, #32
 8005ac8:	d107      	bne.n	8005ada <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ad8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ae8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005af8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	2200      	movs	r2, #0
 8005afe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005b08:	6978      	ldr	r0, [r7, #20]
 8005b0a:	f7fe fd35 	bl	8004578 <HAL_I2C_ErrorCallback>
}
 8005b0e:	e028      	b.n	8005b62 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	2220      	movs	r2, #32
 8005b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b40      	cmp	r3, #64	@ 0x40
 8005b22:	d10a      	bne.n	8005b3a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005b32:	6978      	ldr	r0, [r7, #20]
 8005b34:	f7fe fd16 	bl	8004564 <HAL_I2C_MemRxCpltCallback>
}
 8005b38:	e013      	b.n	8005b62 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d002      	beq.n	8005b4e <I2C_DMAXferCplt+0x1a2>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2b20      	cmp	r3, #32
 8005b4c:	d103      	bne.n	8005b56 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2200      	movs	r2, #0
 8005b52:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b54:	e002      	b.n	8005b5c <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2212      	movs	r2, #18
 8005b5a:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005b5c:	6978      	ldr	r0, [r7, #20]
 8005b5e:	f7fb feeb 	bl	8001938 <HAL_I2C_MasterRxCpltCallback>
}
 8005b62:	bf00      	nop
 8005b64:	3718      	adds	r7, #24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b76:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b84:	2200      	movs	r2, #0
 8005b86:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d003      	beq.n	8005b98 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b94:	2200      	movs	r2, #0
 8005b96:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7fd fca3 	bl	80034e4 <HAL_DMA_GetError>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d01b      	beq.n	8005bdc <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bb2:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bce:	f043 0210 	orr.w	r2, r3, #16
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f7fe fcce 	bl	8004578 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005bdc:	bf00      	nop
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bec:	2300      	movs	r3, #0
 8005bee:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bfc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005bfe:	4b4b      	ldr	r3, [pc, #300]	@ (8005d2c <I2C_DMAAbort+0x148>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	08db      	lsrs	r3, r3, #3
 8005c04:	4a4a      	ldr	r2, [pc, #296]	@ (8005d30 <I2C_DMAAbort+0x14c>)
 8005c06:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0a:	0a1a      	lsrs	r2, r3, #8
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	00da      	lsls	r2, r3, #3
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d106      	bne.n	8005c2c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c22:	f043 0220 	orr.w	r2, r3, #32
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005c2a:	e00a      	b.n	8005c42 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c40:	d0ea      	beq.n	8005c18 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c4e:	2200      	movs	r2, #0
 8005c50:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d003      	beq.n	8005c62 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c5e:	2200      	movs	r2, #0
 8005c60:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c70:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2200      	movs	r2, #0
 8005c76:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c84:	2200      	movs	r2, #0
 8005c86:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c94:	2200      	movs	r2, #0
 8005c96:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0201 	bic.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b60      	cmp	r3, #96	@ 0x60
 8005cb2:	d10e      	bne.n	8005cd2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005cca:	6978      	ldr	r0, [r7, #20]
 8005ccc:	f7fe fc5e 	bl	800458c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005cd0:	e027      	b.n	8005d22 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005cd2:	7cfb      	ldrb	r3, [r7, #19]
 8005cd4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005cd8:	2b28      	cmp	r3, #40	@ 0x28
 8005cda:	d117      	bne.n	8005d0c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 0201 	orr.w	r2, r2, #1
 8005cea:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005cfa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	2228      	movs	r2, #40	@ 0x28
 8005d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005d0a:	e007      	b.n	8005d1c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	2220      	movs	r2, #32
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005d1c:	6978      	ldr	r0, [r7, #20]
 8005d1e:	f7fe fc2b 	bl	8004578 <HAL_I2C_ErrorCallback>
}
 8005d22:	bf00      	nop
 8005d24:	3718      	adds	r7, #24
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	2000002c 	.word	0x2000002c
 8005d30:	14f8b589 	.word	0x14f8b589

08005d34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	603b      	str	r3, [r7, #0]
 8005d40:	4613      	mov	r3, r2
 8005d42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d44:	e048      	b.n	8005dd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4c:	d044      	beq.n	8005dd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d4e:	f7fc fa4b 	bl	80021e8 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d302      	bcc.n	8005d64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d139      	bne.n	8005dd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	0c1b      	lsrs	r3, r3, #16
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d10d      	bne.n	8005d8a <I2C_WaitOnFlagUntilTimeout+0x56>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	43da      	mvns	r2, r3
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	bf0c      	ite	eq
 8005d80:	2301      	moveq	r3, #1
 8005d82:	2300      	movne	r3, #0
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	461a      	mov	r2, r3
 8005d88:	e00c      	b.n	8005da4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	43da      	mvns	r2, r3
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	4013      	ands	r3, r2
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	bf0c      	ite	eq
 8005d9c:	2301      	moveq	r3, #1
 8005d9e:	2300      	movne	r3, #0
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	461a      	mov	r2, r3
 8005da4:	79fb      	ldrb	r3, [r7, #7]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d116      	bne.n	8005dd8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2220      	movs	r2, #32
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dc4:	f043 0220 	orr.w	r2, r3, #32
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e023      	b.n	8005e20 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	0c1b      	lsrs	r3, r3, #16
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d10d      	bne.n	8005dfe <I2C_WaitOnFlagUntilTimeout+0xca>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	43da      	mvns	r2, r3
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	4013      	ands	r3, r2
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	bf0c      	ite	eq
 8005df4:	2301      	moveq	r3, #1
 8005df6:	2300      	movne	r3, #0
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	e00c      	b.n	8005e18 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	43da      	mvns	r2, r3
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	4013      	ands	r3, r2
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	bf0c      	ite	eq
 8005e10:	2301      	moveq	r3, #1
 8005e12:	2300      	movne	r3, #0
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	461a      	mov	r2, r3
 8005e18:	79fb      	ldrb	r3, [r7, #7]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d093      	beq.n	8005d46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e36:	e071      	b.n	8005f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	695b      	ldr	r3, [r3, #20]
 8005e3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e46:	d123      	bne.n	8005e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e56:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005e60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e7c:	f043 0204 	orr.w	r2, r3, #4
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e067      	b.n	8005f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e96:	d041      	beq.n	8005f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e98:	f7fc f9a6 	bl	80021e8 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d302      	bcc.n	8005eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d136      	bne.n	8005f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	0c1b      	lsrs	r3, r3, #16
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d10c      	bne.n	8005ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	43da      	mvns	r2, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	bf14      	ite	ne
 8005eca:	2301      	movne	r3, #1
 8005ecc:	2300      	moveq	r3, #0
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	e00b      	b.n	8005eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	43da      	mvns	r2, r3
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	4013      	ands	r3, r2
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	bf14      	ite	ne
 8005ee4:	2301      	movne	r3, #1
 8005ee6:	2300      	moveq	r3, #0
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d016      	beq.n	8005f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f08:	f043 0220 	orr.w	r2, r3, #32
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e021      	b.n	8005f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	0c1b      	lsrs	r3, r3, #16
 8005f20:	b2db      	uxtb	r3, r3
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d10c      	bne.n	8005f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	695b      	ldr	r3, [r3, #20]
 8005f2c:	43da      	mvns	r2, r3
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	4013      	ands	r3, r2
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	bf14      	ite	ne
 8005f38:	2301      	movne	r3, #1
 8005f3a:	2300      	moveq	r3, #0
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	e00b      	b.n	8005f58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	43da      	mvns	r2, r3
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	bf14      	ite	ne
 8005f52:	2301      	movne	r3, #1
 8005f54:	2300      	moveq	r3, #0
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f47f af6d 	bne.w	8005e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3710      	adds	r7, #16
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f74:	e034      	b.n	8005fe0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 f8b8 	bl	80060ec <I2C_IsAcknowledgeFailed>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e034      	b.n	8005ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8c:	d028      	beq.n	8005fe0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f8e:	f7fc f92b 	bl	80021e8 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	68ba      	ldr	r2, [r7, #8]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d302      	bcc.n	8005fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d11d      	bne.n	8005fe0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fae:	2b80      	cmp	r3, #128	@ 0x80
 8005fb0:	d016      	beq.n	8005fe0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fcc:	f043 0220 	orr.w	r2, r3, #32
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e007      	b.n	8005ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fea:	2b80      	cmp	r3, #128	@ 0x80
 8005fec:	d1c3      	bne.n	8005f76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006004:	e034      	b.n	8006070 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f000 f870 	bl	80060ec <I2C_IsAcknowledgeFailed>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e034      	b.n	8006080 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601c:	d028      	beq.n	8006070 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800601e:	f7fc f8e3 	bl	80021e8 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	429a      	cmp	r2, r3
 800602c:	d302      	bcc.n	8006034 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d11d      	bne.n	8006070 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	f003 0304 	and.w	r3, r3, #4
 800603e:	2b04      	cmp	r3, #4
 8006040:	d016      	beq.n	8006070 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2220      	movs	r2, #32
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605c:	f043 0220 	orr.w	r2, r3, #32
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e007      	b.n	8006080 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	f003 0304 	and.w	r3, r3, #4
 800607a:	2b04      	cmp	r3, #4
 800607c:	d1c3      	bne.n	8006006 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006094:	4b13      	ldr	r3, [pc, #76]	@ (80060e4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	08db      	lsrs	r3, r3, #3
 800609a:	4a13      	ldr	r2, [pc, #76]	@ (80060e8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800609c:	fba2 2303 	umull	r2, r3, r2, r3
 80060a0:	0a1a      	lsrs	r2, r3, #8
 80060a2:	4613      	mov	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d107      	bne.n	80060c6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ba:	f043 0220 	orr.w	r2, r3, #32
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e008      	b.n	80060d8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060d4:	d0e9      	beq.n	80060aa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3714      	adds	r7, #20
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	2000002c 	.word	0x2000002c
 80060e8:	14f8b589 	.word	0x14f8b589

080060ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006102:	d11b      	bne.n	800613c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800610c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2220      	movs	r2, #32
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006128:	f043 0204 	orr.w	r2, r3, #4
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e000      	b.n	800613e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006156:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800615a:	d103      	bne.n	8006164 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006162:	e007      	b.n	8006174 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006168:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800616c:	d102      	bne.n	8006174 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2208      	movs	r2, #8
 8006172:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e267      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0301 	and.w	r3, r3, #1
 800619a:	2b00      	cmp	r3, #0
 800619c:	d075      	beq.n	800628a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800619e:	4b88      	ldr	r3, [pc, #544]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f003 030c 	and.w	r3, r3, #12
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d00c      	beq.n	80061c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061aa:	4b85      	ldr	r3, [pc, #532]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80061b2:	2b08      	cmp	r3, #8
 80061b4:	d112      	bne.n	80061dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061b6:	4b82      	ldr	r3, [pc, #520]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061c2:	d10b      	bne.n	80061dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061c4:	4b7e      	ldr	r3, [pc, #504]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d05b      	beq.n	8006288 <HAL_RCC_OscConfig+0x108>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d157      	bne.n	8006288 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e242      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061e4:	d106      	bne.n	80061f4 <HAL_RCC_OscConfig+0x74>
 80061e6:	4b76      	ldr	r3, [pc, #472]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a75      	ldr	r2, [pc, #468]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 80061ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061f0:	6013      	str	r3, [r2, #0]
 80061f2:	e01d      	b.n	8006230 <HAL_RCC_OscConfig+0xb0>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061fc:	d10c      	bne.n	8006218 <HAL_RCC_OscConfig+0x98>
 80061fe:	4b70      	ldr	r3, [pc, #448]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a6f      	ldr	r2, [pc, #444]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 8006204:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	4b6d      	ldr	r3, [pc, #436]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a6c      	ldr	r2, [pc, #432]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 8006210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006214:	6013      	str	r3, [r2, #0]
 8006216:	e00b      	b.n	8006230 <HAL_RCC_OscConfig+0xb0>
 8006218:	4b69      	ldr	r3, [pc, #420]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a68      	ldr	r2, [pc, #416]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 800621e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006222:	6013      	str	r3, [r2, #0]
 8006224:	4b66      	ldr	r3, [pc, #408]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a65      	ldr	r2, [pc, #404]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 800622a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800622e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d013      	beq.n	8006260 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006238:	f7fb ffd6 	bl	80021e8 <HAL_GetTick>
 800623c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800623e:	e008      	b.n	8006252 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006240:	f7fb ffd2 	bl	80021e8 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b64      	cmp	r3, #100	@ 0x64
 800624c:	d901      	bls.n	8006252 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e207      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006252:	4b5b      	ldr	r3, [pc, #364]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0f0      	beq.n	8006240 <HAL_RCC_OscConfig+0xc0>
 800625e:	e014      	b.n	800628a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006260:	f7fb ffc2 	bl	80021e8 <HAL_GetTick>
 8006264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006266:	e008      	b.n	800627a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006268:	f7fb ffbe 	bl	80021e8 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b64      	cmp	r3, #100	@ 0x64
 8006274:	d901      	bls.n	800627a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e1f3      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800627a:	4b51      	ldr	r3, [pc, #324]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1f0      	bne.n	8006268 <HAL_RCC_OscConfig+0xe8>
 8006286:	e000      	b.n	800628a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d063      	beq.n	800635e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006296:	4b4a      	ldr	r3, [pc, #296]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 030c 	and.w	r3, r3, #12
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00b      	beq.n	80062ba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062a2:	4b47      	ldr	r3, [pc, #284]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80062aa:	2b08      	cmp	r3, #8
 80062ac:	d11c      	bne.n	80062e8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062ae:	4b44      	ldr	r3, [pc, #272]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d116      	bne.n	80062e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ba:	4b41      	ldr	r3, [pc, #260]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d005      	beq.n	80062d2 <HAL_RCC_OscConfig+0x152>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d001      	beq.n	80062d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e1c7      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062d2:	4b3b      	ldr	r3, [pc, #236]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	00db      	lsls	r3, r3, #3
 80062e0:	4937      	ldr	r1, [pc, #220]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062e6:	e03a      	b.n	800635e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d020      	beq.n	8006332 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062f0:	4b34      	ldr	r3, [pc, #208]	@ (80063c4 <HAL_RCC_OscConfig+0x244>)
 80062f2:	2201      	movs	r2, #1
 80062f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062f6:	f7fb ff77 	bl	80021e8 <HAL_GetTick>
 80062fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062fc:	e008      	b.n	8006310 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062fe:	f7fb ff73 	bl	80021e8 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	2b02      	cmp	r3, #2
 800630a:	d901      	bls.n	8006310 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e1a8      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006310:	4b2b      	ldr	r3, [pc, #172]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0302 	and.w	r3, r3, #2
 8006318:	2b00      	cmp	r3, #0
 800631a:	d0f0      	beq.n	80062fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800631c:	4b28      	ldr	r3, [pc, #160]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	00db      	lsls	r3, r3, #3
 800632a:	4925      	ldr	r1, [pc, #148]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 800632c:	4313      	orrs	r3, r2
 800632e:	600b      	str	r3, [r1, #0]
 8006330:	e015      	b.n	800635e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006332:	4b24      	ldr	r3, [pc, #144]	@ (80063c4 <HAL_RCC_OscConfig+0x244>)
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006338:	f7fb ff56 	bl	80021e8 <HAL_GetTick>
 800633c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800633e:	e008      	b.n	8006352 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006340:	f7fb ff52 	bl	80021e8 <HAL_GetTick>
 8006344:	4602      	mov	r2, r0
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	1ad3      	subs	r3, r2, r3
 800634a:	2b02      	cmp	r3, #2
 800634c:	d901      	bls.n	8006352 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e187      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006352:	4b1b      	ldr	r3, [pc, #108]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1f0      	bne.n	8006340 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0308 	and.w	r3, r3, #8
 8006366:	2b00      	cmp	r3, #0
 8006368:	d036      	beq.n	80063d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d016      	beq.n	80063a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006372:	4b15      	ldr	r3, [pc, #84]	@ (80063c8 <HAL_RCC_OscConfig+0x248>)
 8006374:	2201      	movs	r2, #1
 8006376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006378:	f7fb ff36 	bl	80021e8 <HAL_GetTick>
 800637c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800637e:	e008      	b.n	8006392 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006380:	f7fb ff32 	bl	80021e8 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d901      	bls.n	8006392 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800638e:	2303      	movs	r3, #3
 8006390:	e167      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006392:	4b0b      	ldr	r3, [pc, #44]	@ (80063c0 <HAL_RCC_OscConfig+0x240>)
 8006394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0f0      	beq.n	8006380 <HAL_RCC_OscConfig+0x200>
 800639e:	e01b      	b.n	80063d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063a0:	4b09      	ldr	r3, [pc, #36]	@ (80063c8 <HAL_RCC_OscConfig+0x248>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063a6:	f7fb ff1f 	bl	80021e8 <HAL_GetTick>
 80063aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063ac:	e00e      	b.n	80063cc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063ae:	f7fb ff1b 	bl	80021e8 <HAL_GetTick>
 80063b2:	4602      	mov	r2, r0
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d907      	bls.n	80063cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e150      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
 80063c0:	40023800 	.word	0x40023800
 80063c4:	42470000 	.word	0x42470000
 80063c8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063cc:	4b88      	ldr	r3, [pc, #544]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 80063ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063d0:	f003 0302 	and.w	r3, r3, #2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1ea      	bne.n	80063ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 0304 	and.w	r3, r3, #4
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 8097 	beq.w	8006514 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063e6:	2300      	movs	r3, #0
 80063e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063ea:	4b81      	ldr	r3, [pc, #516]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 80063ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10f      	bne.n	8006416 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063f6:	2300      	movs	r3, #0
 80063f8:	60bb      	str	r3, [r7, #8]
 80063fa:	4b7d      	ldr	r3, [pc, #500]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 80063fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fe:	4a7c      	ldr	r2, [pc, #496]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 8006400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006404:	6413      	str	r3, [r2, #64]	@ 0x40
 8006406:	4b7a      	ldr	r3, [pc, #488]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 8006408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800640a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800640e:	60bb      	str	r3, [r7, #8]
 8006410:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006412:	2301      	movs	r3, #1
 8006414:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006416:	4b77      	ldr	r3, [pc, #476]	@ (80065f4 <HAL_RCC_OscConfig+0x474>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800641e:	2b00      	cmp	r3, #0
 8006420:	d118      	bne.n	8006454 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006422:	4b74      	ldr	r3, [pc, #464]	@ (80065f4 <HAL_RCC_OscConfig+0x474>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a73      	ldr	r2, [pc, #460]	@ (80065f4 <HAL_RCC_OscConfig+0x474>)
 8006428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800642c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800642e:	f7fb fedb 	bl	80021e8 <HAL_GetTick>
 8006432:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006434:	e008      	b.n	8006448 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006436:	f7fb fed7 	bl	80021e8 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b02      	cmp	r3, #2
 8006442:	d901      	bls.n	8006448 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	e10c      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006448:	4b6a      	ldr	r3, [pc, #424]	@ (80065f4 <HAL_RCC_OscConfig+0x474>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006450:	2b00      	cmp	r3, #0
 8006452:	d0f0      	beq.n	8006436 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d106      	bne.n	800646a <HAL_RCC_OscConfig+0x2ea>
 800645c:	4b64      	ldr	r3, [pc, #400]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 800645e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006460:	4a63      	ldr	r2, [pc, #396]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 8006462:	f043 0301 	orr.w	r3, r3, #1
 8006466:	6713      	str	r3, [r2, #112]	@ 0x70
 8006468:	e01c      	b.n	80064a4 <HAL_RCC_OscConfig+0x324>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	2b05      	cmp	r3, #5
 8006470:	d10c      	bne.n	800648c <HAL_RCC_OscConfig+0x30c>
 8006472:	4b5f      	ldr	r3, [pc, #380]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 8006474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006476:	4a5e      	ldr	r2, [pc, #376]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 8006478:	f043 0304 	orr.w	r3, r3, #4
 800647c:	6713      	str	r3, [r2, #112]	@ 0x70
 800647e:	4b5c      	ldr	r3, [pc, #368]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 8006480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006482:	4a5b      	ldr	r2, [pc, #364]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 8006484:	f043 0301 	orr.w	r3, r3, #1
 8006488:	6713      	str	r3, [r2, #112]	@ 0x70
 800648a:	e00b      	b.n	80064a4 <HAL_RCC_OscConfig+0x324>
 800648c:	4b58      	ldr	r3, [pc, #352]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 800648e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006490:	4a57      	ldr	r2, [pc, #348]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 8006492:	f023 0301 	bic.w	r3, r3, #1
 8006496:	6713      	str	r3, [r2, #112]	@ 0x70
 8006498:	4b55      	ldr	r3, [pc, #340]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 800649a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800649c:	4a54      	ldr	r2, [pc, #336]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 800649e:	f023 0304 	bic.w	r3, r3, #4
 80064a2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d015      	beq.n	80064d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ac:	f7fb fe9c 	bl	80021e8 <HAL_GetTick>
 80064b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064b2:	e00a      	b.n	80064ca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064b4:	f7fb fe98 	bl	80021e8 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e0cb      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064ca:	4b49      	ldr	r3, [pc, #292]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 80064cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d0ee      	beq.n	80064b4 <HAL_RCC_OscConfig+0x334>
 80064d6:	e014      	b.n	8006502 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064d8:	f7fb fe86 	bl	80021e8 <HAL_GetTick>
 80064dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064de:	e00a      	b.n	80064f6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064e0:	f7fb fe82 	bl	80021e8 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d901      	bls.n	80064f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e0b5      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064f6:	4b3e      	ldr	r3, [pc, #248]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 80064f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064fa:	f003 0302 	and.w	r3, r3, #2
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1ee      	bne.n	80064e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006502:	7dfb      	ldrb	r3, [r7, #23]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d105      	bne.n	8006514 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006508:	4b39      	ldr	r3, [pc, #228]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 800650a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800650c:	4a38      	ldr	r2, [pc, #224]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 800650e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006512:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 80a1 	beq.w	8006660 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800651e:	4b34      	ldr	r3, [pc, #208]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f003 030c 	and.w	r3, r3, #12
 8006526:	2b08      	cmp	r3, #8
 8006528:	d05c      	beq.n	80065e4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	2b02      	cmp	r3, #2
 8006530:	d141      	bne.n	80065b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006532:	4b31      	ldr	r3, [pc, #196]	@ (80065f8 <HAL_RCC_OscConfig+0x478>)
 8006534:	2200      	movs	r2, #0
 8006536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006538:	f7fb fe56 	bl	80021e8 <HAL_GetTick>
 800653c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800653e:	e008      	b.n	8006552 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006540:	f7fb fe52 	bl	80021e8 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b02      	cmp	r3, #2
 800654c:	d901      	bls.n	8006552 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e087      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006552:	4b27      	ldr	r3, [pc, #156]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1f0      	bne.n	8006540 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	69da      	ldr	r2, [r3, #28]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	431a      	orrs	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656c:	019b      	lsls	r3, r3, #6
 800656e:	431a      	orrs	r2, r3
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006574:	085b      	lsrs	r3, r3, #1
 8006576:	3b01      	subs	r3, #1
 8006578:	041b      	lsls	r3, r3, #16
 800657a:	431a      	orrs	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006580:	061b      	lsls	r3, r3, #24
 8006582:	491b      	ldr	r1, [pc, #108]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 8006584:	4313      	orrs	r3, r2
 8006586:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006588:	4b1b      	ldr	r3, [pc, #108]	@ (80065f8 <HAL_RCC_OscConfig+0x478>)
 800658a:	2201      	movs	r2, #1
 800658c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800658e:	f7fb fe2b 	bl	80021e8 <HAL_GetTick>
 8006592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006594:	e008      	b.n	80065a8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006596:	f7fb fe27 	bl	80021e8 <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	1ad3      	subs	r3, r2, r3
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d901      	bls.n	80065a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e05c      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065a8:	4b11      	ldr	r3, [pc, #68]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0f0      	beq.n	8006596 <HAL_RCC_OscConfig+0x416>
 80065b4:	e054      	b.n	8006660 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065b6:	4b10      	ldr	r3, [pc, #64]	@ (80065f8 <HAL_RCC_OscConfig+0x478>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065bc:	f7fb fe14 	bl	80021e8 <HAL_GetTick>
 80065c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065c2:	e008      	b.n	80065d6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065c4:	f7fb fe10 	bl	80021e8 <HAL_GetTick>
 80065c8:	4602      	mov	r2, r0
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	1ad3      	subs	r3, r2, r3
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d901      	bls.n	80065d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e045      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065d6:	4b06      	ldr	r3, [pc, #24]	@ (80065f0 <HAL_RCC_OscConfig+0x470>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1f0      	bne.n	80065c4 <HAL_RCC_OscConfig+0x444>
 80065e2:	e03d      	b.n	8006660 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d107      	bne.n	80065fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e038      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
 80065f0:	40023800 	.word	0x40023800
 80065f4:	40007000 	.word	0x40007000
 80065f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065fc:	4b1b      	ldr	r3, [pc, #108]	@ (800666c <HAL_RCC_OscConfig+0x4ec>)
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d028      	beq.n	800665c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006614:	429a      	cmp	r2, r3
 8006616:	d121      	bne.n	800665c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006622:	429a      	cmp	r2, r3
 8006624:	d11a      	bne.n	800665c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800662c:	4013      	ands	r3, r2
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006632:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006634:	4293      	cmp	r3, r2
 8006636:	d111      	bne.n	800665c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006642:	085b      	lsrs	r3, r3, #1
 8006644:	3b01      	subs	r3, #1
 8006646:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006648:	429a      	cmp	r2, r3
 800664a:	d107      	bne.n	800665c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006656:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006658:	429a      	cmp	r2, r3
 800665a:	d001      	beq.n	8006660 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e000      	b.n	8006662 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3718      	adds	r7, #24
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	40023800 	.word	0x40023800

08006670 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d101      	bne.n	8006684 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e0cc      	b.n	800681e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006684:	4b68      	ldr	r3, [pc, #416]	@ (8006828 <HAL_RCC_ClockConfig+0x1b8>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0307 	and.w	r3, r3, #7
 800668c:	683a      	ldr	r2, [r7, #0]
 800668e:	429a      	cmp	r2, r3
 8006690:	d90c      	bls.n	80066ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006692:	4b65      	ldr	r3, [pc, #404]	@ (8006828 <HAL_RCC_ClockConfig+0x1b8>)
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	b2d2      	uxtb	r2, r2
 8006698:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800669a:	4b63      	ldr	r3, [pc, #396]	@ (8006828 <HAL_RCC_ClockConfig+0x1b8>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0307 	and.w	r3, r3, #7
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d001      	beq.n	80066ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e0b8      	b.n	800681e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0302 	and.w	r3, r3, #2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d020      	beq.n	80066fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d005      	beq.n	80066d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066c4:	4b59      	ldr	r3, [pc, #356]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	4a58      	ldr	r2, [pc, #352]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80066ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80066ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0308 	and.w	r3, r3, #8
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d005      	beq.n	80066e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066dc:	4b53      	ldr	r3, [pc, #332]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	4a52      	ldr	r2, [pc, #328]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80066e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80066e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066e8:	4b50      	ldr	r3, [pc, #320]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	494d      	ldr	r1, [pc, #308]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	2b00      	cmp	r3, #0
 8006704:	d044      	beq.n	8006790 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d107      	bne.n	800671e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800670e:	4b47      	ldr	r3, [pc, #284]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d119      	bne.n	800674e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	e07f      	b.n	800681e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	2b02      	cmp	r3, #2
 8006724:	d003      	beq.n	800672e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800672a:	2b03      	cmp	r3, #3
 800672c:	d107      	bne.n	800673e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800672e:	4b3f      	ldr	r3, [pc, #252]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d109      	bne.n	800674e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e06f      	b.n	800681e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800673e:	4b3b      	ldr	r3, [pc, #236]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e067      	b.n	800681e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800674e:	4b37      	ldr	r3, [pc, #220]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	f023 0203 	bic.w	r2, r3, #3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	4934      	ldr	r1, [pc, #208]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 800675c:	4313      	orrs	r3, r2
 800675e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006760:	f7fb fd42 	bl	80021e8 <HAL_GetTick>
 8006764:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006766:	e00a      	b.n	800677e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006768:	f7fb fd3e 	bl	80021e8 <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006776:	4293      	cmp	r3, r2
 8006778:	d901      	bls.n	800677e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e04f      	b.n	800681e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800677e:	4b2b      	ldr	r3, [pc, #172]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f003 020c 	and.w	r2, r3, #12
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	429a      	cmp	r2, r3
 800678e:	d1eb      	bne.n	8006768 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006790:	4b25      	ldr	r3, [pc, #148]	@ (8006828 <HAL_RCC_ClockConfig+0x1b8>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0307 	and.w	r3, r3, #7
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	429a      	cmp	r2, r3
 800679c:	d20c      	bcs.n	80067b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800679e:	4b22      	ldr	r3, [pc, #136]	@ (8006828 <HAL_RCC_ClockConfig+0x1b8>)
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	b2d2      	uxtb	r2, r2
 80067a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067a6:	4b20      	ldr	r3, [pc, #128]	@ (8006828 <HAL_RCC_ClockConfig+0x1b8>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0307 	and.w	r3, r3, #7
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d001      	beq.n	80067b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e032      	b.n	800681e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0304 	and.w	r3, r3, #4
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d008      	beq.n	80067d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067c4:	4b19      	ldr	r3, [pc, #100]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	4916      	ldr	r1, [pc, #88]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0308 	and.w	r3, r3, #8
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d009      	beq.n	80067f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067e2:	4b12      	ldr	r3, [pc, #72]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	00db      	lsls	r3, r3, #3
 80067f0:	490e      	ldr	r1, [pc, #56]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80067f6:	f000 f821 	bl	800683c <HAL_RCC_GetSysClockFreq>
 80067fa:	4602      	mov	r2, r0
 80067fc:	4b0b      	ldr	r3, [pc, #44]	@ (800682c <HAL_RCC_ClockConfig+0x1bc>)
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	091b      	lsrs	r3, r3, #4
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	490a      	ldr	r1, [pc, #40]	@ (8006830 <HAL_RCC_ClockConfig+0x1c0>)
 8006808:	5ccb      	ldrb	r3, [r1, r3]
 800680a:	fa22 f303 	lsr.w	r3, r2, r3
 800680e:	4a09      	ldr	r2, [pc, #36]	@ (8006834 <HAL_RCC_ClockConfig+0x1c4>)
 8006810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006812:	4b09      	ldr	r3, [pc, #36]	@ (8006838 <HAL_RCC_ClockConfig+0x1c8>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4618      	mov	r0, r3
 8006818:	f7fb fca2 	bl	8002160 <HAL_InitTick>

  return HAL_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}
 8006826:	bf00      	nop
 8006828:	40023c00 	.word	0x40023c00
 800682c:	40023800 	.word	0x40023800
 8006830:	0800b104 	.word	0x0800b104
 8006834:	2000002c 	.word	0x2000002c
 8006838:	20000030 	.word	0x20000030

0800683c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800683c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006840:	b094      	sub	sp, #80	@ 0x50
 8006842:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006844:	2300      	movs	r3, #0
 8006846:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006848:	2300      	movs	r3, #0
 800684a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800684c:	2300      	movs	r3, #0
 800684e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006850:	2300      	movs	r3, #0
 8006852:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006854:	4b79      	ldr	r3, [pc, #484]	@ (8006a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f003 030c 	and.w	r3, r3, #12
 800685c:	2b08      	cmp	r3, #8
 800685e:	d00d      	beq.n	800687c <HAL_RCC_GetSysClockFreq+0x40>
 8006860:	2b08      	cmp	r3, #8
 8006862:	f200 80e1 	bhi.w	8006a28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <HAL_RCC_GetSysClockFreq+0x34>
 800686a:	2b04      	cmp	r3, #4
 800686c:	d003      	beq.n	8006876 <HAL_RCC_GetSysClockFreq+0x3a>
 800686e:	e0db      	b.n	8006a28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006870:	4b73      	ldr	r3, [pc, #460]	@ (8006a40 <HAL_RCC_GetSysClockFreq+0x204>)
 8006872:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006874:	e0db      	b.n	8006a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006876:	4b73      	ldr	r3, [pc, #460]	@ (8006a44 <HAL_RCC_GetSysClockFreq+0x208>)
 8006878:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800687a:	e0d8      	b.n	8006a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800687c:	4b6f      	ldr	r3, [pc, #444]	@ (8006a3c <HAL_RCC_GetSysClockFreq+0x200>)
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006884:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006886:	4b6d      	ldr	r3, [pc, #436]	@ (8006a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d063      	beq.n	800695a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006892:	4b6a      	ldr	r3, [pc, #424]	@ (8006a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	099b      	lsrs	r3, r3, #6
 8006898:	2200      	movs	r2, #0
 800689a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800689c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800689e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80068a6:	2300      	movs	r3, #0
 80068a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80068aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80068ae:	4622      	mov	r2, r4
 80068b0:	462b      	mov	r3, r5
 80068b2:	f04f 0000 	mov.w	r0, #0
 80068b6:	f04f 0100 	mov.w	r1, #0
 80068ba:	0159      	lsls	r1, r3, #5
 80068bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068c0:	0150      	lsls	r0, r2, #5
 80068c2:	4602      	mov	r2, r0
 80068c4:	460b      	mov	r3, r1
 80068c6:	4621      	mov	r1, r4
 80068c8:	1a51      	subs	r1, r2, r1
 80068ca:	6139      	str	r1, [r7, #16]
 80068cc:	4629      	mov	r1, r5
 80068ce:	eb63 0301 	sbc.w	r3, r3, r1
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	f04f 0200 	mov.w	r2, #0
 80068d8:	f04f 0300 	mov.w	r3, #0
 80068dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068e0:	4659      	mov	r1, fp
 80068e2:	018b      	lsls	r3, r1, #6
 80068e4:	4651      	mov	r1, sl
 80068e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80068ea:	4651      	mov	r1, sl
 80068ec:	018a      	lsls	r2, r1, #6
 80068ee:	4651      	mov	r1, sl
 80068f0:	ebb2 0801 	subs.w	r8, r2, r1
 80068f4:	4659      	mov	r1, fp
 80068f6:	eb63 0901 	sbc.w	r9, r3, r1
 80068fa:	f04f 0200 	mov.w	r2, #0
 80068fe:	f04f 0300 	mov.w	r3, #0
 8006902:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006906:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800690a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800690e:	4690      	mov	r8, r2
 8006910:	4699      	mov	r9, r3
 8006912:	4623      	mov	r3, r4
 8006914:	eb18 0303 	adds.w	r3, r8, r3
 8006918:	60bb      	str	r3, [r7, #8]
 800691a:	462b      	mov	r3, r5
 800691c:	eb49 0303 	adc.w	r3, r9, r3
 8006920:	60fb      	str	r3, [r7, #12]
 8006922:	f04f 0200 	mov.w	r2, #0
 8006926:	f04f 0300 	mov.w	r3, #0
 800692a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800692e:	4629      	mov	r1, r5
 8006930:	024b      	lsls	r3, r1, #9
 8006932:	4621      	mov	r1, r4
 8006934:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006938:	4621      	mov	r1, r4
 800693a:	024a      	lsls	r2, r1, #9
 800693c:	4610      	mov	r0, r2
 800693e:	4619      	mov	r1, r3
 8006940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006942:	2200      	movs	r2, #0
 8006944:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006946:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006948:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800694c:	f7fa f9a4 	bl	8000c98 <__aeabi_uldivmod>
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	4613      	mov	r3, r2
 8006956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006958:	e058      	b.n	8006a0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800695a:	4b38      	ldr	r3, [pc, #224]	@ (8006a3c <HAL_RCC_GetSysClockFreq+0x200>)
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	099b      	lsrs	r3, r3, #6
 8006960:	2200      	movs	r2, #0
 8006962:	4618      	mov	r0, r3
 8006964:	4611      	mov	r1, r2
 8006966:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800696a:	623b      	str	r3, [r7, #32]
 800696c:	2300      	movs	r3, #0
 800696e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006970:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006974:	4642      	mov	r2, r8
 8006976:	464b      	mov	r3, r9
 8006978:	f04f 0000 	mov.w	r0, #0
 800697c:	f04f 0100 	mov.w	r1, #0
 8006980:	0159      	lsls	r1, r3, #5
 8006982:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006986:	0150      	lsls	r0, r2, #5
 8006988:	4602      	mov	r2, r0
 800698a:	460b      	mov	r3, r1
 800698c:	4641      	mov	r1, r8
 800698e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006992:	4649      	mov	r1, r9
 8006994:	eb63 0b01 	sbc.w	fp, r3, r1
 8006998:	f04f 0200 	mov.w	r2, #0
 800699c:	f04f 0300 	mov.w	r3, #0
 80069a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80069a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80069a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80069ac:	ebb2 040a 	subs.w	r4, r2, sl
 80069b0:	eb63 050b 	sbc.w	r5, r3, fp
 80069b4:	f04f 0200 	mov.w	r2, #0
 80069b8:	f04f 0300 	mov.w	r3, #0
 80069bc:	00eb      	lsls	r3, r5, #3
 80069be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069c2:	00e2      	lsls	r2, r4, #3
 80069c4:	4614      	mov	r4, r2
 80069c6:	461d      	mov	r5, r3
 80069c8:	4643      	mov	r3, r8
 80069ca:	18e3      	adds	r3, r4, r3
 80069cc:	603b      	str	r3, [r7, #0]
 80069ce:	464b      	mov	r3, r9
 80069d0:	eb45 0303 	adc.w	r3, r5, r3
 80069d4:	607b      	str	r3, [r7, #4]
 80069d6:	f04f 0200 	mov.w	r2, #0
 80069da:	f04f 0300 	mov.w	r3, #0
 80069de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80069e2:	4629      	mov	r1, r5
 80069e4:	028b      	lsls	r3, r1, #10
 80069e6:	4621      	mov	r1, r4
 80069e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069ec:	4621      	mov	r1, r4
 80069ee:	028a      	lsls	r2, r1, #10
 80069f0:	4610      	mov	r0, r2
 80069f2:	4619      	mov	r1, r3
 80069f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069f6:	2200      	movs	r2, #0
 80069f8:	61bb      	str	r3, [r7, #24]
 80069fa:	61fa      	str	r2, [r7, #28]
 80069fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a00:	f7fa f94a 	bl	8000c98 <__aeabi_uldivmod>
 8006a04:	4602      	mov	r2, r0
 8006a06:	460b      	mov	r3, r1
 8006a08:	4613      	mov	r3, r2
 8006a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8006a3c <HAL_RCC_GetSysClockFreq+0x200>)
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	0c1b      	lsrs	r3, r3, #16
 8006a12:	f003 0303 	and.w	r3, r3, #3
 8006a16:	3301      	adds	r3, #1
 8006a18:	005b      	lsls	r3, r3, #1
 8006a1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006a1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a26:	e002      	b.n	8006a2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a28:	4b05      	ldr	r3, [pc, #20]	@ (8006a40 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3750      	adds	r7, #80	@ 0x50
 8006a34:	46bd      	mov	sp, r7
 8006a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a3a:	bf00      	nop
 8006a3c:	40023800 	.word	0x40023800
 8006a40:	00f42400 	.word	0x00f42400
 8006a44:	007a1200 	.word	0x007a1200

08006a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a4c:	4b03      	ldr	r3, [pc, #12]	@ (8006a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	2000002c 	.word	0x2000002c

08006a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006a64:	f7ff fff0 	bl	8006a48 <HAL_RCC_GetHCLKFreq>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	4b05      	ldr	r3, [pc, #20]	@ (8006a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	0a9b      	lsrs	r3, r3, #10
 8006a70:	f003 0307 	and.w	r3, r3, #7
 8006a74:	4903      	ldr	r1, [pc, #12]	@ (8006a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a76:	5ccb      	ldrb	r3, [r1, r3]
 8006a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	40023800 	.word	0x40023800
 8006a84:	0800b114 	.word	0x0800b114

08006a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006a8c:	f7ff ffdc 	bl	8006a48 <HAL_RCC_GetHCLKFreq>
 8006a90:	4602      	mov	r2, r0
 8006a92:	4b05      	ldr	r3, [pc, #20]	@ (8006aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	0b5b      	lsrs	r3, r3, #13
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	4903      	ldr	r1, [pc, #12]	@ (8006aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a9e:	5ccb      	ldrb	r3, [r1, r3]
 8006aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40023800 	.word	0x40023800
 8006aac:	0800b114 	.word	0x0800b114

08006ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e041      	b.n	8006b46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d106      	bne.n	8006adc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f7fb f8ec 	bl	8001cb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	3304      	adds	r3, #4
 8006aec:	4619      	mov	r1, r3
 8006aee:	4610      	mov	r0, r2
 8006af0:	f000 fa7a 	bl	8006fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
	...

08006b50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d001      	beq.n	8006b68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e044      	b.n	8006bf2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 0201 	orr.w	r2, r2, #1
 8006b7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a1e      	ldr	r2, [pc, #120]	@ (8006c00 <HAL_TIM_Base_Start_IT+0xb0>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d018      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x6c>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b92:	d013      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x6c>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a1a      	ldr	r2, [pc, #104]	@ (8006c04 <HAL_TIM_Base_Start_IT+0xb4>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d00e      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x6c>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a19      	ldr	r2, [pc, #100]	@ (8006c08 <HAL_TIM_Base_Start_IT+0xb8>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d009      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x6c>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a17      	ldr	r2, [pc, #92]	@ (8006c0c <HAL_TIM_Base_Start_IT+0xbc>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d004      	beq.n	8006bbc <HAL_TIM_Base_Start_IT+0x6c>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a16      	ldr	r2, [pc, #88]	@ (8006c10 <HAL_TIM_Base_Start_IT+0xc0>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d111      	bne.n	8006be0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f003 0307 	and.w	r3, r3, #7
 8006bc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2b06      	cmp	r3, #6
 8006bcc:	d010      	beq.n	8006bf0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f042 0201 	orr.w	r2, r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bde:	e007      	b.n	8006bf0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f042 0201 	orr.w	r2, r2, #1
 8006bee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3714      	adds	r7, #20
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	40010000 	.word	0x40010000
 8006c04:	40000400 	.word	0x40000400
 8006c08:	40000800 	.word	0x40000800
 8006c0c:	40000c00 	.word	0x40000c00
 8006c10:	40014000 	.word	0x40014000

08006c14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d020      	beq.n	8006c78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d01b      	beq.n	8006c78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f06f 0202 	mvn.w	r2, #2
 8006c48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699b      	ldr	r3, [r3, #24]
 8006c56:	f003 0303 	and.w	r3, r3, #3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f9a3 	bl	8006faa <HAL_TIM_IC_CaptureCallback>
 8006c64:	e005      	b.n	8006c72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f995 	bl	8006f96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f9a6 	bl	8006fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	f003 0304 	and.w	r3, r3, #4
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d020      	beq.n	8006cc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d01b      	beq.n	8006cc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f06f 0204 	mvn.w	r2, #4
 8006c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2202      	movs	r2, #2
 8006c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d003      	beq.n	8006cb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f97d 	bl	8006faa <HAL_TIM_IC_CaptureCallback>
 8006cb0:	e005      	b.n	8006cbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f96f 	bl	8006f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f980 	bl	8006fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	f003 0308 	and.w	r3, r3, #8
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d020      	beq.n	8006d10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f003 0308 	and.w	r3, r3, #8
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d01b      	beq.n	8006d10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f06f 0208 	mvn.w	r2, #8
 8006ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2204      	movs	r2, #4
 8006ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	f003 0303 	and.w	r3, r3, #3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d003      	beq.n	8006cfe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f957 	bl	8006faa <HAL_TIM_IC_CaptureCallback>
 8006cfc:	e005      	b.n	8006d0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f949 	bl	8006f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f95a 	bl	8006fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f003 0310 	and.w	r3, r3, #16
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d020      	beq.n	8006d5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f003 0310 	and.w	r3, r3, #16
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d01b      	beq.n	8006d5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f06f 0210 	mvn.w	r2, #16
 8006d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2208      	movs	r2, #8
 8006d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	69db      	ldr	r3, [r3, #28]
 8006d3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d003      	beq.n	8006d4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f931 	bl	8006faa <HAL_TIM_IC_CaptureCallback>
 8006d48:	e005      	b.n	8006d56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f923 	bl	8006f96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f934 	bl	8006fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00c      	beq.n	8006d80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f003 0301 	and.w	r3, r3, #1
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d007      	beq.n	8006d80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f06f 0201 	mvn.w	r2, #1
 8006d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f901 	bl	8006f82 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00c      	beq.n	8006da4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d007      	beq.n	8006da4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fac0 	bl	8007324 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00c      	beq.n	8006dc8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d007      	beq.n	8006dc8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f905 	bl	8006fd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	f003 0320 	and.w	r3, r3, #32
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00c      	beq.n	8006dec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f003 0320 	and.w	r3, r3, #32
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d007      	beq.n	8006dec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f06f 0220 	mvn.w	r2, #32
 8006de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fa92 	bl	8007310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dec:	bf00      	nop
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d101      	bne.n	8006e10 <HAL_TIM_ConfigClockSource+0x1c>
 8006e0c:	2302      	movs	r3, #2
 8006e0e:	e0b4      	b.n	8006f7a <HAL_TIM_ConfigClockSource+0x186>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2202      	movs	r2, #2
 8006e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006e2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e48:	d03e      	beq.n	8006ec8 <HAL_TIM_ConfigClockSource+0xd4>
 8006e4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e4e:	f200 8087 	bhi.w	8006f60 <HAL_TIM_ConfigClockSource+0x16c>
 8006e52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e56:	f000 8086 	beq.w	8006f66 <HAL_TIM_ConfigClockSource+0x172>
 8006e5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e5e:	d87f      	bhi.n	8006f60 <HAL_TIM_ConfigClockSource+0x16c>
 8006e60:	2b70      	cmp	r3, #112	@ 0x70
 8006e62:	d01a      	beq.n	8006e9a <HAL_TIM_ConfigClockSource+0xa6>
 8006e64:	2b70      	cmp	r3, #112	@ 0x70
 8006e66:	d87b      	bhi.n	8006f60 <HAL_TIM_ConfigClockSource+0x16c>
 8006e68:	2b60      	cmp	r3, #96	@ 0x60
 8006e6a:	d050      	beq.n	8006f0e <HAL_TIM_ConfigClockSource+0x11a>
 8006e6c:	2b60      	cmp	r3, #96	@ 0x60
 8006e6e:	d877      	bhi.n	8006f60 <HAL_TIM_ConfigClockSource+0x16c>
 8006e70:	2b50      	cmp	r3, #80	@ 0x50
 8006e72:	d03c      	beq.n	8006eee <HAL_TIM_ConfigClockSource+0xfa>
 8006e74:	2b50      	cmp	r3, #80	@ 0x50
 8006e76:	d873      	bhi.n	8006f60 <HAL_TIM_ConfigClockSource+0x16c>
 8006e78:	2b40      	cmp	r3, #64	@ 0x40
 8006e7a:	d058      	beq.n	8006f2e <HAL_TIM_ConfigClockSource+0x13a>
 8006e7c:	2b40      	cmp	r3, #64	@ 0x40
 8006e7e:	d86f      	bhi.n	8006f60 <HAL_TIM_ConfigClockSource+0x16c>
 8006e80:	2b30      	cmp	r3, #48	@ 0x30
 8006e82:	d064      	beq.n	8006f4e <HAL_TIM_ConfigClockSource+0x15a>
 8006e84:	2b30      	cmp	r3, #48	@ 0x30
 8006e86:	d86b      	bhi.n	8006f60 <HAL_TIM_ConfigClockSource+0x16c>
 8006e88:	2b20      	cmp	r3, #32
 8006e8a:	d060      	beq.n	8006f4e <HAL_TIM_ConfigClockSource+0x15a>
 8006e8c:	2b20      	cmp	r3, #32
 8006e8e:	d867      	bhi.n	8006f60 <HAL_TIM_ConfigClockSource+0x16c>
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d05c      	beq.n	8006f4e <HAL_TIM_ConfigClockSource+0x15a>
 8006e94:	2b10      	cmp	r3, #16
 8006e96:	d05a      	beq.n	8006f4e <HAL_TIM_ConfigClockSource+0x15a>
 8006e98:	e062      	b.n	8006f60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006eaa:	f000 f9a3 	bl	80071f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006ebc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	609a      	str	r2, [r3, #8]
      break;
 8006ec6:	e04f      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ed8:	f000 f98c 	bl	80071f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	689a      	ldr	r2, [r3, #8]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006eea:	609a      	str	r2, [r3, #8]
      break;
 8006eec:	e03c      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006efa:	461a      	mov	r2, r3
 8006efc:	f000 f900 	bl	8007100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2150      	movs	r1, #80	@ 0x50
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 f959 	bl	80071be <TIM_ITRx_SetConfig>
      break;
 8006f0c:	e02c      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f000 f91f 	bl	800715e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2160      	movs	r1, #96	@ 0x60
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 f949 	bl	80071be <TIM_ITRx_SetConfig>
      break;
 8006f2c:	e01c      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	f000 f8e0 	bl	8007100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2140      	movs	r1, #64	@ 0x40
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 f939 	bl	80071be <TIM_ITRx_SetConfig>
      break;
 8006f4c:	e00c      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4619      	mov	r1, r3
 8006f58:	4610      	mov	r0, r2
 8006f5a:	f000 f930 	bl	80071be <TIM_ITRx_SetConfig>
      break;
 8006f5e:	e003      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	73fb      	strb	r3, [r7, #15]
      break;
 8006f64:	e000      	b.n	8006f68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}

08006f82 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f82:	b480      	push	{r7}
 8006f84:	b083      	sub	sp, #12
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006f8a:	bf00      	nop
 8006f8c:	370c      	adds	r7, #12
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b083      	sub	sp, #12
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f9e:	bf00      	nop
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b083      	sub	sp, #12
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006fb2:	bf00      	nop
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr

08006fbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b083      	sub	sp, #12
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fc6:	bf00      	nop
 8006fc8:	370c      	adds	r7, #12
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b083      	sub	sp, #12
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fda:	bf00      	nop
 8006fdc:	370c      	adds	r7, #12
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
	...

08006fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	4a3a      	ldr	r2, [pc, #232]	@ (80070e4 <TIM_Base_SetConfig+0xfc>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00f      	beq.n	8007020 <TIM_Base_SetConfig+0x38>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007006:	d00b      	beq.n	8007020 <TIM_Base_SetConfig+0x38>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a37      	ldr	r2, [pc, #220]	@ (80070e8 <TIM_Base_SetConfig+0x100>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d007      	beq.n	8007020 <TIM_Base_SetConfig+0x38>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a36      	ldr	r2, [pc, #216]	@ (80070ec <TIM_Base_SetConfig+0x104>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d003      	beq.n	8007020 <TIM_Base_SetConfig+0x38>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a35      	ldr	r2, [pc, #212]	@ (80070f0 <TIM_Base_SetConfig+0x108>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d108      	bne.n	8007032 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007026:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	4313      	orrs	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a2b      	ldr	r2, [pc, #172]	@ (80070e4 <TIM_Base_SetConfig+0xfc>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d01b      	beq.n	8007072 <TIM_Base_SetConfig+0x8a>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007040:	d017      	beq.n	8007072 <TIM_Base_SetConfig+0x8a>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a28      	ldr	r2, [pc, #160]	@ (80070e8 <TIM_Base_SetConfig+0x100>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d013      	beq.n	8007072 <TIM_Base_SetConfig+0x8a>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a27      	ldr	r2, [pc, #156]	@ (80070ec <TIM_Base_SetConfig+0x104>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d00f      	beq.n	8007072 <TIM_Base_SetConfig+0x8a>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a26      	ldr	r2, [pc, #152]	@ (80070f0 <TIM_Base_SetConfig+0x108>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d00b      	beq.n	8007072 <TIM_Base_SetConfig+0x8a>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a25      	ldr	r2, [pc, #148]	@ (80070f4 <TIM_Base_SetConfig+0x10c>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d007      	beq.n	8007072 <TIM_Base_SetConfig+0x8a>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a24      	ldr	r2, [pc, #144]	@ (80070f8 <TIM_Base_SetConfig+0x110>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d003      	beq.n	8007072 <TIM_Base_SetConfig+0x8a>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a23      	ldr	r2, [pc, #140]	@ (80070fc <TIM_Base_SetConfig+0x114>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d108      	bne.n	8007084 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	4313      	orrs	r3, r2
 8007082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	4313      	orrs	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a0e      	ldr	r2, [pc, #56]	@ (80070e4 <TIM_Base_SetConfig+0xfc>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d103      	bne.n	80070b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	691a      	ldr	r2, [r3, #16]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	f003 0301 	and.w	r3, r3, #1
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d105      	bne.n	80070d6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	f023 0201 	bic.w	r2, r3, #1
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	611a      	str	r2, [r3, #16]
  }
}
 80070d6:	bf00      	nop
 80070d8:	3714      	adds	r7, #20
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	40010000 	.word	0x40010000
 80070e8:	40000400 	.word	0x40000400
 80070ec:	40000800 	.word	0x40000800
 80070f0:	40000c00 	.word	0x40000c00
 80070f4:	40014000 	.word	0x40014000
 80070f8:	40014400 	.word	0x40014400
 80070fc:	40014800 	.word	0x40014800

08007100 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007100:	b480      	push	{r7}
 8007102:	b087      	sub	sp, #28
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	f023 0201 	bic.w	r2, r3, #1
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	699b      	ldr	r3, [r3, #24]
 8007122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800712a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	011b      	lsls	r3, r3, #4
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	4313      	orrs	r3, r2
 8007134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f023 030a 	bic.w	r3, r3, #10
 800713c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800713e:	697a      	ldr	r2, [r7, #20]
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	4313      	orrs	r3, r2
 8007144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	693a      	ldr	r2, [r7, #16]
 800714a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	621a      	str	r2, [r3, #32]
}
 8007152:	bf00      	nop
 8007154:	371c      	adds	r7, #28
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800715e:	b480      	push	{r7}
 8007160:	b087      	sub	sp, #28
 8007162:	af00      	add	r7, sp, #0
 8007164:	60f8      	str	r0, [r7, #12]
 8007166:	60b9      	str	r1, [r7, #8]
 8007168:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	f023 0210 	bic.w	r2, r3, #16
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007188:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	031b      	lsls	r3, r3, #12
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	4313      	orrs	r3, r2
 8007192:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800719a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	011b      	lsls	r3, r3, #4
 80071a0:	697a      	ldr	r2, [r7, #20]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	621a      	str	r2, [r3, #32]
}
 80071b2:	bf00      	nop
 80071b4:	371c      	adds	r7, #28
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071be:	b480      	push	{r7}
 80071c0:	b085      	sub	sp, #20
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	4313      	orrs	r3, r2
 80071dc:	f043 0307 	orr.w	r3, r3, #7
 80071e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	609a      	str	r2, [r3, #8]
}
 80071e8:	bf00      	nop
 80071ea:	3714      	adds	r7, #20
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
 8007200:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800720e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	021a      	lsls	r2, r3, #8
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	431a      	orrs	r2, r3
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	4313      	orrs	r3, r2
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	4313      	orrs	r3, r2
 8007220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	697a      	ldr	r2, [r7, #20]
 8007226:	609a      	str	r2, [r3, #8]
}
 8007228:	bf00      	nop
 800722a:	371c      	adds	r7, #28
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007244:	2b01      	cmp	r3, #1
 8007246:	d101      	bne.n	800724c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007248:	2302      	movs	r3, #2
 800724a:	e050      	b.n	80072ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2202      	movs	r2, #2
 8007258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007272:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	4313      	orrs	r3, r2
 800727c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a1c      	ldr	r2, [pc, #112]	@ (80072fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d018      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007298:	d013      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a18      	ldr	r2, [pc, #96]	@ (8007300 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d00e      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a16      	ldr	r2, [pc, #88]	@ (8007304 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d009      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a15      	ldr	r2, [pc, #84]	@ (8007308 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d004      	beq.n	80072c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a13      	ldr	r2, [pc, #76]	@ (800730c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d10c      	bne.n	80072dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	40010000 	.word	0x40010000
 8007300:	40000400 	.word	0x40000400
 8007304:	40000800 	.word	0x40000800
 8007308:	40000c00 	.word	0x40000c00
 800730c:	40014000 	.word	0x40014000

08007310 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007346:	2301      	movs	r3, #1
 8007348:	e042      	b.n	80073d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007350:	b2db      	uxtb	r3, r3
 8007352:	2b00      	cmp	r3, #0
 8007354:	d106      	bne.n	8007364 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f7fa fcce 	bl	8001d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2224      	movs	r2, #36	@ 0x24
 8007368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68da      	ldr	r2, [r3, #12]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800737a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fdcb 	bl	8007f18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	691a      	ldr	r2, [r3, #16]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007390:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	695a      	ldr	r2, [r3, #20]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80073a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68da      	ldr	r2, [r3, #12]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80073b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2220      	movs	r2, #32
 80073bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2220      	movs	r2, #32
 80073c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80073ce:	2300      	movs	r3, #0
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08c      	sub	sp, #48	@ 0x30
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	4613      	mov	r3, r2
 80073e4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b20      	cmp	r3, #32
 80073f0:	d156      	bne.n	80074a0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <HAL_UART_Transmit_DMA+0x26>
 80073f8:	88fb      	ldrh	r3, [r7, #6]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e04f      	b.n	80074a2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	88fa      	ldrh	r2, [r7, #6]
 800740c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	88fa      	ldrh	r2, [r7, #6]
 8007412:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2221      	movs	r2, #33	@ 0x21
 800741e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007426:	4a21      	ldr	r2, [pc, #132]	@ (80074ac <HAL_UART_Transmit_DMA+0xd4>)
 8007428:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800742e:	4a20      	ldr	r2, [pc, #128]	@ (80074b0 <HAL_UART_Transmit_DMA+0xd8>)
 8007430:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007436:	4a1f      	ldr	r2, [pc, #124]	@ (80074b4 <HAL_UART_Transmit_DMA+0xdc>)
 8007438:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800743e:	2200      	movs	r2, #0
 8007440:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007442:	f107 0308 	add.w	r3, r7, #8
 8007446:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800744c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800744e:	6819      	ldr	r1, [r3, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	3304      	adds	r3, #4
 8007456:	461a      	mov	r2, r3
 8007458:	88fb      	ldrh	r3, [r7, #6]
 800745a:	f7fb fdc1 	bl	8002fe0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007466:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	3314      	adds	r3, #20
 800746e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	e853 3f00 	ldrex	r3, [r3]
 8007476:	617b      	str	r3, [r7, #20]
   return(result);
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800747e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	3314      	adds	r3, #20
 8007486:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007488:	627a      	str	r2, [r7, #36]	@ 0x24
 800748a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748c:	6a39      	ldr	r1, [r7, #32]
 800748e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007490:	e841 2300 	strex	r3, r2, [r1]
 8007494:	61fb      	str	r3, [r7, #28]
   return(result);
 8007496:	69fb      	ldr	r3, [r7, #28]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1e5      	bne.n	8007468 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800749c:	2300      	movs	r3, #0
 800749e:	e000      	b.n	80074a2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80074a0:	2302      	movs	r3, #2
  }
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3730      	adds	r7, #48	@ 0x30
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	08007a45 	.word	0x08007a45
 80074b0:	08007adf 	.word	0x08007adf
 80074b4:	08007afb 	.word	0x08007afb

080074b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b0ba      	sub	sp, #232	@ 0xe8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80074de:	2300      	movs	r3, #0
 80074e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80074e4:	2300      	movs	r3, #0
 80074e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80074ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074ee:	f003 030f 	and.w	r3, r3, #15
 80074f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80074f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10f      	bne.n	800751e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80074fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007502:	f003 0320 	and.w	r3, r3, #32
 8007506:	2b00      	cmp	r3, #0
 8007508:	d009      	beq.n	800751e <HAL_UART_IRQHandler+0x66>
 800750a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800750e:	f003 0320 	and.w	r3, r3, #32
 8007512:	2b00      	cmp	r3, #0
 8007514:	d003      	beq.n	800751e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fc40 	bl	8007d9c <UART_Receive_IT>
      return;
 800751c:	e25b      	b.n	80079d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800751e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 80de 	beq.w	80076e4 <HAL_UART_IRQHandler+0x22c>
 8007528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b00      	cmp	r3, #0
 8007532:	d106      	bne.n	8007542 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007538:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800753c:	2b00      	cmp	r3, #0
 800753e:	f000 80d1 	beq.w	80076e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007546:	f003 0301 	and.w	r3, r3, #1
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00b      	beq.n	8007566 <HAL_UART_IRQHandler+0xae>
 800754e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007556:	2b00      	cmp	r3, #0
 8007558:	d005      	beq.n	8007566 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800755e:	f043 0201 	orr.w	r2, r3, #1
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800756a:	f003 0304 	and.w	r3, r3, #4
 800756e:	2b00      	cmp	r3, #0
 8007570:	d00b      	beq.n	800758a <HAL_UART_IRQHandler+0xd2>
 8007572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	2b00      	cmp	r3, #0
 800757c:	d005      	beq.n	800758a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007582:	f043 0202 	orr.w	r2, r3, #2
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800758a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800758e:	f003 0302 	and.w	r3, r3, #2
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00b      	beq.n	80075ae <HAL_UART_IRQHandler+0xf6>
 8007596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800759a:	f003 0301 	and.w	r3, r3, #1
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d005      	beq.n	80075ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075a6:	f043 0204 	orr.w	r2, r3, #4
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80075ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075b2:	f003 0308 	and.w	r3, r3, #8
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d011      	beq.n	80075de <HAL_UART_IRQHandler+0x126>
 80075ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075be:	f003 0320 	and.w	r3, r3, #32
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d105      	bne.n	80075d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80075c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d005      	beq.n	80075de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075d6:	f043 0208 	orr.w	r2, r3, #8
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f000 81f2 	beq.w	80079cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80075e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075ec:	f003 0320 	and.w	r3, r3, #32
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d008      	beq.n	8007606 <HAL_UART_IRQHandler+0x14e>
 80075f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075f8:	f003 0320 	and.w	r3, r3, #32
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d002      	beq.n	8007606 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 fbcb 	bl	8007d9c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	695b      	ldr	r3, [r3, #20]
 800760c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007610:	2b40      	cmp	r3, #64	@ 0x40
 8007612:	bf0c      	ite	eq
 8007614:	2301      	moveq	r3, #1
 8007616:	2300      	movne	r3, #0
 8007618:	b2db      	uxtb	r3, r3
 800761a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007622:	f003 0308 	and.w	r3, r3, #8
 8007626:	2b00      	cmp	r3, #0
 8007628:	d103      	bne.n	8007632 <HAL_UART_IRQHandler+0x17a>
 800762a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800762e:	2b00      	cmp	r3, #0
 8007630:	d04f      	beq.n	80076d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 fad3 	bl	8007bde <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007642:	2b40      	cmp	r3, #64	@ 0x40
 8007644:	d141      	bne.n	80076ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3314      	adds	r3, #20
 800764c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007650:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007654:	e853 3f00 	ldrex	r3, [r3]
 8007658:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800765c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007664:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	3314      	adds	r3, #20
 800766e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007672:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007676:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800767e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007682:	e841 2300 	strex	r3, r2, [r1]
 8007686:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800768a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1d9      	bne.n	8007646 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007696:	2b00      	cmp	r3, #0
 8007698:	d013      	beq.n	80076c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800769e:	4a7e      	ldr	r2, [pc, #504]	@ (8007898 <HAL_UART_IRQHandler+0x3e0>)
 80076a0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fb fd62 	bl	8003170 <HAL_DMA_Abort_IT>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d016      	beq.n	80076e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80076bc:	4610      	mov	r0, r2
 80076be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076c0:	e00e      	b.n	80076e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f9a8 	bl	8007a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076c8:	e00a      	b.n	80076e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f9a4 	bl	8007a18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076d0:	e006      	b.n	80076e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f9a0 	bl	8007a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80076de:	e175      	b.n	80079cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076e0:	bf00      	nop
    return;
 80076e2:	e173      	b.n	80079cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	f040 814f 	bne.w	800798c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80076ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076f2:	f003 0310 	and.w	r3, r3, #16
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f000 8148 	beq.w	800798c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80076fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007700:	f003 0310 	and.w	r3, r3, #16
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 8141 	beq.w	800798c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800770a:	2300      	movs	r3, #0
 800770c:	60bb      	str	r3, [r7, #8]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	60bb      	str	r3, [r7, #8]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	60bb      	str	r3, [r7, #8]
 800771e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800772a:	2b40      	cmp	r3, #64	@ 0x40
 800772c:	f040 80b6 	bne.w	800789c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800773c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 8145 	beq.w	80079d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800774a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800774e:	429a      	cmp	r2, r3
 8007750:	f080 813e 	bcs.w	80079d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800775a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007766:	f000 8088 	beq.w	800787a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	330c      	adds	r3, #12
 8007770:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007774:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007780:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007784:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007788:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	330c      	adds	r3, #12
 8007792:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007796:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800779a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80077a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80077a6:	e841 2300 	strex	r3, r2, [r1]
 80077aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80077ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1d9      	bne.n	800776a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	3314      	adds	r3, #20
 80077bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80077c0:	e853 3f00 	ldrex	r3, [r3]
 80077c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80077c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077c8:	f023 0301 	bic.w	r3, r3, #1
 80077cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3314      	adds	r3, #20
 80077d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80077da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80077de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80077e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80077e6:	e841 2300 	strex	r3, r2, [r1]
 80077ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80077ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1e1      	bne.n	80077b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	3314      	adds	r3, #20
 80077f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077fc:	e853 3f00 	ldrex	r3, [r3]
 8007800:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007802:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007804:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007808:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3314      	adds	r3, #20
 8007812:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007816:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007818:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800781c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800781e:	e841 2300 	strex	r3, r2, [r1]
 8007822:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007824:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1e3      	bne.n	80077f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2220      	movs	r2, #32
 800782e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	330c      	adds	r3, #12
 800783e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007840:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007842:	e853 3f00 	ldrex	r3, [r3]
 8007846:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007848:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800784a:	f023 0310 	bic.w	r3, r3, #16
 800784e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	330c      	adds	r3, #12
 8007858:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800785c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800785e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007860:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007862:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007864:	e841 2300 	strex	r3, r2, [r1]
 8007868:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800786a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1e3      	bne.n	8007838 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007874:	4618      	mov	r0, r3
 8007876:	f7fb fc0b 	bl	8003090 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2202      	movs	r2, #2
 800787e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007888:	b29b      	uxth	r3, r3
 800788a:	1ad3      	subs	r3, r2, r3
 800788c:	b29b      	uxth	r3, r3
 800788e:	4619      	mov	r1, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f8cb 	bl	8007a2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007896:	e09b      	b.n	80079d0 <HAL_UART_IRQHandler+0x518>
 8007898:	08007ca5 	.word	0x08007ca5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	f000 808e 	beq.w	80079d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80078b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f000 8089 	beq.w	80079d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	330c      	adds	r3, #12
 80078c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078cc:	e853 3f00 	ldrex	r3, [r3]
 80078d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	330c      	adds	r3, #12
 80078e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80078e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80078e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80078ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078ee:	e841 2300 	strex	r3, r2, [r1]
 80078f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80078f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1e3      	bne.n	80078c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	3314      	adds	r3, #20
 8007900:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007904:	e853 3f00 	ldrex	r3, [r3]
 8007908:	623b      	str	r3, [r7, #32]
   return(result);
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	f023 0301 	bic.w	r3, r3, #1
 8007910:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	3314      	adds	r3, #20
 800791a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800791e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007920:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007922:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007924:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007926:	e841 2300 	strex	r3, r2, [r1]
 800792a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800792c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1e3      	bne.n	80078fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2220      	movs	r2, #32
 8007936:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	330c      	adds	r3, #12
 8007946:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	e853 3f00 	ldrex	r3, [r3]
 800794e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f023 0310 	bic.w	r3, r3, #16
 8007956:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	330c      	adds	r3, #12
 8007960:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007964:	61fa      	str	r2, [r7, #28]
 8007966:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	69b9      	ldr	r1, [r7, #24]
 800796a:	69fa      	ldr	r2, [r7, #28]
 800796c:	e841 2300 	strex	r3, r2, [r1]
 8007970:	617b      	str	r3, [r7, #20]
   return(result);
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e3      	bne.n	8007940 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2202      	movs	r2, #2
 800797c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800797e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007982:	4619      	mov	r1, r3
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f851 	bl	8007a2c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800798a:	e023      	b.n	80079d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800798c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007994:	2b00      	cmp	r3, #0
 8007996:	d009      	beq.n	80079ac <HAL_UART_IRQHandler+0x4f4>
 8007998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800799c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d003      	beq.n	80079ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f000 f991 	bl	8007ccc <UART_Transmit_IT>
    return;
 80079aa:	e014      	b.n	80079d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80079ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00e      	beq.n	80079d6 <HAL_UART_IRQHandler+0x51e>
 80079b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d008      	beq.n	80079d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f9d1 	bl	8007d6c <UART_EndTransmit_IT>
    return;
 80079ca:	e004      	b.n	80079d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80079cc:	bf00      	nop
 80079ce:	e002      	b.n	80079d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80079d0:	bf00      	nop
 80079d2:	e000      	b.n	80079d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80079d4:	bf00      	nop
  }
}
 80079d6:	37e8      	adds	r7, #232	@ 0xe8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	460b      	mov	r3, r1
 8007a36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b090      	sub	sp, #64	@ 0x40
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d137      	bne.n	8007ad0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007a60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a62:	2200      	movs	r2, #0
 8007a64:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3314      	adds	r3, #20
 8007a6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a70:	e853 3f00 	ldrex	r3, [r3]
 8007a74:	623b      	str	r3, [r7, #32]
   return(result);
 8007a76:	6a3b      	ldr	r3, [r7, #32]
 8007a78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a7c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	3314      	adds	r3, #20
 8007a84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a86:	633a      	str	r2, [r7, #48]	@ 0x30
 8007a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a8e:	e841 2300 	strex	r3, r2, [r1]
 8007a92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1e5      	bne.n	8007a66 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007a9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	330c      	adds	r3, #12
 8007aa0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	e853 3f00 	ldrex	r3, [r3]
 8007aa8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ab0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	330c      	adds	r3, #12
 8007ab8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007aba:	61fa      	str	r2, [r7, #28]
 8007abc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abe:	69b9      	ldr	r1, [r7, #24]
 8007ac0:	69fa      	ldr	r2, [r7, #28]
 8007ac2:	e841 2300 	strex	r3, r2, [r1]
 8007ac6:	617b      	str	r3, [r7, #20]
   return(result);
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1e5      	bne.n	8007a9a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ace:	e002      	b.n	8007ad6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007ad0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007ad2:	f7ff ff83 	bl	80079dc <HAL_UART_TxCpltCallback>
}
 8007ad6:	bf00      	nop
 8007ad8:	3740      	adds	r7, #64	@ 0x40
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}

08007ade <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ade:	b580      	push	{r7, lr}
 8007ae0:	b084      	sub	sp, #16
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007aea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f7ff ff7f 	bl	80079f0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007af2:	bf00      	nop
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b084      	sub	sp, #16
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007b02:	2300      	movs	r3, #0
 8007b04:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b0a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b16:	2b80      	cmp	r3, #128	@ 0x80
 8007b18:	bf0c      	ite	eq
 8007b1a:	2301      	moveq	r3, #1
 8007b1c:	2300      	movne	r3, #0
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b21      	cmp	r3, #33	@ 0x21
 8007b2c:	d108      	bne.n	8007b40 <UART_DMAError+0x46>
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d005      	beq.n	8007b40 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	2200      	movs	r2, #0
 8007b38:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8007b3a:	68b8      	ldr	r0, [r7, #8]
 8007b3c:	f000 f827 	bl	8007b8e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b4a:	2b40      	cmp	r3, #64	@ 0x40
 8007b4c:	bf0c      	ite	eq
 8007b4e:	2301      	moveq	r3, #1
 8007b50:	2300      	movne	r3, #0
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b22      	cmp	r3, #34	@ 0x22
 8007b60:	d108      	bne.n	8007b74 <UART_DMAError+0x7a>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d005      	beq.n	8007b74 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007b6e:	68b8      	ldr	r0, [r7, #8]
 8007b70:	f000 f835 	bl	8007bde <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b78:	f043 0210 	orr.w	r2, r3, #16
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b80:	68b8      	ldr	r0, [r7, #8]
 8007b82:	f7ff ff49 	bl	8007a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b86:	bf00      	nop
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b089      	sub	sp, #36	@ 0x24
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	330c      	adds	r3, #12
 8007b9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	e853 3f00 	ldrex	r3, [r3]
 8007ba4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007bac:	61fb      	str	r3, [r7, #28]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	330c      	adds	r3, #12
 8007bb4:	69fa      	ldr	r2, [r7, #28]
 8007bb6:	61ba      	str	r2, [r7, #24]
 8007bb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bba:	6979      	ldr	r1, [r7, #20]
 8007bbc:	69ba      	ldr	r2, [r7, #24]
 8007bbe:	e841 2300 	strex	r3, r2, [r1]
 8007bc2:	613b      	str	r3, [r7, #16]
   return(result);
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1e5      	bne.n	8007b96 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2220      	movs	r2, #32
 8007bce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007bd2:	bf00      	nop
 8007bd4:	3724      	adds	r7, #36	@ 0x24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr

08007bde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bde:	b480      	push	{r7}
 8007be0:	b095      	sub	sp, #84	@ 0x54
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	330c      	adds	r3, #12
 8007bec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bf0:	e853 3f00 	ldrex	r3, [r3]
 8007bf4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	330c      	adds	r3, #12
 8007c04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007c06:	643a      	str	r2, [r7, #64]	@ 0x40
 8007c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007c0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007c0e:	e841 2300 	strex	r3, r2, [r1]
 8007c12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1e5      	bne.n	8007be6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	3314      	adds	r3, #20
 8007c20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	e853 3f00 	ldrex	r3, [r3]
 8007c28:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	f023 0301 	bic.w	r3, r3, #1
 8007c30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	3314      	adds	r3, #20
 8007c38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007c3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007c40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c42:	e841 2300 	strex	r3, r2, [r1]
 8007c46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d1e5      	bne.n	8007c1a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d119      	bne.n	8007c8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	330c      	adds	r3, #12
 8007c5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	e853 3f00 	ldrex	r3, [r3]
 8007c64:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	f023 0310 	bic.w	r3, r3, #16
 8007c6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	330c      	adds	r3, #12
 8007c74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c76:	61ba      	str	r2, [r7, #24]
 8007c78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7a:	6979      	ldr	r1, [r7, #20]
 8007c7c:	69ba      	ldr	r2, [r7, #24]
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	613b      	str	r3, [r7, #16]
   return(result);
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d1e5      	bne.n	8007c56 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007c98:	bf00      	nop
 8007c9a:	3754      	adds	r7, #84	@ 0x54
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f7ff feaa 	bl	8007a18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cc4:	bf00      	nop
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b21      	cmp	r3, #33	@ 0x21
 8007cde:	d13e      	bne.n	8007d5e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ce8:	d114      	bne.n	8007d14 <UART_Transmit_IT+0x48>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d110      	bne.n	8007d14 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d06:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a1b      	ldr	r3, [r3, #32]
 8007d0c:	1c9a      	adds	r2, r3, #2
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	621a      	str	r2, [r3, #32]
 8007d12:	e008      	b.n	8007d26 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a1b      	ldr	r3, [r3, #32]
 8007d18:	1c59      	adds	r1, r3, #1
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	6211      	str	r1, [r2, #32]
 8007d1e:	781a      	ldrb	r2, [r3, #0]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	4619      	mov	r1, r3
 8007d34:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d10f      	bne.n	8007d5a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	68da      	ldr	r2, [r3, #12]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007d48:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68da      	ldr	r2, [r3, #12]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d58:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	e000      	b.n	8007d60 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007d5e:	2302      	movs	r3, #2
  }
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3714      	adds	r7, #20
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b082      	sub	sp, #8
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68da      	ldr	r2, [r3, #12]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d82:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2220      	movs	r2, #32
 8007d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7ff fe25 	bl	80079dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007d92:	2300      	movs	r3, #0
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b08c      	sub	sp, #48	@ 0x30
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	2b22      	cmp	r3, #34	@ 0x22
 8007dae:	f040 80ae 	bne.w	8007f0e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dba:	d117      	bne.n	8007dec <UART_Receive_IT+0x50>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d113      	bne.n	8007dec <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dde:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de4:	1c9a      	adds	r2, r3, #2
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	629a      	str	r2, [r3, #40]	@ 0x28
 8007dea:	e026      	b.n	8007e3a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007df2:	2300      	movs	r3, #0
 8007df4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007dfe:	d007      	beq.n	8007e10 <UART_Receive_IT+0x74>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10a      	bne.n	8007e1e <UART_Receive_IT+0x82>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d106      	bne.n	8007e1e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e1a:	701a      	strb	r2, [r3, #0]
 8007e1c:	e008      	b.n	8007e30 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e2a:	b2da      	uxtb	r2, r3
 8007e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e2e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e34:	1c5a      	adds	r2, r3, #1
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	3b01      	subs	r3, #1
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	4619      	mov	r1, r3
 8007e48:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d15d      	bne.n	8007f0a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	68da      	ldr	r2, [r3, #12]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f022 0220 	bic.w	r2, r2, #32
 8007e5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68da      	ldr	r2, [r3, #12]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007e6c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	695a      	ldr	r2, [r3, #20]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 0201 	bic.w	r2, r2, #1
 8007e7c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2220      	movs	r2, #32
 8007e82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d135      	bne.n	8007f00 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	330c      	adds	r3, #12
 8007ea0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	e853 3f00 	ldrex	r3, [r3]
 8007ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	f023 0310 	bic.w	r3, r3, #16
 8007eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	330c      	adds	r3, #12
 8007eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007eba:	623a      	str	r2, [r7, #32]
 8007ebc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebe:	69f9      	ldr	r1, [r7, #28]
 8007ec0:	6a3a      	ldr	r2, [r7, #32]
 8007ec2:	e841 2300 	strex	r3, r2, [r1]
 8007ec6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1e5      	bne.n	8007e9a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0310 	and.w	r3, r3, #16
 8007ed8:	2b10      	cmp	r3, #16
 8007eda:	d10a      	bne.n	8007ef2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007edc:	2300      	movs	r3, #0
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	60fb      	str	r3, [r7, #12]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	60fb      	str	r3, [r7, #12]
 8007ef0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7ff fd97 	bl	8007a2c <HAL_UARTEx_RxEventCallback>
 8007efe:	e002      	b.n	8007f06 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7ff fd7f 	bl	8007a04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007f06:	2300      	movs	r3, #0
 8007f08:	e002      	b.n	8007f10 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	e000      	b.n	8007f10 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007f0e:	2302      	movs	r3, #2
  }
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3730      	adds	r7, #48	@ 0x30
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f1c:	b0c0      	sub	sp, #256	@ 0x100
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f34:	68d9      	ldr	r1, [r3, #12]
 8007f36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	ea40 0301 	orr.w	r3, r0, r1
 8007f40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f46:	689a      	ldr	r2, [r3, #8]
 8007f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	431a      	orrs	r2, r3
 8007f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f54:	695b      	ldr	r3, [r3, #20]
 8007f56:	431a      	orrs	r2, r3
 8007f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f5c:	69db      	ldr	r3, [r3, #28]
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007f70:	f021 010c 	bic.w	r1, r1, #12
 8007f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f7e:	430b      	orrs	r3, r1
 8007f80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f92:	6999      	ldr	r1, [r3, #24]
 8007f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	ea40 0301 	orr.w	r3, r0, r1
 8007f9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	4b8f      	ldr	r3, [pc, #572]	@ (80081e4 <UART_SetConfig+0x2cc>)
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d005      	beq.n	8007fb8 <UART_SetConfig+0xa0>
 8007fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	4b8d      	ldr	r3, [pc, #564]	@ (80081e8 <UART_SetConfig+0x2d0>)
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d104      	bne.n	8007fc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007fb8:	f7fe fd66 	bl	8006a88 <HAL_RCC_GetPCLK2Freq>
 8007fbc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007fc0:	e003      	b.n	8007fca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007fc2:	f7fe fd4d 	bl	8006a60 <HAL_RCC_GetPCLK1Freq>
 8007fc6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fce:	69db      	ldr	r3, [r3, #28]
 8007fd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fd4:	f040 810c 	bne.w	80081f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007fd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007fe2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007fe6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007fea:	4622      	mov	r2, r4
 8007fec:	462b      	mov	r3, r5
 8007fee:	1891      	adds	r1, r2, r2
 8007ff0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007ff2:	415b      	adcs	r3, r3
 8007ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ff6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007ffa:	4621      	mov	r1, r4
 8007ffc:	eb12 0801 	adds.w	r8, r2, r1
 8008000:	4629      	mov	r1, r5
 8008002:	eb43 0901 	adc.w	r9, r3, r1
 8008006:	f04f 0200 	mov.w	r2, #0
 800800a:	f04f 0300 	mov.w	r3, #0
 800800e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008012:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008016:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800801a:	4690      	mov	r8, r2
 800801c:	4699      	mov	r9, r3
 800801e:	4623      	mov	r3, r4
 8008020:	eb18 0303 	adds.w	r3, r8, r3
 8008024:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008028:	462b      	mov	r3, r5
 800802a:	eb49 0303 	adc.w	r3, r9, r3
 800802e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800803e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008042:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008046:	460b      	mov	r3, r1
 8008048:	18db      	adds	r3, r3, r3
 800804a:	653b      	str	r3, [r7, #80]	@ 0x50
 800804c:	4613      	mov	r3, r2
 800804e:	eb42 0303 	adc.w	r3, r2, r3
 8008052:	657b      	str	r3, [r7, #84]	@ 0x54
 8008054:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008058:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800805c:	f7f8 fe1c 	bl	8000c98 <__aeabi_uldivmod>
 8008060:	4602      	mov	r2, r0
 8008062:	460b      	mov	r3, r1
 8008064:	4b61      	ldr	r3, [pc, #388]	@ (80081ec <UART_SetConfig+0x2d4>)
 8008066:	fba3 2302 	umull	r2, r3, r3, r2
 800806a:	095b      	lsrs	r3, r3, #5
 800806c:	011c      	lsls	r4, r3, #4
 800806e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008072:	2200      	movs	r2, #0
 8008074:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008078:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800807c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008080:	4642      	mov	r2, r8
 8008082:	464b      	mov	r3, r9
 8008084:	1891      	adds	r1, r2, r2
 8008086:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008088:	415b      	adcs	r3, r3
 800808a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800808c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008090:	4641      	mov	r1, r8
 8008092:	eb12 0a01 	adds.w	sl, r2, r1
 8008096:	4649      	mov	r1, r9
 8008098:	eb43 0b01 	adc.w	fp, r3, r1
 800809c:	f04f 0200 	mov.w	r2, #0
 80080a0:	f04f 0300 	mov.w	r3, #0
 80080a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80080a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80080ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80080b0:	4692      	mov	sl, r2
 80080b2:	469b      	mov	fp, r3
 80080b4:	4643      	mov	r3, r8
 80080b6:	eb1a 0303 	adds.w	r3, sl, r3
 80080ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80080be:	464b      	mov	r3, r9
 80080c0:	eb4b 0303 	adc.w	r3, fp, r3
 80080c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80080c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80080d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80080d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80080dc:	460b      	mov	r3, r1
 80080de:	18db      	adds	r3, r3, r3
 80080e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80080e2:	4613      	mov	r3, r2
 80080e4:	eb42 0303 	adc.w	r3, r2, r3
 80080e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80080ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80080ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80080f2:	f7f8 fdd1 	bl	8000c98 <__aeabi_uldivmod>
 80080f6:	4602      	mov	r2, r0
 80080f8:	460b      	mov	r3, r1
 80080fa:	4611      	mov	r1, r2
 80080fc:	4b3b      	ldr	r3, [pc, #236]	@ (80081ec <UART_SetConfig+0x2d4>)
 80080fe:	fba3 2301 	umull	r2, r3, r3, r1
 8008102:	095b      	lsrs	r3, r3, #5
 8008104:	2264      	movs	r2, #100	@ 0x64
 8008106:	fb02 f303 	mul.w	r3, r2, r3
 800810a:	1acb      	subs	r3, r1, r3
 800810c:	00db      	lsls	r3, r3, #3
 800810e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008112:	4b36      	ldr	r3, [pc, #216]	@ (80081ec <UART_SetConfig+0x2d4>)
 8008114:	fba3 2302 	umull	r2, r3, r3, r2
 8008118:	095b      	lsrs	r3, r3, #5
 800811a:	005b      	lsls	r3, r3, #1
 800811c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008120:	441c      	add	r4, r3
 8008122:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008126:	2200      	movs	r2, #0
 8008128:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800812c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008130:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008134:	4642      	mov	r2, r8
 8008136:	464b      	mov	r3, r9
 8008138:	1891      	adds	r1, r2, r2
 800813a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800813c:	415b      	adcs	r3, r3
 800813e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008140:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008144:	4641      	mov	r1, r8
 8008146:	1851      	adds	r1, r2, r1
 8008148:	6339      	str	r1, [r7, #48]	@ 0x30
 800814a:	4649      	mov	r1, r9
 800814c:	414b      	adcs	r3, r1
 800814e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008150:	f04f 0200 	mov.w	r2, #0
 8008154:	f04f 0300 	mov.w	r3, #0
 8008158:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800815c:	4659      	mov	r1, fp
 800815e:	00cb      	lsls	r3, r1, #3
 8008160:	4651      	mov	r1, sl
 8008162:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008166:	4651      	mov	r1, sl
 8008168:	00ca      	lsls	r2, r1, #3
 800816a:	4610      	mov	r0, r2
 800816c:	4619      	mov	r1, r3
 800816e:	4603      	mov	r3, r0
 8008170:	4642      	mov	r2, r8
 8008172:	189b      	adds	r3, r3, r2
 8008174:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008178:	464b      	mov	r3, r9
 800817a:	460a      	mov	r2, r1
 800817c:	eb42 0303 	adc.w	r3, r2, r3
 8008180:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008190:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008194:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008198:	460b      	mov	r3, r1
 800819a:	18db      	adds	r3, r3, r3
 800819c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800819e:	4613      	mov	r3, r2
 80081a0:	eb42 0303 	adc.w	r3, r2, r3
 80081a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80081aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80081ae:	f7f8 fd73 	bl	8000c98 <__aeabi_uldivmod>
 80081b2:	4602      	mov	r2, r0
 80081b4:	460b      	mov	r3, r1
 80081b6:	4b0d      	ldr	r3, [pc, #52]	@ (80081ec <UART_SetConfig+0x2d4>)
 80081b8:	fba3 1302 	umull	r1, r3, r3, r2
 80081bc:	095b      	lsrs	r3, r3, #5
 80081be:	2164      	movs	r1, #100	@ 0x64
 80081c0:	fb01 f303 	mul.w	r3, r1, r3
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	00db      	lsls	r3, r3, #3
 80081c8:	3332      	adds	r3, #50	@ 0x32
 80081ca:	4a08      	ldr	r2, [pc, #32]	@ (80081ec <UART_SetConfig+0x2d4>)
 80081cc:	fba2 2303 	umull	r2, r3, r2, r3
 80081d0:	095b      	lsrs	r3, r3, #5
 80081d2:	f003 0207 	and.w	r2, r3, #7
 80081d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4422      	add	r2, r4
 80081de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80081e0:	e106      	b.n	80083f0 <UART_SetConfig+0x4d8>
 80081e2:	bf00      	nop
 80081e4:	40011000 	.word	0x40011000
 80081e8:	40011400 	.word	0x40011400
 80081ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081f4:	2200      	movs	r2, #0
 80081f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80081fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80081fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008202:	4642      	mov	r2, r8
 8008204:	464b      	mov	r3, r9
 8008206:	1891      	adds	r1, r2, r2
 8008208:	6239      	str	r1, [r7, #32]
 800820a:	415b      	adcs	r3, r3
 800820c:	627b      	str	r3, [r7, #36]	@ 0x24
 800820e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008212:	4641      	mov	r1, r8
 8008214:	1854      	adds	r4, r2, r1
 8008216:	4649      	mov	r1, r9
 8008218:	eb43 0501 	adc.w	r5, r3, r1
 800821c:	f04f 0200 	mov.w	r2, #0
 8008220:	f04f 0300 	mov.w	r3, #0
 8008224:	00eb      	lsls	r3, r5, #3
 8008226:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800822a:	00e2      	lsls	r2, r4, #3
 800822c:	4614      	mov	r4, r2
 800822e:	461d      	mov	r5, r3
 8008230:	4643      	mov	r3, r8
 8008232:	18e3      	adds	r3, r4, r3
 8008234:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008238:	464b      	mov	r3, r9
 800823a:	eb45 0303 	adc.w	r3, r5, r3
 800823e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008246:	685b      	ldr	r3, [r3, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800824e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008252:	f04f 0200 	mov.w	r2, #0
 8008256:	f04f 0300 	mov.w	r3, #0
 800825a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800825e:	4629      	mov	r1, r5
 8008260:	008b      	lsls	r3, r1, #2
 8008262:	4621      	mov	r1, r4
 8008264:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008268:	4621      	mov	r1, r4
 800826a:	008a      	lsls	r2, r1, #2
 800826c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008270:	f7f8 fd12 	bl	8000c98 <__aeabi_uldivmod>
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	4b60      	ldr	r3, [pc, #384]	@ (80083fc <UART_SetConfig+0x4e4>)
 800827a:	fba3 2302 	umull	r2, r3, r3, r2
 800827e:	095b      	lsrs	r3, r3, #5
 8008280:	011c      	lsls	r4, r3, #4
 8008282:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008286:	2200      	movs	r2, #0
 8008288:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800828c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008290:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008294:	4642      	mov	r2, r8
 8008296:	464b      	mov	r3, r9
 8008298:	1891      	adds	r1, r2, r2
 800829a:	61b9      	str	r1, [r7, #24]
 800829c:	415b      	adcs	r3, r3
 800829e:	61fb      	str	r3, [r7, #28]
 80082a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082a4:	4641      	mov	r1, r8
 80082a6:	1851      	adds	r1, r2, r1
 80082a8:	6139      	str	r1, [r7, #16]
 80082aa:	4649      	mov	r1, r9
 80082ac:	414b      	adcs	r3, r1
 80082ae:	617b      	str	r3, [r7, #20]
 80082b0:	f04f 0200 	mov.w	r2, #0
 80082b4:	f04f 0300 	mov.w	r3, #0
 80082b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80082bc:	4659      	mov	r1, fp
 80082be:	00cb      	lsls	r3, r1, #3
 80082c0:	4651      	mov	r1, sl
 80082c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082c6:	4651      	mov	r1, sl
 80082c8:	00ca      	lsls	r2, r1, #3
 80082ca:	4610      	mov	r0, r2
 80082cc:	4619      	mov	r1, r3
 80082ce:	4603      	mov	r3, r0
 80082d0:	4642      	mov	r2, r8
 80082d2:	189b      	adds	r3, r3, r2
 80082d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80082d8:	464b      	mov	r3, r9
 80082da:	460a      	mov	r2, r1
 80082dc:	eb42 0303 	adc.w	r3, r2, r3
 80082e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80082e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80082ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80082f0:	f04f 0200 	mov.w	r2, #0
 80082f4:	f04f 0300 	mov.w	r3, #0
 80082f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80082fc:	4649      	mov	r1, r9
 80082fe:	008b      	lsls	r3, r1, #2
 8008300:	4641      	mov	r1, r8
 8008302:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008306:	4641      	mov	r1, r8
 8008308:	008a      	lsls	r2, r1, #2
 800830a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800830e:	f7f8 fcc3 	bl	8000c98 <__aeabi_uldivmod>
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	4611      	mov	r1, r2
 8008318:	4b38      	ldr	r3, [pc, #224]	@ (80083fc <UART_SetConfig+0x4e4>)
 800831a:	fba3 2301 	umull	r2, r3, r3, r1
 800831e:	095b      	lsrs	r3, r3, #5
 8008320:	2264      	movs	r2, #100	@ 0x64
 8008322:	fb02 f303 	mul.w	r3, r2, r3
 8008326:	1acb      	subs	r3, r1, r3
 8008328:	011b      	lsls	r3, r3, #4
 800832a:	3332      	adds	r3, #50	@ 0x32
 800832c:	4a33      	ldr	r2, [pc, #204]	@ (80083fc <UART_SetConfig+0x4e4>)
 800832e:	fba2 2303 	umull	r2, r3, r2, r3
 8008332:	095b      	lsrs	r3, r3, #5
 8008334:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008338:	441c      	add	r4, r3
 800833a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800833e:	2200      	movs	r2, #0
 8008340:	673b      	str	r3, [r7, #112]	@ 0x70
 8008342:	677a      	str	r2, [r7, #116]	@ 0x74
 8008344:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008348:	4642      	mov	r2, r8
 800834a:	464b      	mov	r3, r9
 800834c:	1891      	adds	r1, r2, r2
 800834e:	60b9      	str	r1, [r7, #8]
 8008350:	415b      	adcs	r3, r3
 8008352:	60fb      	str	r3, [r7, #12]
 8008354:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008358:	4641      	mov	r1, r8
 800835a:	1851      	adds	r1, r2, r1
 800835c:	6039      	str	r1, [r7, #0]
 800835e:	4649      	mov	r1, r9
 8008360:	414b      	adcs	r3, r1
 8008362:	607b      	str	r3, [r7, #4]
 8008364:	f04f 0200 	mov.w	r2, #0
 8008368:	f04f 0300 	mov.w	r3, #0
 800836c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008370:	4659      	mov	r1, fp
 8008372:	00cb      	lsls	r3, r1, #3
 8008374:	4651      	mov	r1, sl
 8008376:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800837a:	4651      	mov	r1, sl
 800837c:	00ca      	lsls	r2, r1, #3
 800837e:	4610      	mov	r0, r2
 8008380:	4619      	mov	r1, r3
 8008382:	4603      	mov	r3, r0
 8008384:	4642      	mov	r2, r8
 8008386:	189b      	adds	r3, r3, r2
 8008388:	66bb      	str	r3, [r7, #104]	@ 0x68
 800838a:	464b      	mov	r3, r9
 800838c:	460a      	mov	r2, r1
 800838e:	eb42 0303 	adc.w	r3, r2, r3
 8008392:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008398:	685b      	ldr	r3, [r3, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	663b      	str	r3, [r7, #96]	@ 0x60
 800839e:	667a      	str	r2, [r7, #100]	@ 0x64
 80083a0:	f04f 0200 	mov.w	r2, #0
 80083a4:	f04f 0300 	mov.w	r3, #0
 80083a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80083ac:	4649      	mov	r1, r9
 80083ae:	008b      	lsls	r3, r1, #2
 80083b0:	4641      	mov	r1, r8
 80083b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083b6:	4641      	mov	r1, r8
 80083b8:	008a      	lsls	r2, r1, #2
 80083ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80083be:	f7f8 fc6b 	bl	8000c98 <__aeabi_uldivmod>
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	4b0d      	ldr	r3, [pc, #52]	@ (80083fc <UART_SetConfig+0x4e4>)
 80083c8:	fba3 1302 	umull	r1, r3, r3, r2
 80083cc:	095b      	lsrs	r3, r3, #5
 80083ce:	2164      	movs	r1, #100	@ 0x64
 80083d0:	fb01 f303 	mul.w	r3, r1, r3
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	011b      	lsls	r3, r3, #4
 80083d8:	3332      	adds	r3, #50	@ 0x32
 80083da:	4a08      	ldr	r2, [pc, #32]	@ (80083fc <UART_SetConfig+0x4e4>)
 80083dc:	fba2 2303 	umull	r2, r3, r2, r3
 80083e0:	095b      	lsrs	r3, r3, #5
 80083e2:	f003 020f 	and.w	r2, r3, #15
 80083e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4422      	add	r2, r4
 80083ee:	609a      	str	r2, [r3, #8]
}
 80083f0:	bf00      	nop
 80083f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80083f6:	46bd      	mov	sp, r7
 80083f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083fc:	51eb851f 	.word	0x51eb851f

08008400 <__cvt>:
 8008400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008404:	ec57 6b10 	vmov	r6, r7, d0
 8008408:	2f00      	cmp	r7, #0
 800840a:	460c      	mov	r4, r1
 800840c:	4619      	mov	r1, r3
 800840e:	463b      	mov	r3, r7
 8008410:	bfbb      	ittet	lt
 8008412:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008416:	461f      	movlt	r7, r3
 8008418:	2300      	movge	r3, #0
 800841a:	232d      	movlt	r3, #45	@ 0x2d
 800841c:	700b      	strb	r3, [r1, #0]
 800841e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008420:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008424:	4691      	mov	r9, r2
 8008426:	f023 0820 	bic.w	r8, r3, #32
 800842a:	bfbc      	itt	lt
 800842c:	4632      	movlt	r2, r6
 800842e:	4616      	movlt	r6, r2
 8008430:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008434:	d005      	beq.n	8008442 <__cvt+0x42>
 8008436:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800843a:	d100      	bne.n	800843e <__cvt+0x3e>
 800843c:	3401      	adds	r4, #1
 800843e:	2102      	movs	r1, #2
 8008440:	e000      	b.n	8008444 <__cvt+0x44>
 8008442:	2103      	movs	r1, #3
 8008444:	ab03      	add	r3, sp, #12
 8008446:	9301      	str	r3, [sp, #4]
 8008448:	ab02      	add	r3, sp, #8
 800844a:	9300      	str	r3, [sp, #0]
 800844c:	ec47 6b10 	vmov	d0, r6, r7
 8008450:	4653      	mov	r3, sl
 8008452:	4622      	mov	r2, r4
 8008454:	f000 fe70 	bl	8009138 <_dtoa_r>
 8008458:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800845c:	4605      	mov	r5, r0
 800845e:	d119      	bne.n	8008494 <__cvt+0x94>
 8008460:	f019 0f01 	tst.w	r9, #1
 8008464:	d00e      	beq.n	8008484 <__cvt+0x84>
 8008466:	eb00 0904 	add.w	r9, r0, r4
 800846a:	2200      	movs	r2, #0
 800846c:	2300      	movs	r3, #0
 800846e:	4630      	mov	r0, r6
 8008470:	4639      	mov	r1, r7
 8008472:	f7f8 fb31 	bl	8000ad8 <__aeabi_dcmpeq>
 8008476:	b108      	cbz	r0, 800847c <__cvt+0x7c>
 8008478:	f8cd 900c 	str.w	r9, [sp, #12]
 800847c:	2230      	movs	r2, #48	@ 0x30
 800847e:	9b03      	ldr	r3, [sp, #12]
 8008480:	454b      	cmp	r3, r9
 8008482:	d31e      	bcc.n	80084c2 <__cvt+0xc2>
 8008484:	9b03      	ldr	r3, [sp, #12]
 8008486:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008488:	1b5b      	subs	r3, r3, r5
 800848a:	4628      	mov	r0, r5
 800848c:	6013      	str	r3, [r2, #0]
 800848e:	b004      	add	sp, #16
 8008490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008494:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008498:	eb00 0904 	add.w	r9, r0, r4
 800849c:	d1e5      	bne.n	800846a <__cvt+0x6a>
 800849e:	7803      	ldrb	r3, [r0, #0]
 80084a0:	2b30      	cmp	r3, #48	@ 0x30
 80084a2:	d10a      	bne.n	80084ba <__cvt+0xba>
 80084a4:	2200      	movs	r2, #0
 80084a6:	2300      	movs	r3, #0
 80084a8:	4630      	mov	r0, r6
 80084aa:	4639      	mov	r1, r7
 80084ac:	f7f8 fb14 	bl	8000ad8 <__aeabi_dcmpeq>
 80084b0:	b918      	cbnz	r0, 80084ba <__cvt+0xba>
 80084b2:	f1c4 0401 	rsb	r4, r4, #1
 80084b6:	f8ca 4000 	str.w	r4, [sl]
 80084ba:	f8da 3000 	ldr.w	r3, [sl]
 80084be:	4499      	add	r9, r3
 80084c0:	e7d3      	b.n	800846a <__cvt+0x6a>
 80084c2:	1c59      	adds	r1, r3, #1
 80084c4:	9103      	str	r1, [sp, #12]
 80084c6:	701a      	strb	r2, [r3, #0]
 80084c8:	e7d9      	b.n	800847e <__cvt+0x7e>

080084ca <__exponent>:
 80084ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084cc:	2900      	cmp	r1, #0
 80084ce:	bfba      	itte	lt
 80084d0:	4249      	neglt	r1, r1
 80084d2:	232d      	movlt	r3, #45	@ 0x2d
 80084d4:	232b      	movge	r3, #43	@ 0x2b
 80084d6:	2909      	cmp	r1, #9
 80084d8:	7002      	strb	r2, [r0, #0]
 80084da:	7043      	strb	r3, [r0, #1]
 80084dc:	dd29      	ble.n	8008532 <__exponent+0x68>
 80084de:	f10d 0307 	add.w	r3, sp, #7
 80084e2:	461d      	mov	r5, r3
 80084e4:	270a      	movs	r7, #10
 80084e6:	461a      	mov	r2, r3
 80084e8:	fbb1 f6f7 	udiv	r6, r1, r7
 80084ec:	fb07 1416 	mls	r4, r7, r6, r1
 80084f0:	3430      	adds	r4, #48	@ 0x30
 80084f2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80084f6:	460c      	mov	r4, r1
 80084f8:	2c63      	cmp	r4, #99	@ 0x63
 80084fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80084fe:	4631      	mov	r1, r6
 8008500:	dcf1      	bgt.n	80084e6 <__exponent+0x1c>
 8008502:	3130      	adds	r1, #48	@ 0x30
 8008504:	1e94      	subs	r4, r2, #2
 8008506:	f803 1c01 	strb.w	r1, [r3, #-1]
 800850a:	1c41      	adds	r1, r0, #1
 800850c:	4623      	mov	r3, r4
 800850e:	42ab      	cmp	r3, r5
 8008510:	d30a      	bcc.n	8008528 <__exponent+0x5e>
 8008512:	f10d 0309 	add.w	r3, sp, #9
 8008516:	1a9b      	subs	r3, r3, r2
 8008518:	42ac      	cmp	r4, r5
 800851a:	bf88      	it	hi
 800851c:	2300      	movhi	r3, #0
 800851e:	3302      	adds	r3, #2
 8008520:	4403      	add	r3, r0
 8008522:	1a18      	subs	r0, r3, r0
 8008524:	b003      	add	sp, #12
 8008526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008528:	f813 6b01 	ldrb.w	r6, [r3], #1
 800852c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008530:	e7ed      	b.n	800850e <__exponent+0x44>
 8008532:	2330      	movs	r3, #48	@ 0x30
 8008534:	3130      	adds	r1, #48	@ 0x30
 8008536:	7083      	strb	r3, [r0, #2]
 8008538:	70c1      	strb	r1, [r0, #3]
 800853a:	1d03      	adds	r3, r0, #4
 800853c:	e7f1      	b.n	8008522 <__exponent+0x58>
	...

08008540 <_printf_float>:
 8008540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008544:	b08d      	sub	sp, #52	@ 0x34
 8008546:	460c      	mov	r4, r1
 8008548:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800854c:	4616      	mov	r6, r2
 800854e:	461f      	mov	r7, r3
 8008550:	4605      	mov	r5, r0
 8008552:	f000 fcef 	bl	8008f34 <_localeconv_r>
 8008556:	6803      	ldr	r3, [r0, #0]
 8008558:	9304      	str	r3, [sp, #16]
 800855a:	4618      	mov	r0, r3
 800855c:	f7f7 fe90 	bl	8000280 <strlen>
 8008560:	2300      	movs	r3, #0
 8008562:	930a      	str	r3, [sp, #40]	@ 0x28
 8008564:	f8d8 3000 	ldr.w	r3, [r8]
 8008568:	9005      	str	r0, [sp, #20]
 800856a:	3307      	adds	r3, #7
 800856c:	f023 0307 	bic.w	r3, r3, #7
 8008570:	f103 0208 	add.w	r2, r3, #8
 8008574:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008578:	f8d4 b000 	ldr.w	fp, [r4]
 800857c:	f8c8 2000 	str.w	r2, [r8]
 8008580:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008584:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008588:	9307      	str	r3, [sp, #28]
 800858a:	f8cd 8018 	str.w	r8, [sp, #24]
 800858e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008592:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008596:	4b9c      	ldr	r3, [pc, #624]	@ (8008808 <_printf_float+0x2c8>)
 8008598:	f04f 32ff 	mov.w	r2, #4294967295
 800859c:	f7f8 face 	bl	8000b3c <__aeabi_dcmpun>
 80085a0:	bb70      	cbnz	r0, 8008600 <_printf_float+0xc0>
 80085a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80085a6:	4b98      	ldr	r3, [pc, #608]	@ (8008808 <_printf_float+0x2c8>)
 80085a8:	f04f 32ff 	mov.w	r2, #4294967295
 80085ac:	f7f8 faa8 	bl	8000b00 <__aeabi_dcmple>
 80085b0:	bb30      	cbnz	r0, 8008600 <_printf_float+0xc0>
 80085b2:	2200      	movs	r2, #0
 80085b4:	2300      	movs	r3, #0
 80085b6:	4640      	mov	r0, r8
 80085b8:	4649      	mov	r1, r9
 80085ba:	f7f8 fa97 	bl	8000aec <__aeabi_dcmplt>
 80085be:	b110      	cbz	r0, 80085c6 <_printf_float+0x86>
 80085c0:	232d      	movs	r3, #45	@ 0x2d
 80085c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085c6:	4a91      	ldr	r2, [pc, #580]	@ (800880c <_printf_float+0x2cc>)
 80085c8:	4b91      	ldr	r3, [pc, #580]	@ (8008810 <_printf_float+0x2d0>)
 80085ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80085ce:	bf94      	ite	ls
 80085d0:	4690      	movls	r8, r2
 80085d2:	4698      	movhi	r8, r3
 80085d4:	2303      	movs	r3, #3
 80085d6:	6123      	str	r3, [r4, #16]
 80085d8:	f02b 0304 	bic.w	r3, fp, #4
 80085dc:	6023      	str	r3, [r4, #0]
 80085de:	f04f 0900 	mov.w	r9, #0
 80085e2:	9700      	str	r7, [sp, #0]
 80085e4:	4633      	mov	r3, r6
 80085e6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80085e8:	4621      	mov	r1, r4
 80085ea:	4628      	mov	r0, r5
 80085ec:	f000 f9d2 	bl	8008994 <_printf_common>
 80085f0:	3001      	adds	r0, #1
 80085f2:	f040 808d 	bne.w	8008710 <_printf_float+0x1d0>
 80085f6:	f04f 30ff 	mov.w	r0, #4294967295
 80085fa:	b00d      	add	sp, #52	@ 0x34
 80085fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008600:	4642      	mov	r2, r8
 8008602:	464b      	mov	r3, r9
 8008604:	4640      	mov	r0, r8
 8008606:	4649      	mov	r1, r9
 8008608:	f7f8 fa98 	bl	8000b3c <__aeabi_dcmpun>
 800860c:	b140      	cbz	r0, 8008620 <_printf_float+0xe0>
 800860e:	464b      	mov	r3, r9
 8008610:	2b00      	cmp	r3, #0
 8008612:	bfbc      	itt	lt
 8008614:	232d      	movlt	r3, #45	@ 0x2d
 8008616:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800861a:	4a7e      	ldr	r2, [pc, #504]	@ (8008814 <_printf_float+0x2d4>)
 800861c:	4b7e      	ldr	r3, [pc, #504]	@ (8008818 <_printf_float+0x2d8>)
 800861e:	e7d4      	b.n	80085ca <_printf_float+0x8a>
 8008620:	6863      	ldr	r3, [r4, #4]
 8008622:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008626:	9206      	str	r2, [sp, #24]
 8008628:	1c5a      	adds	r2, r3, #1
 800862a:	d13b      	bne.n	80086a4 <_printf_float+0x164>
 800862c:	2306      	movs	r3, #6
 800862e:	6063      	str	r3, [r4, #4]
 8008630:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008634:	2300      	movs	r3, #0
 8008636:	6022      	str	r2, [r4, #0]
 8008638:	9303      	str	r3, [sp, #12]
 800863a:	ab0a      	add	r3, sp, #40	@ 0x28
 800863c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008640:	ab09      	add	r3, sp, #36	@ 0x24
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	6861      	ldr	r1, [r4, #4]
 8008646:	ec49 8b10 	vmov	d0, r8, r9
 800864a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800864e:	4628      	mov	r0, r5
 8008650:	f7ff fed6 	bl	8008400 <__cvt>
 8008654:	9b06      	ldr	r3, [sp, #24]
 8008656:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008658:	2b47      	cmp	r3, #71	@ 0x47
 800865a:	4680      	mov	r8, r0
 800865c:	d129      	bne.n	80086b2 <_printf_float+0x172>
 800865e:	1cc8      	adds	r0, r1, #3
 8008660:	db02      	blt.n	8008668 <_printf_float+0x128>
 8008662:	6863      	ldr	r3, [r4, #4]
 8008664:	4299      	cmp	r1, r3
 8008666:	dd41      	ble.n	80086ec <_printf_float+0x1ac>
 8008668:	f1aa 0a02 	sub.w	sl, sl, #2
 800866c:	fa5f fa8a 	uxtb.w	sl, sl
 8008670:	3901      	subs	r1, #1
 8008672:	4652      	mov	r2, sl
 8008674:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008678:	9109      	str	r1, [sp, #36]	@ 0x24
 800867a:	f7ff ff26 	bl	80084ca <__exponent>
 800867e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008680:	1813      	adds	r3, r2, r0
 8008682:	2a01      	cmp	r2, #1
 8008684:	4681      	mov	r9, r0
 8008686:	6123      	str	r3, [r4, #16]
 8008688:	dc02      	bgt.n	8008690 <_printf_float+0x150>
 800868a:	6822      	ldr	r2, [r4, #0]
 800868c:	07d2      	lsls	r2, r2, #31
 800868e:	d501      	bpl.n	8008694 <_printf_float+0x154>
 8008690:	3301      	adds	r3, #1
 8008692:	6123      	str	r3, [r4, #16]
 8008694:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008698:	2b00      	cmp	r3, #0
 800869a:	d0a2      	beq.n	80085e2 <_printf_float+0xa2>
 800869c:	232d      	movs	r3, #45	@ 0x2d
 800869e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086a2:	e79e      	b.n	80085e2 <_printf_float+0xa2>
 80086a4:	9a06      	ldr	r2, [sp, #24]
 80086a6:	2a47      	cmp	r2, #71	@ 0x47
 80086a8:	d1c2      	bne.n	8008630 <_printf_float+0xf0>
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1c0      	bne.n	8008630 <_printf_float+0xf0>
 80086ae:	2301      	movs	r3, #1
 80086b0:	e7bd      	b.n	800862e <_printf_float+0xee>
 80086b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80086b6:	d9db      	bls.n	8008670 <_printf_float+0x130>
 80086b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80086bc:	d118      	bne.n	80086f0 <_printf_float+0x1b0>
 80086be:	2900      	cmp	r1, #0
 80086c0:	6863      	ldr	r3, [r4, #4]
 80086c2:	dd0b      	ble.n	80086dc <_printf_float+0x19c>
 80086c4:	6121      	str	r1, [r4, #16]
 80086c6:	b913      	cbnz	r3, 80086ce <_printf_float+0x18e>
 80086c8:	6822      	ldr	r2, [r4, #0]
 80086ca:	07d0      	lsls	r0, r2, #31
 80086cc:	d502      	bpl.n	80086d4 <_printf_float+0x194>
 80086ce:	3301      	adds	r3, #1
 80086d0:	440b      	add	r3, r1
 80086d2:	6123      	str	r3, [r4, #16]
 80086d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80086d6:	f04f 0900 	mov.w	r9, #0
 80086da:	e7db      	b.n	8008694 <_printf_float+0x154>
 80086dc:	b913      	cbnz	r3, 80086e4 <_printf_float+0x1a4>
 80086de:	6822      	ldr	r2, [r4, #0]
 80086e0:	07d2      	lsls	r2, r2, #31
 80086e2:	d501      	bpl.n	80086e8 <_printf_float+0x1a8>
 80086e4:	3302      	adds	r3, #2
 80086e6:	e7f4      	b.n	80086d2 <_printf_float+0x192>
 80086e8:	2301      	movs	r3, #1
 80086ea:	e7f2      	b.n	80086d2 <_printf_float+0x192>
 80086ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80086f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086f2:	4299      	cmp	r1, r3
 80086f4:	db05      	blt.n	8008702 <_printf_float+0x1c2>
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	6121      	str	r1, [r4, #16]
 80086fa:	07d8      	lsls	r0, r3, #31
 80086fc:	d5ea      	bpl.n	80086d4 <_printf_float+0x194>
 80086fe:	1c4b      	adds	r3, r1, #1
 8008700:	e7e7      	b.n	80086d2 <_printf_float+0x192>
 8008702:	2900      	cmp	r1, #0
 8008704:	bfd4      	ite	le
 8008706:	f1c1 0202 	rsble	r2, r1, #2
 800870a:	2201      	movgt	r2, #1
 800870c:	4413      	add	r3, r2
 800870e:	e7e0      	b.n	80086d2 <_printf_float+0x192>
 8008710:	6823      	ldr	r3, [r4, #0]
 8008712:	055a      	lsls	r2, r3, #21
 8008714:	d407      	bmi.n	8008726 <_printf_float+0x1e6>
 8008716:	6923      	ldr	r3, [r4, #16]
 8008718:	4642      	mov	r2, r8
 800871a:	4631      	mov	r1, r6
 800871c:	4628      	mov	r0, r5
 800871e:	47b8      	blx	r7
 8008720:	3001      	adds	r0, #1
 8008722:	d12b      	bne.n	800877c <_printf_float+0x23c>
 8008724:	e767      	b.n	80085f6 <_printf_float+0xb6>
 8008726:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800872a:	f240 80dd 	bls.w	80088e8 <_printf_float+0x3a8>
 800872e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008732:	2200      	movs	r2, #0
 8008734:	2300      	movs	r3, #0
 8008736:	f7f8 f9cf 	bl	8000ad8 <__aeabi_dcmpeq>
 800873a:	2800      	cmp	r0, #0
 800873c:	d033      	beq.n	80087a6 <_printf_float+0x266>
 800873e:	4a37      	ldr	r2, [pc, #220]	@ (800881c <_printf_float+0x2dc>)
 8008740:	2301      	movs	r3, #1
 8008742:	4631      	mov	r1, r6
 8008744:	4628      	mov	r0, r5
 8008746:	47b8      	blx	r7
 8008748:	3001      	adds	r0, #1
 800874a:	f43f af54 	beq.w	80085f6 <_printf_float+0xb6>
 800874e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008752:	4543      	cmp	r3, r8
 8008754:	db02      	blt.n	800875c <_printf_float+0x21c>
 8008756:	6823      	ldr	r3, [r4, #0]
 8008758:	07d8      	lsls	r0, r3, #31
 800875a:	d50f      	bpl.n	800877c <_printf_float+0x23c>
 800875c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008760:	4631      	mov	r1, r6
 8008762:	4628      	mov	r0, r5
 8008764:	47b8      	blx	r7
 8008766:	3001      	adds	r0, #1
 8008768:	f43f af45 	beq.w	80085f6 <_printf_float+0xb6>
 800876c:	f04f 0900 	mov.w	r9, #0
 8008770:	f108 38ff 	add.w	r8, r8, #4294967295
 8008774:	f104 0a1a 	add.w	sl, r4, #26
 8008778:	45c8      	cmp	r8, r9
 800877a:	dc09      	bgt.n	8008790 <_printf_float+0x250>
 800877c:	6823      	ldr	r3, [r4, #0]
 800877e:	079b      	lsls	r3, r3, #30
 8008780:	f100 8103 	bmi.w	800898a <_printf_float+0x44a>
 8008784:	68e0      	ldr	r0, [r4, #12]
 8008786:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008788:	4298      	cmp	r0, r3
 800878a:	bfb8      	it	lt
 800878c:	4618      	movlt	r0, r3
 800878e:	e734      	b.n	80085fa <_printf_float+0xba>
 8008790:	2301      	movs	r3, #1
 8008792:	4652      	mov	r2, sl
 8008794:	4631      	mov	r1, r6
 8008796:	4628      	mov	r0, r5
 8008798:	47b8      	blx	r7
 800879a:	3001      	adds	r0, #1
 800879c:	f43f af2b 	beq.w	80085f6 <_printf_float+0xb6>
 80087a0:	f109 0901 	add.w	r9, r9, #1
 80087a4:	e7e8      	b.n	8008778 <_printf_float+0x238>
 80087a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	dc39      	bgt.n	8008820 <_printf_float+0x2e0>
 80087ac:	4a1b      	ldr	r2, [pc, #108]	@ (800881c <_printf_float+0x2dc>)
 80087ae:	2301      	movs	r3, #1
 80087b0:	4631      	mov	r1, r6
 80087b2:	4628      	mov	r0, r5
 80087b4:	47b8      	blx	r7
 80087b6:	3001      	adds	r0, #1
 80087b8:	f43f af1d 	beq.w	80085f6 <_printf_float+0xb6>
 80087bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80087c0:	ea59 0303 	orrs.w	r3, r9, r3
 80087c4:	d102      	bne.n	80087cc <_printf_float+0x28c>
 80087c6:	6823      	ldr	r3, [r4, #0]
 80087c8:	07d9      	lsls	r1, r3, #31
 80087ca:	d5d7      	bpl.n	800877c <_printf_float+0x23c>
 80087cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087d0:	4631      	mov	r1, r6
 80087d2:	4628      	mov	r0, r5
 80087d4:	47b8      	blx	r7
 80087d6:	3001      	adds	r0, #1
 80087d8:	f43f af0d 	beq.w	80085f6 <_printf_float+0xb6>
 80087dc:	f04f 0a00 	mov.w	sl, #0
 80087e0:	f104 0b1a 	add.w	fp, r4, #26
 80087e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087e6:	425b      	negs	r3, r3
 80087e8:	4553      	cmp	r3, sl
 80087ea:	dc01      	bgt.n	80087f0 <_printf_float+0x2b0>
 80087ec:	464b      	mov	r3, r9
 80087ee:	e793      	b.n	8008718 <_printf_float+0x1d8>
 80087f0:	2301      	movs	r3, #1
 80087f2:	465a      	mov	r2, fp
 80087f4:	4631      	mov	r1, r6
 80087f6:	4628      	mov	r0, r5
 80087f8:	47b8      	blx	r7
 80087fa:	3001      	adds	r0, #1
 80087fc:	f43f aefb 	beq.w	80085f6 <_printf_float+0xb6>
 8008800:	f10a 0a01 	add.w	sl, sl, #1
 8008804:	e7ee      	b.n	80087e4 <_printf_float+0x2a4>
 8008806:	bf00      	nop
 8008808:	7fefffff 	.word	0x7fefffff
 800880c:	0800b124 	.word	0x0800b124
 8008810:	0800b128 	.word	0x0800b128
 8008814:	0800b12c 	.word	0x0800b12c
 8008818:	0800b130 	.word	0x0800b130
 800881c:	0800b134 	.word	0x0800b134
 8008820:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008822:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008826:	4553      	cmp	r3, sl
 8008828:	bfa8      	it	ge
 800882a:	4653      	movge	r3, sl
 800882c:	2b00      	cmp	r3, #0
 800882e:	4699      	mov	r9, r3
 8008830:	dc36      	bgt.n	80088a0 <_printf_float+0x360>
 8008832:	f04f 0b00 	mov.w	fp, #0
 8008836:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800883a:	f104 021a 	add.w	r2, r4, #26
 800883e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008840:	9306      	str	r3, [sp, #24]
 8008842:	eba3 0309 	sub.w	r3, r3, r9
 8008846:	455b      	cmp	r3, fp
 8008848:	dc31      	bgt.n	80088ae <_printf_float+0x36e>
 800884a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800884c:	459a      	cmp	sl, r3
 800884e:	dc3a      	bgt.n	80088c6 <_printf_float+0x386>
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	07da      	lsls	r2, r3, #31
 8008854:	d437      	bmi.n	80088c6 <_printf_float+0x386>
 8008856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008858:	ebaa 0903 	sub.w	r9, sl, r3
 800885c:	9b06      	ldr	r3, [sp, #24]
 800885e:	ebaa 0303 	sub.w	r3, sl, r3
 8008862:	4599      	cmp	r9, r3
 8008864:	bfa8      	it	ge
 8008866:	4699      	movge	r9, r3
 8008868:	f1b9 0f00 	cmp.w	r9, #0
 800886c:	dc33      	bgt.n	80088d6 <_printf_float+0x396>
 800886e:	f04f 0800 	mov.w	r8, #0
 8008872:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008876:	f104 0b1a 	add.w	fp, r4, #26
 800887a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800887c:	ebaa 0303 	sub.w	r3, sl, r3
 8008880:	eba3 0309 	sub.w	r3, r3, r9
 8008884:	4543      	cmp	r3, r8
 8008886:	f77f af79 	ble.w	800877c <_printf_float+0x23c>
 800888a:	2301      	movs	r3, #1
 800888c:	465a      	mov	r2, fp
 800888e:	4631      	mov	r1, r6
 8008890:	4628      	mov	r0, r5
 8008892:	47b8      	blx	r7
 8008894:	3001      	adds	r0, #1
 8008896:	f43f aeae 	beq.w	80085f6 <_printf_float+0xb6>
 800889a:	f108 0801 	add.w	r8, r8, #1
 800889e:	e7ec      	b.n	800887a <_printf_float+0x33a>
 80088a0:	4642      	mov	r2, r8
 80088a2:	4631      	mov	r1, r6
 80088a4:	4628      	mov	r0, r5
 80088a6:	47b8      	blx	r7
 80088a8:	3001      	adds	r0, #1
 80088aa:	d1c2      	bne.n	8008832 <_printf_float+0x2f2>
 80088ac:	e6a3      	b.n	80085f6 <_printf_float+0xb6>
 80088ae:	2301      	movs	r3, #1
 80088b0:	4631      	mov	r1, r6
 80088b2:	4628      	mov	r0, r5
 80088b4:	9206      	str	r2, [sp, #24]
 80088b6:	47b8      	blx	r7
 80088b8:	3001      	adds	r0, #1
 80088ba:	f43f ae9c 	beq.w	80085f6 <_printf_float+0xb6>
 80088be:	9a06      	ldr	r2, [sp, #24]
 80088c0:	f10b 0b01 	add.w	fp, fp, #1
 80088c4:	e7bb      	b.n	800883e <_printf_float+0x2fe>
 80088c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088ca:	4631      	mov	r1, r6
 80088cc:	4628      	mov	r0, r5
 80088ce:	47b8      	blx	r7
 80088d0:	3001      	adds	r0, #1
 80088d2:	d1c0      	bne.n	8008856 <_printf_float+0x316>
 80088d4:	e68f      	b.n	80085f6 <_printf_float+0xb6>
 80088d6:	9a06      	ldr	r2, [sp, #24]
 80088d8:	464b      	mov	r3, r9
 80088da:	4442      	add	r2, r8
 80088dc:	4631      	mov	r1, r6
 80088de:	4628      	mov	r0, r5
 80088e0:	47b8      	blx	r7
 80088e2:	3001      	adds	r0, #1
 80088e4:	d1c3      	bne.n	800886e <_printf_float+0x32e>
 80088e6:	e686      	b.n	80085f6 <_printf_float+0xb6>
 80088e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80088ec:	f1ba 0f01 	cmp.w	sl, #1
 80088f0:	dc01      	bgt.n	80088f6 <_printf_float+0x3b6>
 80088f2:	07db      	lsls	r3, r3, #31
 80088f4:	d536      	bpl.n	8008964 <_printf_float+0x424>
 80088f6:	2301      	movs	r3, #1
 80088f8:	4642      	mov	r2, r8
 80088fa:	4631      	mov	r1, r6
 80088fc:	4628      	mov	r0, r5
 80088fe:	47b8      	blx	r7
 8008900:	3001      	adds	r0, #1
 8008902:	f43f ae78 	beq.w	80085f6 <_printf_float+0xb6>
 8008906:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800890a:	4631      	mov	r1, r6
 800890c:	4628      	mov	r0, r5
 800890e:	47b8      	blx	r7
 8008910:	3001      	adds	r0, #1
 8008912:	f43f ae70 	beq.w	80085f6 <_printf_float+0xb6>
 8008916:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800891a:	2200      	movs	r2, #0
 800891c:	2300      	movs	r3, #0
 800891e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008922:	f7f8 f8d9 	bl	8000ad8 <__aeabi_dcmpeq>
 8008926:	b9c0      	cbnz	r0, 800895a <_printf_float+0x41a>
 8008928:	4653      	mov	r3, sl
 800892a:	f108 0201 	add.w	r2, r8, #1
 800892e:	4631      	mov	r1, r6
 8008930:	4628      	mov	r0, r5
 8008932:	47b8      	blx	r7
 8008934:	3001      	adds	r0, #1
 8008936:	d10c      	bne.n	8008952 <_printf_float+0x412>
 8008938:	e65d      	b.n	80085f6 <_printf_float+0xb6>
 800893a:	2301      	movs	r3, #1
 800893c:	465a      	mov	r2, fp
 800893e:	4631      	mov	r1, r6
 8008940:	4628      	mov	r0, r5
 8008942:	47b8      	blx	r7
 8008944:	3001      	adds	r0, #1
 8008946:	f43f ae56 	beq.w	80085f6 <_printf_float+0xb6>
 800894a:	f108 0801 	add.w	r8, r8, #1
 800894e:	45d0      	cmp	r8, sl
 8008950:	dbf3      	blt.n	800893a <_printf_float+0x3fa>
 8008952:	464b      	mov	r3, r9
 8008954:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008958:	e6df      	b.n	800871a <_printf_float+0x1da>
 800895a:	f04f 0800 	mov.w	r8, #0
 800895e:	f104 0b1a 	add.w	fp, r4, #26
 8008962:	e7f4      	b.n	800894e <_printf_float+0x40e>
 8008964:	2301      	movs	r3, #1
 8008966:	4642      	mov	r2, r8
 8008968:	e7e1      	b.n	800892e <_printf_float+0x3ee>
 800896a:	2301      	movs	r3, #1
 800896c:	464a      	mov	r2, r9
 800896e:	4631      	mov	r1, r6
 8008970:	4628      	mov	r0, r5
 8008972:	47b8      	blx	r7
 8008974:	3001      	adds	r0, #1
 8008976:	f43f ae3e 	beq.w	80085f6 <_printf_float+0xb6>
 800897a:	f108 0801 	add.w	r8, r8, #1
 800897e:	68e3      	ldr	r3, [r4, #12]
 8008980:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008982:	1a5b      	subs	r3, r3, r1
 8008984:	4543      	cmp	r3, r8
 8008986:	dcf0      	bgt.n	800896a <_printf_float+0x42a>
 8008988:	e6fc      	b.n	8008784 <_printf_float+0x244>
 800898a:	f04f 0800 	mov.w	r8, #0
 800898e:	f104 0919 	add.w	r9, r4, #25
 8008992:	e7f4      	b.n	800897e <_printf_float+0x43e>

08008994 <_printf_common>:
 8008994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008998:	4616      	mov	r6, r2
 800899a:	4698      	mov	r8, r3
 800899c:	688a      	ldr	r2, [r1, #8]
 800899e:	690b      	ldr	r3, [r1, #16]
 80089a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80089a4:	4293      	cmp	r3, r2
 80089a6:	bfb8      	it	lt
 80089a8:	4613      	movlt	r3, r2
 80089aa:	6033      	str	r3, [r6, #0]
 80089ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80089b0:	4607      	mov	r7, r0
 80089b2:	460c      	mov	r4, r1
 80089b4:	b10a      	cbz	r2, 80089ba <_printf_common+0x26>
 80089b6:	3301      	adds	r3, #1
 80089b8:	6033      	str	r3, [r6, #0]
 80089ba:	6823      	ldr	r3, [r4, #0]
 80089bc:	0699      	lsls	r1, r3, #26
 80089be:	bf42      	ittt	mi
 80089c0:	6833      	ldrmi	r3, [r6, #0]
 80089c2:	3302      	addmi	r3, #2
 80089c4:	6033      	strmi	r3, [r6, #0]
 80089c6:	6825      	ldr	r5, [r4, #0]
 80089c8:	f015 0506 	ands.w	r5, r5, #6
 80089cc:	d106      	bne.n	80089dc <_printf_common+0x48>
 80089ce:	f104 0a19 	add.w	sl, r4, #25
 80089d2:	68e3      	ldr	r3, [r4, #12]
 80089d4:	6832      	ldr	r2, [r6, #0]
 80089d6:	1a9b      	subs	r3, r3, r2
 80089d8:	42ab      	cmp	r3, r5
 80089da:	dc26      	bgt.n	8008a2a <_printf_common+0x96>
 80089dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80089e0:	6822      	ldr	r2, [r4, #0]
 80089e2:	3b00      	subs	r3, #0
 80089e4:	bf18      	it	ne
 80089e6:	2301      	movne	r3, #1
 80089e8:	0692      	lsls	r2, r2, #26
 80089ea:	d42b      	bmi.n	8008a44 <_printf_common+0xb0>
 80089ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80089f0:	4641      	mov	r1, r8
 80089f2:	4638      	mov	r0, r7
 80089f4:	47c8      	blx	r9
 80089f6:	3001      	adds	r0, #1
 80089f8:	d01e      	beq.n	8008a38 <_printf_common+0xa4>
 80089fa:	6823      	ldr	r3, [r4, #0]
 80089fc:	6922      	ldr	r2, [r4, #16]
 80089fe:	f003 0306 	and.w	r3, r3, #6
 8008a02:	2b04      	cmp	r3, #4
 8008a04:	bf02      	ittt	eq
 8008a06:	68e5      	ldreq	r5, [r4, #12]
 8008a08:	6833      	ldreq	r3, [r6, #0]
 8008a0a:	1aed      	subeq	r5, r5, r3
 8008a0c:	68a3      	ldr	r3, [r4, #8]
 8008a0e:	bf0c      	ite	eq
 8008a10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a14:	2500      	movne	r5, #0
 8008a16:	4293      	cmp	r3, r2
 8008a18:	bfc4      	itt	gt
 8008a1a:	1a9b      	subgt	r3, r3, r2
 8008a1c:	18ed      	addgt	r5, r5, r3
 8008a1e:	2600      	movs	r6, #0
 8008a20:	341a      	adds	r4, #26
 8008a22:	42b5      	cmp	r5, r6
 8008a24:	d11a      	bne.n	8008a5c <_printf_common+0xc8>
 8008a26:	2000      	movs	r0, #0
 8008a28:	e008      	b.n	8008a3c <_printf_common+0xa8>
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	4652      	mov	r2, sl
 8008a2e:	4641      	mov	r1, r8
 8008a30:	4638      	mov	r0, r7
 8008a32:	47c8      	blx	r9
 8008a34:	3001      	adds	r0, #1
 8008a36:	d103      	bne.n	8008a40 <_printf_common+0xac>
 8008a38:	f04f 30ff 	mov.w	r0, #4294967295
 8008a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a40:	3501      	adds	r5, #1
 8008a42:	e7c6      	b.n	80089d2 <_printf_common+0x3e>
 8008a44:	18e1      	adds	r1, r4, r3
 8008a46:	1c5a      	adds	r2, r3, #1
 8008a48:	2030      	movs	r0, #48	@ 0x30
 8008a4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a4e:	4422      	add	r2, r4
 8008a50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a58:	3302      	adds	r3, #2
 8008a5a:	e7c7      	b.n	80089ec <_printf_common+0x58>
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	4622      	mov	r2, r4
 8008a60:	4641      	mov	r1, r8
 8008a62:	4638      	mov	r0, r7
 8008a64:	47c8      	blx	r9
 8008a66:	3001      	adds	r0, #1
 8008a68:	d0e6      	beq.n	8008a38 <_printf_common+0xa4>
 8008a6a:	3601      	adds	r6, #1
 8008a6c:	e7d9      	b.n	8008a22 <_printf_common+0x8e>
	...

08008a70 <_printf_i>:
 8008a70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a74:	7e0f      	ldrb	r7, [r1, #24]
 8008a76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a78:	2f78      	cmp	r7, #120	@ 0x78
 8008a7a:	4691      	mov	r9, r2
 8008a7c:	4680      	mov	r8, r0
 8008a7e:	460c      	mov	r4, r1
 8008a80:	469a      	mov	sl, r3
 8008a82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a86:	d807      	bhi.n	8008a98 <_printf_i+0x28>
 8008a88:	2f62      	cmp	r7, #98	@ 0x62
 8008a8a:	d80a      	bhi.n	8008aa2 <_printf_i+0x32>
 8008a8c:	2f00      	cmp	r7, #0
 8008a8e:	f000 80d2 	beq.w	8008c36 <_printf_i+0x1c6>
 8008a92:	2f58      	cmp	r7, #88	@ 0x58
 8008a94:	f000 80b9 	beq.w	8008c0a <_printf_i+0x19a>
 8008a98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008aa0:	e03a      	b.n	8008b18 <_printf_i+0xa8>
 8008aa2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008aa6:	2b15      	cmp	r3, #21
 8008aa8:	d8f6      	bhi.n	8008a98 <_printf_i+0x28>
 8008aaa:	a101      	add	r1, pc, #4	@ (adr r1, 8008ab0 <_printf_i+0x40>)
 8008aac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ab0:	08008b09 	.word	0x08008b09
 8008ab4:	08008b1d 	.word	0x08008b1d
 8008ab8:	08008a99 	.word	0x08008a99
 8008abc:	08008a99 	.word	0x08008a99
 8008ac0:	08008a99 	.word	0x08008a99
 8008ac4:	08008a99 	.word	0x08008a99
 8008ac8:	08008b1d 	.word	0x08008b1d
 8008acc:	08008a99 	.word	0x08008a99
 8008ad0:	08008a99 	.word	0x08008a99
 8008ad4:	08008a99 	.word	0x08008a99
 8008ad8:	08008a99 	.word	0x08008a99
 8008adc:	08008c1d 	.word	0x08008c1d
 8008ae0:	08008b47 	.word	0x08008b47
 8008ae4:	08008bd7 	.word	0x08008bd7
 8008ae8:	08008a99 	.word	0x08008a99
 8008aec:	08008a99 	.word	0x08008a99
 8008af0:	08008c3f 	.word	0x08008c3f
 8008af4:	08008a99 	.word	0x08008a99
 8008af8:	08008b47 	.word	0x08008b47
 8008afc:	08008a99 	.word	0x08008a99
 8008b00:	08008a99 	.word	0x08008a99
 8008b04:	08008bdf 	.word	0x08008bdf
 8008b08:	6833      	ldr	r3, [r6, #0]
 8008b0a:	1d1a      	adds	r2, r3, #4
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	6032      	str	r2, [r6, #0]
 8008b10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e09d      	b.n	8008c58 <_printf_i+0x1e8>
 8008b1c:	6833      	ldr	r3, [r6, #0]
 8008b1e:	6820      	ldr	r0, [r4, #0]
 8008b20:	1d19      	adds	r1, r3, #4
 8008b22:	6031      	str	r1, [r6, #0]
 8008b24:	0606      	lsls	r6, r0, #24
 8008b26:	d501      	bpl.n	8008b2c <_printf_i+0xbc>
 8008b28:	681d      	ldr	r5, [r3, #0]
 8008b2a:	e003      	b.n	8008b34 <_printf_i+0xc4>
 8008b2c:	0645      	lsls	r5, r0, #25
 8008b2e:	d5fb      	bpl.n	8008b28 <_printf_i+0xb8>
 8008b30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b34:	2d00      	cmp	r5, #0
 8008b36:	da03      	bge.n	8008b40 <_printf_i+0xd0>
 8008b38:	232d      	movs	r3, #45	@ 0x2d
 8008b3a:	426d      	negs	r5, r5
 8008b3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b40:	4859      	ldr	r0, [pc, #356]	@ (8008ca8 <_printf_i+0x238>)
 8008b42:	230a      	movs	r3, #10
 8008b44:	e011      	b.n	8008b6a <_printf_i+0xfa>
 8008b46:	6821      	ldr	r1, [r4, #0]
 8008b48:	6833      	ldr	r3, [r6, #0]
 8008b4a:	0608      	lsls	r0, r1, #24
 8008b4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b50:	d402      	bmi.n	8008b58 <_printf_i+0xe8>
 8008b52:	0649      	lsls	r1, r1, #25
 8008b54:	bf48      	it	mi
 8008b56:	b2ad      	uxthmi	r5, r5
 8008b58:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b5a:	4853      	ldr	r0, [pc, #332]	@ (8008ca8 <_printf_i+0x238>)
 8008b5c:	6033      	str	r3, [r6, #0]
 8008b5e:	bf14      	ite	ne
 8008b60:	230a      	movne	r3, #10
 8008b62:	2308      	moveq	r3, #8
 8008b64:	2100      	movs	r1, #0
 8008b66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b6a:	6866      	ldr	r6, [r4, #4]
 8008b6c:	60a6      	str	r6, [r4, #8]
 8008b6e:	2e00      	cmp	r6, #0
 8008b70:	bfa2      	ittt	ge
 8008b72:	6821      	ldrge	r1, [r4, #0]
 8008b74:	f021 0104 	bicge.w	r1, r1, #4
 8008b78:	6021      	strge	r1, [r4, #0]
 8008b7a:	b90d      	cbnz	r5, 8008b80 <_printf_i+0x110>
 8008b7c:	2e00      	cmp	r6, #0
 8008b7e:	d04b      	beq.n	8008c18 <_printf_i+0x1a8>
 8008b80:	4616      	mov	r6, r2
 8008b82:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b86:	fb03 5711 	mls	r7, r3, r1, r5
 8008b8a:	5dc7      	ldrb	r7, [r0, r7]
 8008b8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b90:	462f      	mov	r7, r5
 8008b92:	42bb      	cmp	r3, r7
 8008b94:	460d      	mov	r5, r1
 8008b96:	d9f4      	bls.n	8008b82 <_printf_i+0x112>
 8008b98:	2b08      	cmp	r3, #8
 8008b9a:	d10b      	bne.n	8008bb4 <_printf_i+0x144>
 8008b9c:	6823      	ldr	r3, [r4, #0]
 8008b9e:	07df      	lsls	r7, r3, #31
 8008ba0:	d508      	bpl.n	8008bb4 <_printf_i+0x144>
 8008ba2:	6923      	ldr	r3, [r4, #16]
 8008ba4:	6861      	ldr	r1, [r4, #4]
 8008ba6:	4299      	cmp	r1, r3
 8008ba8:	bfde      	ittt	le
 8008baa:	2330      	movle	r3, #48	@ 0x30
 8008bac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008bb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008bb4:	1b92      	subs	r2, r2, r6
 8008bb6:	6122      	str	r2, [r4, #16]
 8008bb8:	f8cd a000 	str.w	sl, [sp]
 8008bbc:	464b      	mov	r3, r9
 8008bbe:	aa03      	add	r2, sp, #12
 8008bc0:	4621      	mov	r1, r4
 8008bc2:	4640      	mov	r0, r8
 8008bc4:	f7ff fee6 	bl	8008994 <_printf_common>
 8008bc8:	3001      	adds	r0, #1
 8008bca:	d14a      	bne.n	8008c62 <_printf_i+0x1f2>
 8008bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd0:	b004      	add	sp, #16
 8008bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	f043 0320 	orr.w	r3, r3, #32
 8008bdc:	6023      	str	r3, [r4, #0]
 8008bde:	4833      	ldr	r0, [pc, #204]	@ (8008cac <_printf_i+0x23c>)
 8008be0:	2778      	movs	r7, #120	@ 0x78
 8008be2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008be6:	6823      	ldr	r3, [r4, #0]
 8008be8:	6831      	ldr	r1, [r6, #0]
 8008bea:	061f      	lsls	r7, r3, #24
 8008bec:	f851 5b04 	ldr.w	r5, [r1], #4
 8008bf0:	d402      	bmi.n	8008bf8 <_printf_i+0x188>
 8008bf2:	065f      	lsls	r7, r3, #25
 8008bf4:	bf48      	it	mi
 8008bf6:	b2ad      	uxthmi	r5, r5
 8008bf8:	6031      	str	r1, [r6, #0]
 8008bfa:	07d9      	lsls	r1, r3, #31
 8008bfc:	bf44      	itt	mi
 8008bfe:	f043 0320 	orrmi.w	r3, r3, #32
 8008c02:	6023      	strmi	r3, [r4, #0]
 8008c04:	b11d      	cbz	r5, 8008c0e <_printf_i+0x19e>
 8008c06:	2310      	movs	r3, #16
 8008c08:	e7ac      	b.n	8008b64 <_printf_i+0xf4>
 8008c0a:	4827      	ldr	r0, [pc, #156]	@ (8008ca8 <_printf_i+0x238>)
 8008c0c:	e7e9      	b.n	8008be2 <_printf_i+0x172>
 8008c0e:	6823      	ldr	r3, [r4, #0]
 8008c10:	f023 0320 	bic.w	r3, r3, #32
 8008c14:	6023      	str	r3, [r4, #0]
 8008c16:	e7f6      	b.n	8008c06 <_printf_i+0x196>
 8008c18:	4616      	mov	r6, r2
 8008c1a:	e7bd      	b.n	8008b98 <_printf_i+0x128>
 8008c1c:	6833      	ldr	r3, [r6, #0]
 8008c1e:	6825      	ldr	r5, [r4, #0]
 8008c20:	6961      	ldr	r1, [r4, #20]
 8008c22:	1d18      	adds	r0, r3, #4
 8008c24:	6030      	str	r0, [r6, #0]
 8008c26:	062e      	lsls	r6, r5, #24
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	d501      	bpl.n	8008c30 <_printf_i+0x1c0>
 8008c2c:	6019      	str	r1, [r3, #0]
 8008c2e:	e002      	b.n	8008c36 <_printf_i+0x1c6>
 8008c30:	0668      	lsls	r0, r5, #25
 8008c32:	d5fb      	bpl.n	8008c2c <_printf_i+0x1bc>
 8008c34:	8019      	strh	r1, [r3, #0]
 8008c36:	2300      	movs	r3, #0
 8008c38:	6123      	str	r3, [r4, #16]
 8008c3a:	4616      	mov	r6, r2
 8008c3c:	e7bc      	b.n	8008bb8 <_printf_i+0x148>
 8008c3e:	6833      	ldr	r3, [r6, #0]
 8008c40:	1d1a      	adds	r2, r3, #4
 8008c42:	6032      	str	r2, [r6, #0]
 8008c44:	681e      	ldr	r6, [r3, #0]
 8008c46:	6862      	ldr	r2, [r4, #4]
 8008c48:	2100      	movs	r1, #0
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	f7f7 fac8 	bl	80001e0 <memchr>
 8008c50:	b108      	cbz	r0, 8008c56 <_printf_i+0x1e6>
 8008c52:	1b80      	subs	r0, r0, r6
 8008c54:	6060      	str	r0, [r4, #4]
 8008c56:	6863      	ldr	r3, [r4, #4]
 8008c58:	6123      	str	r3, [r4, #16]
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c60:	e7aa      	b.n	8008bb8 <_printf_i+0x148>
 8008c62:	6923      	ldr	r3, [r4, #16]
 8008c64:	4632      	mov	r2, r6
 8008c66:	4649      	mov	r1, r9
 8008c68:	4640      	mov	r0, r8
 8008c6a:	47d0      	blx	sl
 8008c6c:	3001      	adds	r0, #1
 8008c6e:	d0ad      	beq.n	8008bcc <_printf_i+0x15c>
 8008c70:	6823      	ldr	r3, [r4, #0]
 8008c72:	079b      	lsls	r3, r3, #30
 8008c74:	d413      	bmi.n	8008c9e <_printf_i+0x22e>
 8008c76:	68e0      	ldr	r0, [r4, #12]
 8008c78:	9b03      	ldr	r3, [sp, #12]
 8008c7a:	4298      	cmp	r0, r3
 8008c7c:	bfb8      	it	lt
 8008c7e:	4618      	movlt	r0, r3
 8008c80:	e7a6      	b.n	8008bd0 <_printf_i+0x160>
 8008c82:	2301      	movs	r3, #1
 8008c84:	4632      	mov	r2, r6
 8008c86:	4649      	mov	r1, r9
 8008c88:	4640      	mov	r0, r8
 8008c8a:	47d0      	blx	sl
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	d09d      	beq.n	8008bcc <_printf_i+0x15c>
 8008c90:	3501      	adds	r5, #1
 8008c92:	68e3      	ldr	r3, [r4, #12]
 8008c94:	9903      	ldr	r1, [sp, #12]
 8008c96:	1a5b      	subs	r3, r3, r1
 8008c98:	42ab      	cmp	r3, r5
 8008c9a:	dcf2      	bgt.n	8008c82 <_printf_i+0x212>
 8008c9c:	e7eb      	b.n	8008c76 <_printf_i+0x206>
 8008c9e:	2500      	movs	r5, #0
 8008ca0:	f104 0619 	add.w	r6, r4, #25
 8008ca4:	e7f5      	b.n	8008c92 <_printf_i+0x222>
 8008ca6:	bf00      	nop
 8008ca8:	0800b136 	.word	0x0800b136
 8008cac:	0800b147 	.word	0x0800b147

08008cb0 <std>:
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	b510      	push	{r4, lr}
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8008cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008cbe:	6083      	str	r3, [r0, #8]
 8008cc0:	8181      	strh	r1, [r0, #12]
 8008cc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8008cc4:	81c2      	strh	r2, [r0, #14]
 8008cc6:	6183      	str	r3, [r0, #24]
 8008cc8:	4619      	mov	r1, r3
 8008cca:	2208      	movs	r2, #8
 8008ccc:	305c      	adds	r0, #92	@ 0x5c
 8008cce:	f000 f928 	bl	8008f22 <memset>
 8008cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8008d08 <std+0x58>)
 8008cd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8008cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8008d0c <std+0x5c>)
 8008cd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008cda:	4b0d      	ldr	r3, [pc, #52]	@ (8008d10 <std+0x60>)
 8008cdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008cde:	4b0d      	ldr	r3, [pc, #52]	@ (8008d14 <std+0x64>)
 8008ce0:	6323      	str	r3, [r4, #48]	@ 0x30
 8008ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8008d18 <std+0x68>)
 8008ce4:	6224      	str	r4, [r4, #32]
 8008ce6:	429c      	cmp	r4, r3
 8008ce8:	d006      	beq.n	8008cf8 <std+0x48>
 8008cea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008cee:	4294      	cmp	r4, r2
 8008cf0:	d002      	beq.n	8008cf8 <std+0x48>
 8008cf2:	33d0      	adds	r3, #208	@ 0xd0
 8008cf4:	429c      	cmp	r4, r3
 8008cf6:	d105      	bne.n	8008d04 <std+0x54>
 8008cf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d00:	f000 b98c 	b.w	800901c <__retarget_lock_init_recursive>
 8008d04:	bd10      	pop	{r4, pc}
 8008d06:	bf00      	nop
 8008d08:	08008e9d 	.word	0x08008e9d
 8008d0c:	08008ebf 	.word	0x08008ebf
 8008d10:	08008ef7 	.word	0x08008ef7
 8008d14:	08008f1b 	.word	0x08008f1b
 8008d18:	200005e4 	.word	0x200005e4

08008d1c <stdio_exit_handler>:
 8008d1c:	4a02      	ldr	r2, [pc, #8]	@ (8008d28 <stdio_exit_handler+0xc>)
 8008d1e:	4903      	ldr	r1, [pc, #12]	@ (8008d2c <stdio_exit_handler+0x10>)
 8008d20:	4803      	ldr	r0, [pc, #12]	@ (8008d30 <stdio_exit_handler+0x14>)
 8008d22:	f000 b869 	b.w	8008df8 <_fwalk_sglue>
 8008d26:	bf00      	nop
 8008d28:	20000038 	.word	0x20000038
 8008d2c:	0800a97d 	.word	0x0800a97d
 8008d30:	20000048 	.word	0x20000048

08008d34 <cleanup_stdio>:
 8008d34:	6841      	ldr	r1, [r0, #4]
 8008d36:	4b0c      	ldr	r3, [pc, #48]	@ (8008d68 <cleanup_stdio+0x34>)
 8008d38:	4299      	cmp	r1, r3
 8008d3a:	b510      	push	{r4, lr}
 8008d3c:	4604      	mov	r4, r0
 8008d3e:	d001      	beq.n	8008d44 <cleanup_stdio+0x10>
 8008d40:	f001 fe1c 	bl	800a97c <_fflush_r>
 8008d44:	68a1      	ldr	r1, [r4, #8]
 8008d46:	4b09      	ldr	r3, [pc, #36]	@ (8008d6c <cleanup_stdio+0x38>)
 8008d48:	4299      	cmp	r1, r3
 8008d4a:	d002      	beq.n	8008d52 <cleanup_stdio+0x1e>
 8008d4c:	4620      	mov	r0, r4
 8008d4e:	f001 fe15 	bl	800a97c <_fflush_r>
 8008d52:	68e1      	ldr	r1, [r4, #12]
 8008d54:	4b06      	ldr	r3, [pc, #24]	@ (8008d70 <cleanup_stdio+0x3c>)
 8008d56:	4299      	cmp	r1, r3
 8008d58:	d004      	beq.n	8008d64 <cleanup_stdio+0x30>
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d60:	f001 be0c 	b.w	800a97c <_fflush_r>
 8008d64:	bd10      	pop	{r4, pc}
 8008d66:	bf00      	nop
 8008d68:	200005e4 	.word	0x200005e4
 8008d6c:	2000064c 	.word	0x2000064c
 8008d70:	200006b4 	.word	0x200006b4

08008d74 <global_stdio_init.part.0>:
 8008d74:	b510      	push	{r4, lr}
 8008d76:	4b0b      	ldr	r3, [pc, #44]	@ (8008da4 <global_stdio_init.part.0+0x30>)
 8008d78:	4c0b      	ldr	r4, [pc, #44]	@ (8008da8 <global_stdio_init.part.0+0x34>)
 8008d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8008dac <global_stdio_init.part.0+0x38>)
 8008d7c:	601a      	str	r2, [r3, #0]
 8008d7e:	4620      	mov	r0, r4
 8008d80:	2200      	movs	r2, #0
 8008d82:	2104      	movs	r1, #4
 8008d84:	f7ff ff94 	bl	8008cb0 <std>
 8008d88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	2109      	movs	r1, #9
 8008d90:	f7ff ff8e 	bl	8008cb0 <std>
 8008d94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008d98:	2202      	movs	r2, #2
 8008d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d9e:	2112      	movs	r1, #18
 8008da0:	f7ff bf86 	b.w	8008cb0 <std>
 8008da4:	2000071c 	.word	0x2000071c
 8008da8:	200005e4 	.word	0x200005e4
 8008dac:	08008d1d 	.word	0x08008d1d

08008db0 <__sfp_lock_acquire>:
 8008db0:	4801      	ldr	r0, [pc, #4]	@ (8008db8 <__sfp_lock_acquire+0x8>)
 8008db2:	f000 b934 	b.w	800901e <__retarget_lock_acquire_recursive>
 8008db6:	bf00      	nop
 8008db8:	20000725 	.word	0x20000725

08008dbc <__sfp_lock_release>:
 8008dbc:	4801      	ldr	r0, [pc, #4]	@ (8008dc4 <__sfp_lock_release+0x8>)
 8008dbe:	f000 b92f 	b.w	8009020 <__retarget_lock_release_recursive>
 8008dc2:	bf00      	nop
 8008dc4:	20000725 	.word	0x20000725

08008dc8 <__sinit>:
 8008dc8:	b510      	push	{r4, lr}
 8008dca:	4604      	mov	r4, r0
 8008dcc:	f7ff fff0 	bl	8008db0 <__sfp_lock_acquire>
 8008dd0:	6a23      	ldr	r3, [r4, #32]
 8008dd2:	b11b      	cbz	r3, 8008ddc <__sinit+0x14>
 8008dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dd8:	f7ff bff0 	b.w	8008dbc <__sfp_lock_release>
 8008ddc:	4b04      	ldr	r3, [pc, #16]	@ (8008df0 <__sinit+0x28>)
 8008dde:	6223      	str	r3, [r4, #32]
 8008de0:	4b04      	ldr	r3, [pc, #16]	@ (8008df4 <__sinit+0x2c>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1f5      	bne.n	8008dd4 <__sinit+0xc>
 8008de8:	f7ff ffc4 	bl	8008d74 <global_stdio_init.part.0>
 8008dec:	e7f2      	b.n	8008dd4 <__sinit+0xc>
 8008dee:	bf00      	nop
 8008df0:	08008d35 	.word	0x08008d35
 8008df4:	2000071c 	.word	0x2000071c

08008df8 <_fwalk_sglue>:
 8008df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dfc:	4607      	mov	r7, r0
 8008dfe:	4688      	mov	r8, r1
 8008e00:	4614      	mov	r4, r2
 8008e02:	2600      	movs	r6, #0
 8008e04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e08:	f1b9 0901 	subs.w	r9, r9, #1
 8008e0c:	d505      	bpl.n	8008e1a <_fwalk_sglue+0x22>
 8008e0e:	6824      	ldr	r4, [r4, #0]
 8008e10:	2c00      	cmp	r4, #0
 8008e12:	d1f7      	bne.n	8008e04 <_fwalk_sglue+0xc>
 8008e14:	4630      	mov	r0, r6
 8008e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e1a:	89ab      	ldrh	r3, [r5, #12]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d907      	bls.n	8008e30 <_fwalk_sglue+0x38>
 8008e20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e24:	3301      	adds	r3, #1
 8008e26:	d003      	beq.n	8008e30 <_fwalk_sglue+0x38>
 8008e28:	4629      	mov	r1, r5
 8008e2a:	4638      	mov	r0, r7
 8008e2c:	47c0      	blx	r8
 8008e2e:	4306      	orrs	r6, r0
 8008e30:	3568      	adds	r5, #104	@ 0x68
 8008e32:	e7e9      	b.n	8008e08 <_fwalk_sglue+0x10>

08008e34 <sniprintf>:
 8008e34:	b40c      	push	{r2, r3}
 8008e36:	b530      	push	{r4, r5, lr}
 8008e38:	4b17      	ldr	r3, [pc, #92]	@ (8008e98 <sniprintf+0x64>)
 8008e3a:	1e0c      	subs	r4, r1, #0
 8008e3c:	681d      	ldr	r5, [r3, #0]
 8008e3e:	b09d      	sub	sp, #116	@ 0x74
 8008e40:	da08      	bge.n	8008e54 <sniprintf+0x20>
 8008e42:	238b      	movs	r3, #139	@ 0x8b
 8008e44:	602b      	str	r3, [r5, #0]
 8008e46:	f04f 30ff 	mov.w	r0, #4294967295
 8008e4a:	b01d      	add	sp, #116	@ 0x74
 8008e4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e50:	b002      	add	sp, #8
 8008e52:	4770      	bx	lr
 8008e54:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008e58:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008e5c:	bf14      	ite	ne
 8008e5e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008e62:	4623      	moveq	r3, r4
 8008e64:	9304      	str	r3, [sp, #16]
 8008e66:	9307      	str	r3, [sp, #28]
 8008e68:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008e6c:	9002      	str	r0, [sp, #8]
 8008e6e:	9006      	str	r0, [sp, #24]
 8008e70:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008e74:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008e76:	ab21      	add	r3, sp, #132	@ 0x84
 8008e78:	a902      	add	r1, sp, #8
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	9301      	str	r3, [sp, #4]
 8008e7e:	f001 fbfd 	bl	800a67c <_svfiprintf_r>
 8008e82:	1c43      	adds	r3, r0, #1
 8008e84:	bfbc      	itt	lt
 8008e86:	238b      	movlt	r3, #139	@ 0x8b
 8008e88:	602b      	strlt	r3, [r5, #0]
 8008e8a:	2c00      	cmp	r4, #0
 8008e8c:	d0dd      	beq.n	8008e4a <sniprintf+0x16>
 8008e8e:	9b02      	ldr	r3, [sp, #8]
 8008e90:	2200      	movs	r2, #0
 8008e92:	701a      	strb	r2, [r3, #0]
 8008e94:	e7d9      	b.n	8008e4a <sniprintf+0x16>
 8008e96:	bf00      	nop
 8008e98:	20000044 	.word	0x20000044

08008e9c <__sread>:
 8008e9c:	b510      	push	{r4, lr}
 8008e9e:	460c      	mov	r4, r1
 8008ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ea4:	f000 f86c 	bl	8008f80 <_read_r>
 8008ea8:	2800      	cmp	r0, #0
 8008eaa:	bfab      	itete	ge
 8008eac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008eae:	89a3      	ldrhlt	r3, [r4, #12]
 8008eb0:	181b      	addge	r3, r3, r0
 8008eb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008eb6:	bfac      	ite	ge
 8008eb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008eba:	81a3      	strhlt	r3, [r4, #12]
 8008ebc:	bd10      	pop	{r4, pc}

08008ebe <__swrite>:
 8008ebe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec2:	461f      	mov	r7, r3
 8008ec4:	898b      	ldrh	r3, [r1, #12]
 8008ec6:	05db      	lsls	r3, r3, #23
 8008ec8:	4605      	mov	r5, r0
 8008eca:	460c      	mov	r4, r1
 8008ecc:	4616      	mov	r6, r2
 8008ece:	d505      	bpl.n	8008edc <__swrite+0x1e>
 8008ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f000 f840 	bl	8008f5c <_lseek_r>
 8008edc:	89a3      	ldrh	r3, [r4, #12]
 8008ede:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ee2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ee6:	81a3      	strh	r3, [r4, #12]
 8008ee8:	4632      	mov	r2, r6
 8008eea:	463b      	mov	r3, r7
 8008eec:	4628      	mov	r0, r5
 8008eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef2:	f000 b857 	b.w	8008fa4 <_write_r>

08008ef6 <__sseek>:
 8008ef6:	b510      	push	{r4, lr}
 8008ef8:	460c      	mov	r4, r1
 8008efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008efe:	f000 f82d 	bl	8008f5c <_lseek_r>
 8008f02:	1c43      	adds	r3, r0, #1
 8008f04:	89a3      	ldrh	r3, [r4, #12]
 8008f06:	bf15      	itete	ne
 8008f08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008f0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008f0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008f12:	81a3      	strheq	r3, [r4, #12]
 8008f14:	bf18      	it	ne
 8008f16:	81a3      	strhne	r3, [r4, #12]
 8008f18:	bd10      	pop	{r4, pc}

08008f1a <__sclose>:
 8008f1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f1e:	f000 b80d 	b.w	8008f3c <_close_r>

08008f22 <memset>:
 8008f22:	4402      	add	r2, r0
 8008f24:	4603      	mov	r3, r0
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d100      	bne.n	8008f2c <memset+0xa>
 8008f2a:	4770      	bx	lr
 8008f2c:	f803 1b01 	strb.w	r1, [r3], #1
 8008f30:	e7f9      	b.n	8008f26 <memset+0x4>
	...

08008f34 <_localeconv_r>:
 8008f34:	4800      	ldr	r0, [pc, #0]	@ (8008f38 <_localeconv_r+0x4>)
 8008f36:	4770      	bx	lr
 8008f38:	20000184 	.word	0x20000184

08008f3c <_close_r>:
 8008f3c:	b538      	push	{r3, r4, r5, lr}
 8008f3e:	4d06      	ldr	r5, [pc, #24]	@ (8008f58 <_close_r+0x1c>)
 8008f40:	2300      	movs	r3, #0
 8008f42:	4604      	mov	r4, r0
 8008f44:	4608      	mov	r0, r1
 8008f46:	602b      	str	r3, [r5, #0]
 8008f48:	f7f9 f842 	bl	8001fd0 <_close>
 8008f4c:	1c43      	adds	r3, r0, #1
 8008f4e:	d102      	bne.n	8008f56 <_close_r+0x1a>
 8008f50:	682b      	ldr	r3, [r5, #0]
 8008f52:	b103      	cbz	r3, 8008f56 <_close_r+0x1a>
 8008f54:	6023      	str	r3, [r4, #0]
 8008f56:	bd38      	pop	{r3, r4, r5, pc}
 8008f58:	20000720 	.word	0x20000720

08008f5c <_lseek_r>:
 8008f5c:	b538      	push	{r3, r4, r5, lr}
 8008f5e:	4d07      	ldr	r5, [pc, #28]	@ (8008f7c <_lseek_r+0x20>)
 8008f60:	4604      	mov	r4, r0
 8008f62:	4608      	mov	r0, r1
 8008f64:	4611      	mov	r1, r2
 8008f66:	2200      	movs	r2, #0
 8008f68:	602a      	str	r2, [r5, #0]
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	f7f9 f857 	bl	800201e <_lseek>
 8008f70:	1c43      	adds	r3, r0, #1
 8008f72:	d102      	bne.n	8008f7a <_lseek_r+0x1e>
 8008f74:	682b      	ldr	r3, [r5, #0]
 8008f76:	b103      	cbz	r3, 8008f7a <_lseek_r+0x1e>
 8008f78:	6023      	str	r3, [r4, #0]
 8008f7a:	bd38      	pop	{r3, r4, r5, pc}
 8008f7c:	20000720 	.word	0x20000720

08008f80 <_read_r>:
 8008f80:	b538      	push	{r3, r4, r5, lr}
 8008f82:	4d07      	ldr	r5, [pc, #28]	@ (8008fa0 <_read_r+0x20>)
 8008f84:	4604      	mov	r4, r0
 8008f86:	4608      	mov	r0, r1
 8008f88:	4611      	mov	r1, r2
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	602a      	str	r2, [r5, #0]
 8008f8e:	461a      	mov	r2, r3
 8008f90:	f7f8 ffe5 	bl	8001f5e <_read>
 8008f94:	1c43      	adds	r3, r0, #1
 8008f96:	d102      	bne.n	8008f9e <_read_r+0x1e>
 8008f98:	682b      	ldr	r3, [r5, #0]
 8008f9a:	b103      	cbz	r3, 8008f9e <_read_r+0x1e>
 8008f9c:	6023      	str	r3, [r4, #0]
 8008f9e:	bd38      	pop	{r3, r4, r5, pc}
 8008fa0:	20000720 	.word	0x20000720

08008fa4 <_write_r>:
 8008fa4:	b538      	push	{r3, r4, r5, lr}
 8008fa6:	4d07      	ldr	r5, [pc, #28]	@ (8008fc4 <_write_r+0x20>)
 8008fa8:	4604      	mov	r4, r0
 8008faa:	4608      	mov	r0, r1
 8008fac:	4611      	mov	r1, r2
 8008fae:	2200      	movs	r2, #0
 8008fb0:	602a      	str	r2, [r5, #0]
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	f7f8 fff0 	bl	8001f98 <_write>
 8008fb8:	1c43      	adds	r3, r0, #1
 8008fba:	d102      	bne.n	8008fc2 <_write_r+0x1e>
 8008fbc:	682b      	ldr	r3, [r5, #0]
 8008fbe:	b103      	cbz	r3, 8008fc2 <_write_r+0x1e>
 8008fc0:	6023      	str	r3, [r4, #0]
 8008fc2:	bd38      	pop	{r3, r4, r5, pc}
 8008fc4:	20000720 	.word	0x20000720

08008fc8 <__errno>:
 8008fc8:	4b01      	ldr	r3, [pc, #4]	@ (8008fd0 <__errno+0x8>)
 8008fca:	6818      	ldr	r0, [r3, #0]
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	20000044 	.word	0x20000044

08008fd4 <__libc_init_array>:
 8008fd4:	b570      	push	{r4, r5, r6, lr}
 8008fd6:	4d0d      	ldr	r5, [pc, #52]	@ (800900c <__libc_init_array+0x38>)
 8008fd8:	4c0d      	ldr	r4, [pc, #52]	@ (8009010 <__libc_init_array+0x3c>)
 8008fda:	1b64      	subs	r4, r4, r5
 8008fdc:	10a4      	asrs	r4, r4, #2
 8008fde:	2600      	movs	r6, #0
 8008fe0:	42a6      	cmp	r6, r4
 8008fe2:	d109      	bne.n	8008ff8 <__libc_init_array+0x24>
 8008fe4:	4d0b      	ldr	r5, [pc, #44]	@ (8009014 <__libc_init_array+0x40>)
 8008fe6:	4c0c      	ldr	r4, [pc, #48]	@ (8009018 <__libc_init_array+0x44>)
 8008fe8:	f002 f866 	bl	800b0b8 <_init>
 8008fec:	1b64      	subs	r4, r4, r5
 8008fee:	10a4      	asrs	r4, r4, #2
 8008ff0:	2600      	movs	r6, #0
 8008ff2:	42a6      	cmp	r6, r4
 8008ff4:	d105      	bne.n	8009002 <__libc_init_array+0x2e>
 8008ff6:	bd70      	pop	{r4, r5, r6, pc}
 8008ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ffc:	4798      	blx	r3
 8008ffe:	3601      	adds	r6, #1
 8009000:	e7ee      	b.n	8008fe0 <__libc_init_array+0xc>
 8009002:	f855 3b04 	ldr.w	r3, [r5], #4
 8009006:	4798      	blx	r3
 8009008:	3601      	adds	r6, #1
 800900a:	e7f2      	b.n	8008ff2 <__libc_init_array+0x1e>
 800900c:	0800b4a0 	.word	0x0800b4a0
 8009010:	0800b4a0 	.word	0x0800b4a0
 8009014:	0800b4a0 	.word	0x0800b4a0
 8009018:	0800b4a4 	.word	0x0800b4a4

0800901c <__retarget_lock_init_recursive>:
 800901c:	4770      	bx	lr

0800901e <__retarget_lock_acquire_recursive>:
 800901e:	4770      	bx	lr

08009020 <__retarget_lock_release_recursive>:
 8009020:	4770      	bx	lr

08009022 <quorem>:
 8009022:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009026:	6903      	ldr	r3, [r0, #16]
 8009028:	690c      	ldr	r4, [r1, #16]
 800902a:	42a3      	cmp	r3, r4
 800902c:	4607      	mov	r7, r0
 800902e:	db7e      	blt.n	800912e <quorem+0x10c>
 8009030:	3c01      	subs	r4, #1
 8009032:	f101 0814 	add.w	r8, r1, #20
 8009036:	00a3      	lsls	r3, r4, #2
 8009038:	f100 0514 	add.w	r5, r0, #20
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009042:	9301      	str	r3, [sp, #4]
 8009044:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009048:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800904c:	3301      	adds	r3, #1
 800904e:	429a      	cmp	r2, r3
 8009050:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009054:	fbb2 f6f3 	udiv	r6, r2, r3
 8009058:	d32e      	bcc.n	80090b8 <quorem+0x96>
 800905a:	f04f 0a00 	mov.w	sl, #0
 800905e:	46c4      	mov	ip, r8
 8009060:	46ae      	mov	lr, r5
 8009062:	46d3      	mov	fp, sl
 8009064:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009068:	b298      	uxth	r0, r3
 800906a:	fb06 a000 	mla	r0, r6, r0, sl
 800906e:	0c02      	lsrs	r2, r0, #16
 8009070:	0c1b      	lsrs	r3, r3, #16
 8009072:	fb06 2303 	mla	r3, r6, r3, r2
 8009076:	f8de 2000 	ldr.w	r2, [lr]
 800907a:	b280      	uxth	r0, r0
 800907c:	b292      	uxth	r2, r2
 800907e:	1a12      	subs	r2, r2, r0
 8009080:	445a      	add	r2, fp
 8009082:	f8de 0000 	ldr.w	r0, [lr]
 8009086:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800908a:	b29b      	uxth	r3, r3
 800908c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009090:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009094:	b292      	uxth	r2, r2
 8009096:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800909a:	45e1      	cmp	r9, ip
 800909c:	f84e 2b04 	str.w	r2, [lr], #4
 80090a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80090a4:	d2de      	bcs.n	8009064 <quorem+0x42>
 80090a6:	9b00      	ldr	r3, [sp, #0]
 80090a8:	58eb      	ldr	r3, [r5, r3]
 80090aa:	b92b      	cbnz	r3, 80090b8 <quorem+0x96>
 80090ac:	9b01      	ldr	r3, [sp, #4]
 80090ae:	3b04      	subs	r3, #4
 80090b0:	429d      	cmp	r5, r3
 80090b2:	461a      	mov	r2, r3
 80090b4:	d32f      	bcc.n	8009116 <quorem+0xf4>
 80090b6:	613c      	str	r4, [r7, #16]
 80090b8:	4638      	mov	r0, r7
 80090ba:	f001 f97b 	bl	800a3b4 <__mcmp>
 80090be:	2800      	cmp	r0, #0
 80090c0:	db25      	blt.n	800910e <quorem+0xec>
 80090c2:	4629      	mov	r1, r5
 80090c4:	2000      	movs	r0, #0
 80090c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80090ca:	f8d1 c000 	ldr.w	ip, [r1]
 80090ce:	fa1f fe82 	uxth.w	lr, r2
 80090d2:	fa1f f38c 	uxth.w	r3, ip
 80090d6:	eba3 030e 	sub.w	r3, r3, lr
 80090da:	4403      	add	r3, r0
 80090dc:	0c12      	lsrs	r2, r2, #16
 80090de:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80090e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090ec:	45c1      	cmp	r9, r8
 80090ee:	f841 3b04 	str.w	r3, [r1], #4
 80090f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80090f6:	d2e6      	bcs.n	80090c6 <quorem+0xa4>
 80090f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009100:	b922      	cbnz	r2, 800910c <quorem+0xea>
 8009102:	3b04      	subs	r3, #4
 8009104:	429d      	cmp	r5, r3
 8009106:	461a      	mov	r2, r3
 8009108:	d30b      	bcc.n	8009122 <quorem+0x100>
 800910a:	613c      	str	r4, [r7, #16]
 800910c:	3601      	adds	r6, #1
 800910e:	4630      	mov	r0, r6
 8009110:	b003      	add	sp, #12
 8009112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009116:	6812      	ldr	r2, [r2, #0]
 8009118:	3b04      	subs	r3, #4
 800911a:	2a00      	cmp	r2, #0
 800911c:	d1cb      	bne.n	80090b6 <quorem+0x94>
 800911e:	3c01      	subs	r4, #1
 8009120:	e7c6      	b.n	80090b0 <quorem+0x8e>
 8009122:	6812      	ldr	r2, [r2, #0]
 8009124:	3b04      	subs	r3, #4
 8009126:	2a00      	cmp	r2, #0
 8009128:	d1ef      	bne.n	800910a <quorem+0xe8>
 800912a:	3c01      	subs	r4, #1
 800912c:	e7ea      	b.n	8009104 <quorem+0xe2>
 800912e:	2000      	movs	r0, #0
 8009130:	e7ee      	b.n	8009110 <quorem+0xee>
 8009132:	0000      	movs	r0, r0
 8009134:	0000      	movs	r0, r0
	...

08009138 <_dtoa_r>:
 8009138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800913c:	69c7      	ldr	r7, [r0, #28]
 800913e:	b099      	sub	sp, #100	@ 0x64
 8009140:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009144:	ec55 4b10 	vmov	r4, r5, d0
 8009148:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800914a:	9109      	str	r1, [sp, #36]	@ 0x24
 800914c:	4683      	mov	fp, r0
 800914e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009150:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009152:	b97f      	cbnz	r7, 8009174 <_dtoa_r+0x3c>
 8009154:	2010      	movs	r0, #16
 8009156:	f000 fdfd 	bl	8009d54 <malloc>
 800915a:	4602      	mov	r2, r0
 800915c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009160:	b920      	cbnz	r0, 800916c <_dtoa_r+0x34>
 8009162:	4ba7      	ldr	r3, [pc, #668]	@ (8009400 <_dtoa_r+0x2c8>)
 8009164:	21ef      	movs	r1, #239	@ 0xef
 8009166:	48a7      	ldr	r0, [pc, #668]	@ (8009404 <_dtoa_r+0x2cc>)
 8009168:	f001 fc68 	bl	800aa3c <__assert_func>
 800916c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009170:	6007      	str	r7, [r0, #0]
 8009172:	60c7      	str	r7, [r0, #12]
 8009174:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009178:	6819      	ldr	r1, [r3, #0]
 800917a:	b159      	cbz	r1, 8009194 <_dtoa_r+0x5c>
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	604a      	str	r2, [r1, #4]
 8009180:	2301      	movs	r3, #1
 8009182:	4093      	lsls	r3, r2
 8009184:	608b      	str	r3, [r1, #8]
 8009186:	4658      	mov	r0, fp
 8009188:	f000 feda 	bl	8009f40 <_Bfree>
 800918c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009190:	2200      	movs	r2, #0
 8009192:	601a      	str	r2, [r3, #0]
 8009194:	1e2b      	subs	r3, r5, #0
 8009196:	bfb9      	ittee	lt
 8009198:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800919c:	9303      	strlt	r3, [sp, #12]
 800919e:	2300      	movge	r3, #0
 80091a0:	6033      	strge	r3, [r6, #0]
 80091a2:	9f03      	ldr	r7, [sp, #12]
 80091a4:	4b98      	ldr	r3, [pc, #608]	@ (8009408 <_dtoa_r+0x2d0>)
 80091a6:	bfbc      	itt	lt
 80091a8:	2201      	movlt	r2, #1
 80091aa:	6032      	strlt	r2, [r6, #0]
 80091ac:	43bb      	bics	r3, r7
 80091ae:	d112      	bne.n	80091d6 <_dtoa_r+0x9e>
 80091b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80091b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80091b6:	6013      	str	r3, [r2, #0]
 80091b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80091bc:	4323      	orrs	r3, r4
 80091be:	f000 854d 	beq.w	8009c5c <_dtoa_r+0xb24>
 80091c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80091c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800941c <_dtoa_r+0x2e4>
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f000 854f 	beq.w	8009c6c <_dtoa_r+0xb34>
 80091ce:	f10a 0303 	add.w	r3, sl, #3
 80091d2:	f000 bd49 	b.w	8009c68 <_dtoa_r+0xb30>
 80091d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80091da:	2200      	movs	r2, #0
 80091dc:	ec51 0b17 	vmov	r0, r1, d7
 80091e0:	2300      	movs	r3, #0
 80091e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80091e6:	f7f7 fc77 	bl	8000ad8 <__aeabi_dcmpeq>
 80091ea:	4680      	mov	r8, r0
 80091ec:	b158      	cbz	r0, 8009206 <_dtoa_r+0xce>
 80091ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80091f0:	2301      	movs	r3, #1
 80091f2:	6013      	str	r3, [r2, #0]
 80091f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80091f6:	b113      	cbz	r3, 80091fe <_dtoa_r+0xc6>
 80091f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80091fa:	4b84      	ldr	r3, [pc, #528]	@ (800940c <_dtoa_r+0x2d4>)
 80091fc:	6013      	str	r3, [r2, #0]
 80091fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009420 <_dtoa_r+0x2e8>
 8009202:	f000 bd33 	b.w	8009c6c <_dtoa_r+0xb34>
 8009206:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800920a:	aa16      	add	r2, sp, #88	@ 0x58
 800920c:	a917      	add	r1, sp, #92	@ 0x5c
 800920e:	4658      	mov	r0, fp
 8009210:	f001 f980 	bl	800a514 <__d2b>
 8009214:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009218:	4681      	mov	r9, r0
 800921a:	2e00      	cmp	r6, #0
 800921c:	d077      	beq.n	800930e <_dtoa_r+0x1d6>
 800921e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009220:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009228:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800922c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009230:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009234:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009238:	4619      	mov	r1, r3
 800923a:	2200      	movs	r2, #0
 800923c:	4b74      	ldr	r3, [pc, #464]	@ (8009410 <_dtoa_r+0x2d8>)
 800923e:	f7f7 f82b 	bl	8000298 <__aeabi_dsub>
 8009242:	a369      	add	r3, pc, #420	@ (adr r3, 80093e8 <_dtoa_r+0x2b0>)
 8009244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009248:	f7f7 f9de 	bl	8000608 <__aeabi_dmul>
 800924c:	a368      	add	r3, pc, #416	@ (adr r3, 80093f0 <_dtoa_r+0x2b8>)
 800924e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009252:	f7f7 f823 	bl	800029c <__adddf3>
 8009256:	4604      	mov	r4, r0
 8009258:	4630      	mov	r0, r6
 800925a:	460d      	mov	r5, r1
 800925c:	f7f7 f96a 	bl	8000534 <__aeabi_i2d>
 8009260:	a365      	add	r3, pc, #404	@ (adr r3, 80093f8 <_dtoa_r+0x2c0>)
 8009262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009266:	f7f7 f9cf 	bl	8000608 <__aeabi_dmul>
 800926a:	4602      	mov	r2, r0
 800926c:	460b      	mov	r3, r1
 800926e:	4620      	mov	r0, r4
 8009270:	4629      	mov	r1, r5
 8009272:	f7f7 f813 	bl	800029c <__adddf3>
 8009276:	4604      	mov	r4, r0
 8009278:	460d      	mov	r5, r1
 800927a:	f7f7 fc75 	bl	8000b68 <__aeabi_d2iz>
 800927e:	2200      	movs	r2, #0
 8009280:	4607      	mov	r7, r0
 8009282:	2300      	movs	r3, #0
 8009284:	4620      	mov	r0, r4
 8009286:	4629      	mov	r1, r5
 8009288:	f7f7 fc30 	bl	8000aec <__aeabi_dcmplt>
 800928c:	b140      	cbz	r0, 80092a0 <_dtoa_r+0x168>
 800928e:	4638      	mov	r0, r7
 8009290:	f7f7 f950 	bl	8000534 <__aeabi_i2d>
 8009294:	4622      	mov	r2, r4
 8009296:	462b      	mov	r3, r5
 8009298:	f7f7 fc1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800929c:	b900      	cbnz	r0, 80092a0 <_dtoa_r+0x168>
 800929e:	3f01      	subs	r7, #1
 80092a0:	2f16      	cmp	r7, #22
 80092a2:	d851      	bhi.n	8009348 <_dtoa_r+0x210>
 80092a4:	4b5b      	ldr	r3, [pc, #364]	@ (8009414 <_dtoa_r+0x2dc>)
 80092a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80092aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092b2:	f7f7 fc1b 	bl	8000aec <__aeabi_dcmplt>
 80092b6:	2800      	cmp	r0, #0
 80092b8:	d048      	beq.n	800934c <_dtoa_r+0x214>
 80092ba:	3f01      	subs	r7, #1
 80092bc:	2300      	movs	r3, #0
 80092be:	9312      	str	r3, [sp, #72]	@ 0x48
 80092c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80092c2:	1b9b      	subs	r3, r3, r6
 80092c4:	1e5a      	subs	r2, r3, #1
 80092c6:	bf44      	itt	mi
 80092c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80092cc:	2300      	movmi	r3, #0
 80092ce:	9208      	str	r2, [sp, #32]
 80092d0:	bf54      	ite	pl
 80092d2:	f04f 0800 	movpl.w	r8, #0
 80092d6:	9308      	strmi	r3, [sp, #32]
 80092d8:	2f00      	cmp	r7, #0
 80092da:	db39      	blt.n	8009350 <_dtoa_r+0x218>
 80092dc:	9b08      	ldr	r3, [sp, #32]
 80092de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80092e0:	443b      	add	r3, r7
 80092e2:	9308      	str	r3, [sp, #32]
 80092e4:	2300      	movs	r3, #0
 80092e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80092e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092ea:	2b09      	cmp	r3, #9
 80092ec:	d864      	bhi.n	80093b8 <_dtoa_r+0x280>
 80092ee:	2b05      	cmp	r3, #5
 80092f0:	bfc4      	itt	gt
 80092f2:	3b04      	subgt	r3, #4
 80092f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80092f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092f8:	f1a3 0302 	sub.w	r3, r3, #2
 80092fc:	bfcc      	ite	gt
 80092fe:	2400      	movgt	r4, #0
 8009300:	2401      	movle	r4, #1
 8009302:	2b03      	cmp	r3, #3
 8009304:	d863      	bhi.n	80093ce <_dtoa_r+0x296>
 8009306:	e8df f003 	tbb	[pc, r3]
 800930a:	372a      	.short	0x372a
 800930c:	5535      	.short	0x5535
 800930e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009312:	441e      	add	r6, r3
 8009314:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009318:	2b20      	cmp	r3, #32
 800931a:	bfc1      	itttt	gt
 800931c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009320:	409f      	lslgt	r7, r3
 8009322:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009326:	fa24 f303 	lsrgt.w	r3, r4, r3
 800932a:	bfd6      	itet	le
 800932c:	f1c3 0320 	rsble	r3, r3, #32
 8009330:	ea47 0003 	orrgt.w	r0, r7, r3
 8009334:	fa04 f003 	lslle.w	r0, r4, r3
 8009338:	f7f7 f8ec 	bl	8000514 <__aeabi_ui2d>
 800933c:	2201      	movs	r2, #1
 800933e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009342:	3e01      	subs	r6, #1
 8009344:	9214      	str	r2, [sp, #80]	@ 0x50
 8009346:	e777      	b.n	8009238 <_dtoa_r+0x100>
 8009348:	2301      	movs	r3, #1
 800934a:	e7b8      	b.n	80092be <_dtoa_r+0x186>
 800934c:	9012      	str	r0, [sp, #72]	@ 0x48
 800934e:	e7b7      	b.n	80092c0 <_dtoa_r+0x188>
 8009350:	427b      	negs	r3, r7
 8009352:	930a      	str	r3, [sp, #40]	@ 0x28
 8009354:	2300      	movs	r3, #0
 8009356:	eba8 0807 	sub.w	r8, r8, r7
 800935a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800935c:	e7c4      	b.n	80092e8 <_dtoa_r+0x1b0>
 800935e:	2300      	movs	r3, #0
 8009360:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009362:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009364:	2b00      	cmp	r3, #0
 8009366:	dc35      	bgt.n	80093d4 <_dtoa_r+0x29c>
 8009368:	2301      	movs	r3, #1
 800936a:	9300      	str	r3, [sp, #0]
 800936c:	9307      	str	r3, [sp, #28]
 800936e:	461a      	mov	r2, r3
 8009370:	920e      	str	r2, [sp, #56]	@ 0x38
 8009372:	e00b      	b.n	800938c <_dtoa_r+0x254>
 8009374:	2301      	movs	r3, #1
 8009376:	e7f3      	b.n	8009360 <_dtoa_r+0x228>
 8009378:	2300      	movs	r3, #0
 800937a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800937c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800937e:	18fb      	adds	r3, r7, r3
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	3301      	adds	r3, #1
 8009384:	2b01      	cmp	r3, #1
 8009386:	9307      	str	r3, [sp, #28]
 8009388:	bfb8      	it	lt
 800938a:	2301      	movlt	r3, #1
 800938c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009390:	2100      	movs	r1, #0
 8009392:	2204      	movs	r2, #4
 8009394:	f102 0514 	add.w	r5, r2, #20
 8009398:	429d      	cmp	r5, r3
 800939a:	d91f      	bls.n	80093dc <_dtoa_r+0x2a4>
 800939c:	6041      	str	r1, [r0, #4]
 800939e:	4658      	mov	r0, fp
 80093a0:	f000 fd8e 	bl	8009ec0 <_Balloc>
 80093a4:	4682      	mov	sl, r0
 80093a6:	2800      	cmp	r0, #0
 80093a8:	d13c      	bne.n	8009424 <_dtoa_r+0x2ec>
 80093aa:	4b1b      	ldr	r3, [pc, #108]	@ (8009418 <_dtoa_r+0x2e0>)
 80093ac:	4602      	mov	r2, r0
 80093ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80093b2:	e6d8      	b.n	8009166 <_dtoa_r+0x2e>
 80093b4:	2301      	movs	r3, #1
 80093b6:	e7e0      	b.n	800937a <_dtoa_r+0x242>
 80093b8:	2401      	movs	r4, #1
 80093ba:	2300      	movs	r3, #0
 80093bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80093be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80093c0:	f04f 33ff 	mov.w	r3, #4294967295
 80093c4:	9300      	str	r3, [sp, #0]
 80093c6:	9307      	str	r3, [sp, #28]
 80093c8:	2200      	movs	r2, #0
 80093ca:	2312      	movs	r3, #18
 80093cc:	e7d0      	b.n	8009370 <_dtoa_r+0x238>
 80093ce:	2301      	movs	r3, #1
 80093d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093d2:	e7f5      	b.n	80093c0 <_dtoa_r+0x288>
 80093d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	9307      	str	r3, [sp, #28]
 80093da:	e7d7      	b.n	800938c <_dtoa_r+0x254>
 80093dc:	3101      	adds	r1, #1
 80093de:	0052      	lsls	r2, r2, #1
 80093e0:	e7d8      	b.n	8009394 <_dtoa_r+0x25c>
 80093e2:	bf00      	nop
 80093e4:	f3af 8000 	nop.w
 80093e8:	636f4361 	.word	0x636f4361
 80093ec:	3fd287a7 	.word	0x3fd287a7
 80093f0:	8b60c8b3 	.word	0x8b60c8b3
 80093f4:	3fc68a28 	.word	0x3fc68a28
 80093f8:	509f79fb 	.word	0x509f79fb
 80093fc:	3fd34413 	.word	0x3fd34413
 8009400:	0800b165 	.word	0x0800b165
 8009404:	0800b17c 	.word	0x0800b17c
 8009408:	7ff00000 	.word	0x7ff00000
 800940c:	0800b135 	.word	0x0800b135
 8009410:	3ff80000 	.word	0x3ff80000
 8009414:	0800b278 	.word	0x0800b278
 8009418:	0800b1d4 	.word	0x0800b1d4
 800941c:	0800b161 	.word	0x0800b161
 8009420:	0800b134 	.word	0x0800b134
 8009424:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009428:	6018      	str	r0, [r3, #0]
 800942a:	9b07      	ldr	r3, [sp, #28]
 800942c:	2b0e      	cmp	r3, #14
 800942e:	f200 80a4 	bhi.w	800957a <_dtoa_r+0x442>
 8009432:	2c00      	cmp	r4, #0
 8009434:	f000 80a1 	beq.w	800957a <_dtoa_r+0x442>
 8009438:	2f00      	cmp	r7, #0
 800943a:	dd33      	ble.n	80094a4 <_dtoa_r+0x36c>
 800943c:	4bad      	ldr	r3, [pc, #692]	@ (80096f4 <_dtoa_r+0x5bc>)
 800943e:	f007 020f 	and.w	r2, r7, #15
 8009442:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009446:	ed93 7b00 	vldr	d7, [r3]
 800944a:	05f8      	lsls	r0, r7, #23
 800944c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009450:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009454:	d516      	bpl.n	8009484 <_dtoa_r+0x34c>
 8009456:	4ba8      	ldr	r3, [pc, #672]	@ (80096f8 <_dtoa_r+0x5c0>)
 8009458:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800945c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009460:	f7f7 f9fc 	bl	800085c <__aeabi_ddiv>
 8009464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009468:	f004 040f 	and.w	r4, r4, #15
 800946c:	2603      	movs	r6, #3
 800946e:	4da2      	ldr	r5, [pc, #648]	@ (80096f8 <_dtoa_r+0x5c0>)
 8009470:	b954      	cbnz	r4, 8009488 <_dtoa_r+0x350>
 8009472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800947a:	f7f7 f9ef 	bl	800085c <__aeabi_ddiv>
 800947e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009482:	e028      	b.n	80094d6 <_dtoa_r+0x39e>
 8009484:	2602      	movs	r6, #2
 8009486:	e7f2      	b.n	800946e <_dtoa_r+0x336>
 8009488:	07e1      	lsls	r1, r4, #31
 800948a:	d508      	bpl.n	800949e <_dtoa_r+0x366>
 800948c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009490:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009494:	f7f7 f8b8 	bl	8000608 <__aeabi_dmul>
 8009498:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800949c:	3601      	adds	r6, #1
 800949e:	1064      	asrs	r4, r4, #1
 80094a0:	3508      	adds	r5, #8
 80094a2:	e7e5      	b.n	8009470 <_dtoa_r+0x338>
 80094a4:	f000 80d2 	beq.w	800964c <_dtoa_r+0x514>
 80094a8:	427c      	negs	r4, r7
 80094aa:	4b92      	ldr	r3, [pc, #584]	@ (80096f4 <_dtoa_r+0x5bc>)
 80094ac:	4d92      	ldr	r5, [pc, #584]	@ (80096f8 <_dtoa_r+0x5c0>)
 80094ae:	f004 020f 	and.w	r2, r4, #15
 80094b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094be:	f7f7 f8a3 	bl	8000608 <__aeabi_dmul>
 80094c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094c6:	1124      	asrs	r4, r4, #4
 80094c8:	2300      	movs	r3, #0
 80094ca:	2602      	movs	r6, #2
 80094cc:	2c00      	cmp	r4, #0
 80094ce:	f040 80b2 	bne.w	8009636 <_dtoa_r+0x4fe>
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d1d3      	bne.n	800947e <_dtoa_r+0x346>
 80094d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80094d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f000 80b7 	beq.w	8009650 <_dtoa_r+0x518>
 80094e2:	4b86      	ldr	r3, [pc, #536]	@ (80096fc <_dtoa_r+0x5c4>)
 80094e4:	2200      	movs	r2, #0
 80094e6:	4620      	mov	r0, r4
 80094e8:	4629      	mov	r1, r5
 80094ea:	f7f7 faff 	bl	8000aec <__aeabi_dcmplt>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	f000 80ae 	beq.w	8009650 <_dtoa_r+0x518>
 80094f4:	9b07      	ldr	r3, [sp, #28]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f000 80aa 	beq.w	8009650 <_dtoa_r+0x518>
 80094fc:	9b00      	ldr	r3, [sp, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	dd37      	ble.n	8009572 <_dtoa_r+0x43a>
 8009502:	1e7b      	subs	r3, r7, #1
 8009504:	9304      	str	r3, [sp, #16]
 8009506:	4620      	mov	r0, r4
 8009508:	4b7d      	ldr	r3, [pc, #500]	@ (8009700 <_dtoa_r+0x5c8>)
 800950a:	2200      	movs	r2, #0
 800950c:	4629      	mov	r1, r5
 800950e:	f7f7 f87b 	bl	8000608 <__aeabi_dmul>
 8009512:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009516:	9c00      	ldr	r4, [sp, #0]
 8009518:	3601      	adds	r6, #1
 800951a:	4630      	mov	r0, r6
 800951c:	f7f7 f80a 	bl	8000534 <__aeabi_i2d>
 8009520:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009524:	f7f7 f870 	bl	8000608 <__aeabi_dmul>
 8009528:	4b76      	ldr	r3, [pc, #472]	@ (8009704 <_dtoa_r+0x5cc>)
 800952a:	2200      	movs	r2, #0
 800952c:	f7f6 feb6 	bl	800029c <__adddf3>
 8009530:	4605      	mov	r5, r0
 8009532:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009536:	2c00      	cmp	r4, #0
 8009538:	f040 808d 	bne.w	8009656 <_dtoa_r+0x51e>
 800953c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009540:	4b71      	ldr	r3, [pc, #452]	@ (8009708 <_dtoa_r+0x5d0>)
 8009542:	2200      	movs	r2, #0
 8009544:	f7f6 fea8 	bl	8000298 <__aeabi_dsub>
 8009548:	4602      	mov	r2, r0
 800954a:	460b      	mov	r3, r1
 800954c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009550:	462a      	mov	r2, r5
 8009552:	4633      	mov	r3, r6
 8009554:	f7f7 fae8 	bl	8000b28 <__aeabi_dcmpgt>
 8009558:	2800      	cmp	r0, #0
 800955a:	f040 828b 	bne.w	8009a74 <_dtoa_r+0x93c>
 800955e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009562:	462a      	mov	r2, r5
 8009564:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009568:	f7f7 fac0 	bl	8000aec <__aeabi_dcmplt>
 800956c:	2800      	cmp	r0, #0
 800956e:	f040 8128 	bne.w	80097c2 <_dtoa_r+0x68a>
 8009572:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009576:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800957a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800957c:	2b00      	cmp	r3, #0
 800957e:	f2c0 815a 	blt.w	8009836 <_dtoa_r+0x6fe>
 8009582:	2f0e      	cmp	r7, #14
 8009584:	f300 8157 	bgt.w	8009836 <_dtoa_r+0x6fe>
 8009588:	4b5a      	ldr	r3, [pc, #360]	@ (80096f4 <_dtoa_r+0x5bc>)
 800958a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800958e:	ed93 7b00 	vldr	d7, [r3]
 8009592:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009594:	2b00      	cmp	r3, #0
 8009596:	ed8d 7b00 	vstr	d7, [sp]
 800959a:	da03      	bge.n	80095a4 <_dtoa_r+0x46c>
 800959c:	9b07      	ldr	r3, [sp, #28]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	f340 8101 	ble.w	80097a6 <_dtoa_r+0x66e>
 80095a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80095a8:	4656      	mov	r6, sl
 80095aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095ae:	4620      	mov	r0, r4
 80095b0:	4629      	mov	r1, r5
 80095b2:	f7f7 f953 	bl	800085c <__aeabi_ddiv>
 80095b6:	f7f7 fad7 	bl	8000b68 <__aeabi_d2iz>
 80095ba:	4680      	mov	r8, r0
 80095bc:	f7f6 ffba 	bl	8000534 <__aeabi_i2d>
 80095c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095c4:	f7f7 f820 	bl	8000608 <__aeabi_dmul>
 80095c8:	4602      	mov	r2, r0
 80095ca:	460b      	mov	r3, r1
 80095cc:	4620      	mov	r0, r4
 80095ce:	4629      	mov	r1, r5
 80095d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80095d4:	f7f6 fe60 	bl	8000298 <__aeabi_dsub>
 80095d8:	f806 4b01 	strb.w	r4, [r6], #1
 80095dc:	9d07      	ldr	r5, [sp, #28]
 80095de:	eba6 040a 	sub.w	r4, r6, sl
 80095e2:	42a5      	cmp	r5, r4
 80095e4:	4602      	mov	r2, r0
 80095e6:	460b      	mov	r3, r1
 80095e8:	f040 8117 	bne.w	800981a <_dtoa_r+0x6e2>
 80095ec:	f7f6 fe56 	bl	800029c <__adddf3>
 80095f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095f4:	4604      	mov	r4, r0
 80095f6:	460d      	mov	r5, r1
 80095f8:	f7f7 fa96 	bl	8000b28 <__aeabi_dcmpgt>
 80095fc:	2800      	cmp	r0, #0
 80095fe:	f040 80f9 	bne.w	80097f4 <_dtoa_r+0x6bc>
 8009602:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009606:	4620      	mov	r0, r4
 8009608:	4629      	mov	r1, r5
 800960a:	f7f7 fa65 	bl	8000ad8 <__aeabi_dcmpeq>
 800960e:	b118      	cbz	r0, 8009618 <_dtoa_r+0x4e0>
 8009610:	f018 0f01 	tst.w	r8, #1
 8009614:	f040 80ee 	bne.w	80097f4 <_dtoa_r+0x6bc>
 8009618:	4649      	mov	r1, r9
 800961a:	4658      	mov	r0, fp
 800961c:	f000 fc90 	bl	8009f40 <_Bfree>
 8009620:	2300      	movs	r3, #0
 8009622:	7033      	strb	r3, [r6, #0]
 8009624:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009626:	3701      	adds	r7, #1
 8009628:	601f      	str	r7, [r3, #0]
 800962a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800962c:	2b00      	cmp	r3, #0
 800962e:	f000 831d 	beq.w	8009c6c <_dtoa_r+0xb34>
 8009632:	601e      	str	r6, [r3, #0]
 8009634:	e31a      	b.n	8009c6c <_dtoa_r+0xb34>
 8009636:	07e2      	lsls	r2, r4, #31
 8009638:	d505      	bpl.n	8009646 <_dtoa_r+0x50e>
 800963a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800963e:	f7f6 ffe3 	bl	8000608 <__aeabi_dmul>
 8009642:	3601      	adds	r6, #1
 8009644:	2301      	movs	r3, #1
 8009646:	1064      	asrs	r4, r4, #1
 8009648:	3508      	adds	r5, #8
 800964a:	e73f      	b.n	80094cc <_dtoa_r+0x394>
 800964c:	2602      	movs	r6, #2
 800964e:	e742      	b.n	80094d6 <_dtoa_r+0x39e>
 8009650:	9c07      	ldr	r4, [sp, #28]
 8009652:	9704      	str	r7, [sp, #16]
 8009654:	e761      	b.n	800951a <_dtoa_r+0x3e2>
 8009656:	4b27      	ldr	r3, [pc, #156]	@ (80096f4 <_dtoa_r+0x5bc>)
 8009658:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800965a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800965e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009662:	4454      	add	r4, sl
 8009664:	2900      	cmp	r1, #0
 8009666:	d053      	beq.n	8009710 <_dtoa_r+0x5d8>
 8009668:	4928      	ldr	r1, [pc, #160]	@ (800970c <_dtoa_r+0x5d4>)
 800966a:	2000      	movs	r0, #0
 800966c:	f7f7 f8f6 	bl	800085c <__aeabi_ddiv>
 8009670:	4633      	mov	r3, r6
 8009672:	462a      	mov	r2, r5
 8009674:	f7f6 fe10 	bl	8000298 <__aeabi_dsub>
 8009678:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800967c:	4656      	mov	r6, sl
 800967e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009682:	f7f7 fa71 	bl	8000b68 <__aeabi_d2iz>
 8009686:	4605      	mov	r5, r0
 8009688:	f7f6 ff54 	bl	8000534 <__aeabi_i2d>
 800968c:	4602      	mov	r2, r0
 800968e:	460b      	mov	r3, r1
 8009690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009694:	f7f6 fe00 	bl	8000298 <__aeabi_dsub>
 8009698:	3530      	adds	r5, #48	@ 0x30
 800969a:	4602      	mov	r2, r0
 800969c:	460b      	mov	r3, r1
 800969e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80096a2:	f806 5b01 	strb.w	r5, [r6], #1
 80096a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80096aa:	f7f7 fa1f 	bl	8000aec <__aeabi_dcmplt>
 80096ae:	2800      	cmp	r0, #0
 80096b0:	d171      	bne.n	8009796 <_dtoa_r+0x65e>
 80096b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096b6:	4911      	ldr	r1, [pc, #68]	@ (80096fc <_dtoa_r+0x5c4>)
 80096b8:	2000      	movs	r0, #0
 80096ba:	f7f6 fded 	bl	8000298 <__aeabi_dsub>
 80096be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80096c2:	f7f7 fa13 	bl	8000aec <__aeabi_dcmplt>
 80096c6:	2800      	cmp	r0, #0
 80096c8:	f040 8095 	bne.w	80097f6 <_dtoa_r+0x6be>
 80096cc:	42a6      	cmp	r6, r4
 80096ce:	f43f af50 	beq.w	8009572 <_dtoa_r+0x43a>
 80096d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80096d6:	4b0a      	ldr	r3, [pc, #40]	@ (8009700 <_dtoa_r+0x5c8>)
 80096d8:	2200      	movs	r2, #0
 80096da:	f7f6 ff95 	bl	8000608 <__aeabi_dmul>
 80096de:	4b08      	ldr	r3, [pc, #32]	@ (8009700 <_dtoa_r+0x5c8>)
 80096e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80096e4:	2200      	movs	r2, #0
 80096e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096ea:	f7f6 ff8d 	bl	8000608 <__aeabi_dmul>
 80096ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096f2:	e7c4      	b.n	800967e <_dtoa_r+0x546>
 80096f4:	0800b278 	.word	0x0800b278
 80096f8:	0800b250 	.word	0x0800b250
 80096fc:	3ff00000 	.word	0x3ff00000
 8009700:	40240000 	.word	0x40240000
 8009704:	401c0000 	.word	0x401c0000
 8009708:	40140000 	.word	0x40140000
 800970c:	3fe00000 	.word	0x3fe00000
 8009710:	4631      	mov	r1, r6
 8009712:	4628      	mov	r0, r5
 8009714:	f7f6 ff78 	bl	8000608 <__aeabi_dmul>
 8009718:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800971c:	9415      	str	r4, [sp, #84]	@ 0x54
 800971e:	4656      	mov	r6, sl
 8009720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009724:	f7f7 fa20 	bl	8000b68 <__aeabi_d2iz>
 8009728:	4605      	mov	r5, r0
 800972a:	f7f6 ff03 	bl	8000534 <__aeabi_i2d>
 800972e:	4602      	mov	r2, r0
 8009730:	460b      	mov	r3, r1
 8009732:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009736:	f7f6 fdaf 	bl	8000298 <__aeabi_dsub>
 800973a:	3530      	adds	r5, #48	@ 0x30
 800973c:	f806 5b01 	strb.w	r5, [r6], #1
 8009740:	4602      	mov	r2, r0
 8009742:	460b      	mov	r3, r1
 8009744:	42a6      	cmp	r6, r4
 8009746:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800974a:	f04f 0200 	mov.w	r2, #0
 800974e:	d124      	bne.n	800979a <_dtoa_r+0x662>
 8009750:	4bac      	ldr	r3, [pc, #688]	@ (8009a04 <_dtoa_r+0x8cc>)
 8009752:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009756:	f7f6 fda1 	bl	800029c <__adddf3>
 800975a:	4602      	mov	r2, r0
 800975c:	460b      	mov	r3, r1
 800975e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009762:	f7f7 f9e1 	bl	8000b28 <__aeabi_dcmpgt>
 8009766:	2800      	cmp	r0, #0
 8009768:	d145      	bne.n	80097f6 <_dtoa_r+0x6be>
 800976a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800976e:	49a5      	ldr	r1, [pc, #660]	@ (8009a04 <_dtoa_r+0x8cc>)
 8009770:	2000      	movs	r0, #0
 8009772:	f7f6 fd91 	bl	8000298 <__aeabi_dsub>
 8009776:	4602      	mov	r2, r0
 8009778:	460b      	mov	r3, r1
 800977a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800977e:	f7f7 f9b5 	bl	8000aec <__aeabi_dcmplt>
 8009782:	2800      	cmp	r0, #0
 8009784:	f43f aef5 	beq.w	8009572 <_dtoa_r+0x43a>
 8009788:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800978a:	1e73      	subs	r3, r6, #1
 800978c:	9315      	str	r3, [sp, #84]	@ 0x54
 800978e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009792:	2b30      	cmp	r3, #48	@ 0x30
 8009794:	d0f8      	beq.n	8009788 <_dtoa_r+0x650>
 8009796:	9f04      	ldr	r7, [sp, #16]
 8009798:	e73e      	b.n	8009618 <_dtoa_r+0x4e0>
 800979a:	4b9b      	ldr	r3, [pc, #620]	@ (8009a08 <_dtoa_r+0x8d0>)
 800979c:	f7f6 ff34 	bl	8000608 <__aeabi_dmul>
 80097a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097a4:	e7bc      	b.n	8009720 <_dtoa_r+0x5e8>
 80097a6:	d10c      	bne.n	80097c2 <_dtoa_r+0x68a>
 80097a8:	4b98      	ldr	r3, [pc, #608]	@ (8009a0c <_dtoa_r+0x8d4>)
 80097aa:	2200      	movs	r2, #0
 80097ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097b0:	f7f6 ff2a 	bl	8000608 <__aeabi_dmul>
 80097b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097b8:	f7f7 f9ac 	bl	8000b14 <__aeabi_dcmpge>
 80097bc:	2800      	cmp	r0, #0
 80097be:	f000 8157 	beq.w	8009a70 <_dtoa_r+0x938>
 80097c2:	2400      	movs	r4, #0
 80097c4:	4625      	mov	r5, r4
 80097c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097c8:	43db      	mvns	r3, r3
 80097ca:	9304      	str	r3, [sp, #16]
 80097cc:	4656      	mov	r6, sl
 80097ce:	2700      	movs	r7, #0
 80097d0:	4621      	mov	r1, r4
 80097d2:	4658      	mov	r0, fp
 80097d4:	f000 fbb4 	bl	8009f40 <_Bfree>
 80097d8:	2d00      	cmp	r5, #0
 80097da:	d0dc      	beq.n	8009796 <_dtoa_r+0x65e>
 80097dc:	b12f      	cbz	r7, 80097ea <_dtoa_r+0x6b2>
 80097de:	42af      	cmp	r7, r5
 80097e0:	d003      	beq.n	80097ea <_dtoa_r+0x6b2>
 80097e2:	4639      	mov	r1, r7
 80097e4:	4658      	mov	r0, fp
 80097e6:	f000 fbab 	bl	8009f40 <_Bfree>
 80097ea:	4629      	mov	r1, r5
 80097ec:	4658      	mov	r0, fp
 80097ee:	f000 fba7 	bl	8009f40 <_Bfree>
 80097f2:	e7d0      	b.n	8009796 <_dtoa_r+0x65e>
 80097f4:	9704      	str	r7, [sp, #16]
 80097f6:	4633      	mov	r3, r6
 80097f8:	461e      	mov	r6, r3
 80097fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097fe:	2a39      	cmp	r2, #57	@ 0x39
 8009800:	d107      	bne.n	8009812 <_dtoa_r+0x6da>
 8009802:	459a      	cmp	sl, r3
 8009804:	d1f8      	bne.n	80097f8 <_dtoa_r+0x6c0>
 8009806:	9a04      	ldr	r2, [sp, #16]
 8009808:	3201      	adds	r2, #1
 800980a:	9204      	str	r2, [sp, #16]
 800980c:	2230      	movs	r2, #48	@ 0x30
 800980e:	f88a 2000 	strb.w	r2, [sl]
 8009812:	781a      	ldrb	r2, [r3, #0]
 8009814:	3201      	adds	r2, #1
 8009816:	701a      	strb	r2, [r3, #0]
 8009818:	e7bd      	b.n	8009796 <_dtoa_r+0x65e>
 800981a:	4b7b      	ldr	r3, [pc, #492]	@ (8009a08 <_dtoa_r+0x8d0>)
 800981c:	2200      	movs	r2, #0
 800981e:	f7f6 fef3 	bl	8000608 <__aeabi_dmul>
 8009822:	2200      	movs	r2, #0
 8009824:	2300      	movs	r3, #0
 8009826:	4604      	mov	r4, r0
 8009828:	460d      	mov	r5, r1
 800982a:	f7f7 f955 	bl	8000ad8 <__aeabi_dcmpeq>
 800982e:	2800      	cmp	r0, #0
 8009830:	f43f aebb 	beq.w	80095aa <_dtoa_r+0x472>
 8009834:	e6f0      	b.n	8009618 <_dtoa_r+0x4e0>
 8009836:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009838:	2a00      	cmp	r2, #0
 800983a:	f000 80db 	beq.w	80099f4 <_dtoa_r+0x8bc>
 800983e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009840:	2a01      	cmp	r2, #1
 8009842:	f300 80bf 	bgt.w	80099c4 <_dtoa_r+0x88c>
 8009846:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009848:	2a00      	cmp	r2, #0
 800984a:	f000 80b7 	beq.w	80099bc <_dtoa_r+0x884>
 800984e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009852:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009854:	4646      	mov	r6, r8
 8009856:	9a08      	ldr	r2, [sp, #32]
 8009858:	2101      	movs	r1, #1
 800985a:	441a      	add	r2, r3
 800985c:	4658      	mov	r0, fp
 800985e:	4498      	add	r8, r3
 8009860:	9208      	str	r2, [sp, #32]
 8009862:	f000 fc21 	bl	800a0a8 <__i2b>
 8009866:	4605      	mov	r5, r0
 8009868:	b15e      	cbz	r6, 8009882 <_dtoa_r+0x74a>
 800986a:	9b08      	ldr	r3, [sp, #32]
 800986c:	2b00      	cmp	r3, #0
 800986e:	dd08      	ble.n	8009882 <_dtoa_r+0x74a>
 8009870:	42b3      	cmp	r3, r6
 8009872:	9a08      	ldr	r2, [sp, #32]
 8009874:	bfa8      	it	ge
 8009876:	4633      	movge	r3, r6
 8009878:	eba8 0803 	sub.w	r8, r8, r3
 800987c:	1af6      	subs	r6, r6, r3
 800987e:	1ad3      	subs	r3, r2, r3
 8009880:	9308      	str	r3, [sp, #32]
 8009882:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009884:	b1f3      	cbz	r3, 80098c4 <_dtoa_r+0x78c>
 8009886:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009888:	2b00      	cmp	r3, #0
 800988a:	f000 80b7 	beq.w	80099fc <_dtoa_r+0x8c4>
 800988e:	b18c      	cbz	r4, 80098b4 <_dtoa_r+0x77c>
 8009890:	4629      	mov	r1, r5
 8009892:	4622      	mov	r2, r4
 8009894:	4658      	mov	r0, fp
 8009896:	f000 fcc7 	bl	800a228 <__pow5mult>
 800989a:	464a      	mov	r2, r9
 800989c:	4601      	mov	r1, r0
 800989e:	4605      	mov	r5, r0
 80098a0:	4658      	mov	r0, fp
 80098a2:	f000 fc17 	bl	800a0d4 <__multiply>
 80098a6:	4649      	mov	r1, r9
 80098a8:	9004      	str	r0, [sp, #16]
 80098aa:	4658      	mov	r0, fp
 80098ac:	f000 fb48 	bl	8009f40 <_Bfree>
 80098b0:	9b04      	ldr	r3, [sp, #16]
 80098b2:	4699      	mov	r9, r3
 80098b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098b6:	1b1a      	subs	r2, r3, r4
 80098b8:	d004      	beq.n	80098c4 <_dtoa_r+0x78c>
 80098ba:	4649      	mov	r1, r9
 80098bc:	4658      	mov	r0, fp
 80098be:	f000 fcb3 	bl	800a228 <__pow5mult>
 80098c2:	4681      	mov	r9, r0
 80098c4:	2101      	movs	r1, #1
 80098c6:	4658      	mov	r0, fp
 80098c8:	f000 fbee 	bl	800a0a8 <__i2b>
 80098cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098ce:	4604      	mov	r4, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f000 81cf 	beq.w	8009c74 <_dtoa_r+0xb3c>
 80098d6:	461a      	mov	r2, r3
 80098d8:	4601      	mov	r1, r0
 80098da:	4658      	mov	r0, fp
 80098dc:	f000 fca4 	bl	800a228 <__pow5mult>
 80098e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	4604      	mov	r4, r0
 80098e6:	f300 8095 	bgt.w	8009a14 <_dtoa_r+0x8dc>
 80098ea:	9b02      	ldr	r3, [sp, #8]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f040 8087 	bne.w	8009a00 <_dtoa_r+0x8c8>
 80098f2:	9b03      	ldr	r3, [sp, #12]
 80098f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f040 8089 	bne.w	8009a10 <_dtoa_r+0x8d8>
 80098fe:	9b03      	ldr	r3, [sp, #12]
 8009900:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009904:	0d1b      	lsrs	r3, r3, #20
 8009906:	051b      	lsls	r3, r3, #20
 8009908:	b12b      	cbz	r3, 8009916 <_dtoa_r+0x7de>
 800990a:	9b08      	ldr	r3, [sp, #32]
 800990c:	3301      	adds	r3, #1
 800990e:	9308      	str	r3, [sp, #32]
 8009910:	f108 0801 	add.w	r8, r8, #1
 8009914:	2301      	movs	r3, #1
 8009916:	930a      	str	r3, [sp, #40]	@ 0x28
 8009918:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800991a:	2b00      	cmp	r3, #0
 800991c:	f000 81b0 	beq.w	8009c80 <_dtoa_r+0xb48>
 8009920:	6923      	ldr	r3, [r4, #16]
 8009922:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009926:	6918      	ldr	r0, [r3, #16]
 8009928:	f000 fb72 	bl	800a010 <__hi0bits>
 800992c:	f1c0 0020 	rsb	r0, r0, #32
 8009930:	9b08      	ldr	r3, [sp, #32]
 8009932:	4418      	add	r0, r3
 8009934:	f010 001f 	ands.w	r0, r0, #31
 8009938:	d077      	beq.n	8009a2a <_dtoa_r+0x8f2>
 800993a:	f1c0 0320 	rsb	r3, r0, #32
 800993e:	2b04      	cmp	r3, #4
 8009940:	dd6b      	ble.n	8009a1a <_dtoa_r+0x8e2>
 8009942:	9b08      	ldr	r3, [sp, #32]
 8009944:	f1c0 001c 	rsb	r0, r0, #28
 8009948:	4403      	add	r3, r0
 800994a:	4480      	add	r8, r0
 800994c:	4406      	add	r6, r0
 800994e:	9308      	str	r3, [sp, #32]
 8009950:	f1b8 0f00 	cmp.w	r8, #0
 8009954:	dd05      	ble.n	8009962 <_dtoa_r+0x82a>
 8009956:	4649      	mov	r1, r9
 8009958:	4642      	mov	r2, r8
 800995a:	4658      	mov	r0, fp
 800995c:	f000 fcbe 	bl	800a2dc <__lshift>
 8009960:	4681      	mov	r9, r0
 8009962:	9b08      	ldr	r3, [sp, #32]
 8009964:	2b00      	cmp	r3, #0
 8009966:	dd05      	ble.n	8009974 <_dtoa_r+0x83c>
 8009968:	4621      	mov	r1, r4
 800996a:	461a      	mov	r2, r3
 800996c:	4658      	mov	r0, fp
 800996e:	f000 fcb5 	bl	800a2dc <__lshift>
 8009972:	4604      	mov	r4, r0
 8009974:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009976:	2b00      	cmp	r3, #0
 8009978:	d059      	beq.n	8009a2e <_dtoa_r+0x8f6>
 800997a:	4621      	mov	r1, r4
 800997c:	4648      	mov	r0, r9
 800997e:	f000 fd19 	bl	800a3b4 <__mcmp>
 8009982:	2800      	cmp	r0, #0
 8009984:	da53      	bge.n	8009a2e <_dtoa_r+0x8f6>
 8009986:	1e7b      	subs	r3, r7, #1
 8009988:	9304      	str	r3, [sp, #16]
 800998a:	4649      	mov	r1, r9
 800998c:	2300      	movs	r3, #0
 800998e:	220a      	movs	r2, #10
 8009990:	4658      	mov	r0, fp
 8009992:	f000 faf7 	bl	8009f84 <__multadd>
 8009996:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009998:	4681      	mov	r9, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	f000 8172 	beq.w	8009c84 <_dtoa_r+0xb4c>
 80099a0:	2300      	movs	r3, #0
 80099a2:	4629      	mov	r1, r5
 80099a4:	220a      	movs	r2, #10
 80099a6:	4658      	mov	r0, fp
 80099a8:	f000 faec 	bl	8009f84 <__multadd>
 80099ac:	9b00      	ldr	r3, [sp, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	4605      	mov	r5, r0
 80099b2:	dc67      	bgt.n	8009a84 <_dtoa_r+0x94c>
 80099b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099b6:	2b02      	cmp	r3, #2
 80099b8:	dc41      	bgt.n	8009a3e <_dtoa_r+0x906>
 80099ba:	e063      	b.n	8009a84 <_dtoa_r+0x94c>
 80099bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80099be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80099c2:	e746      	b.n	8009852 <_dtoa_r+0x71a>
 80099c4:	9b07      	ldr	r3, [sp, #28]
 80099c6:	1e5c      	subs	r4, r3, #1
 80099c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099ca:	42a3      	cmp	r3, r4
 80099cc:	bfbf      	itttt	lt
 80099ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80099d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80099d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80099d4:	1ae3      	sublt	r3, r4, r3
 80099d6:	bfb4      	ite	lt
 80099d8:	18d2      	addlt	r2, r2, r3
 80099da:	1b1c      	subge	r4, r3, r4
 80099dc:	9b07      	ldr	r3, [sp, #28]
 80099de:	bfbc      	itt	lt
 80099e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80099e2:	2400      	movlt	r4, #0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	bfb5      	itete	lt
 80099e8:	eba8 0603 	sublt.w	r6, r8, r3
 80099ec:	9b07      	ldrge	r3, [sp, #28]
 80099ee:	2300      	movlt	r3, #0
 80099f0:	4646      	movge	r6, r8
 80099f2:	e730      	b.n	8009856 <_dtoa_r+0x71e>
 80099f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80099f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80099f8:	4646      	mov	r6, r8
 80099fa:	e735      	b.n	8009868 <_dtoa_r+0x730>
 80099fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80099fe:	e75c      	b.n	80098ba <_dtoa_r+0x782>
 8009a00:	2300      	movs	r3, #0
 8009a02:	e788      	b.n	8009916 <_dtoa_r+0x7de>
 8009a04:	3fe00000 	.word	0x3fe00000
 8009a08:	40240000 	.word	0x40240000
 8009a0c:	40140000 	.word	0x40140000
 8009a10:	9b02      	ldr	r3, [sp, #8]
 8009a12:	e780      	b.n	8009916 <_dtoa_r+0x7de>
 8009a14:	2300      	movs	r3, #0
 8009a16:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a18:	e782      	b.n	8009920 <_dtoa_r+0x7e8>
 8009a1a:	d099      	beq.n	8009950 <_dtoa_r+0x818>
 8009a1c:	9a08      	ldr	r2, [sp, #32]
 8009a1e:	331c      	adds	r3, #28
 8009a20:	441a      	add	r2, r3
 8009a22:	4498      	add	r8, r3
 8009a24:	441e      	add	r6, r3
 8009a26:	9208      	str	r2, [sp, #32]
 8009a28:	e792      	b.n	8009950 <_dtoa_r+0x818>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	e7f6      	b.n	8009a1c <_dtoa_r+0x8e4>
 8009a2e:	9b07      	ldr	r3, [sp, #28]
 8009a30:	9704      	str	r7, [sp, #16]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	dc20      	bgt.n	8009a78 <_dtoa_r+0x940>
 8009a36:	9300      	str	r3, [sp, #0]
 8009a38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	dd1e      	ble.n	8009a7c <_dtoa_r+0x944>
 8009a3e:	9b00      	ldr	r3, [sp, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	f47f aec0 	bne.w	80097c6 <_dtoa_r+0x68e>
 8009a46:	4621      	mov	r1, r4
 8009a48:	2205      	movs	r2, #5
 8009a4a:	4658      	mov	r0, fp
 8009a4c:	f000 fa9a 	bl	8009f84 <__multadd>
 8009a50:	4601      	mov	r1, r0
 8009a52:	4604      	mov	r4, r0
 8009a54:	4648      	mov	r0, r9
 8009a56:	f000 fcad 	bl	800a3b4 <__mcmp>
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	f77f aeb3 	ble.w	80097c6 <_dtoa_r+0x68e>
 8009a60:	4656      	mov	r6, sl
 8009a62:	2331      	movs	r3, #49	@ 0x31
 8009a64:	f806 3b01 	strb.w	r3, [r6], #1
 8009a68:	9b04      	ldr	r3, [sp, #16]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	9304      	str	r3, [sp, #16]
 8009a6e:	e6ae      	b.n	80097ce <_dtoa_r+0x696>
 8009a70:	9c07      	ldr	r4, [sp, #28]
 8009a72:	9704      	str	r7, [sp, #16]
 8009a74:	4625      	mov	r5, r4
 8009a76:	e7f3      	b.n	8009a60 <_dtoa_r+0x928>
 8009a78:	9b07      	ldr	r3, [sp, #28]
 8009a7a:	9300      	str	r3, [sp, #0]
 8009a7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	f000 8104 	beq.w	8009c8c <_dtoa_r+0xb54>
 8009a84:	2e00      	cmp	r6, #0
 8009a86:	dd05      	ble.n	8009a94 <_dtoa_r+0x95c>
 8009a88:	4629      	mov	r1, r5
 8009a8a:	4632      	mov	r2, r6
 8009a8c:	4658      	mov	r0, fp
 8009a8e:	f000 fc25 	bl	800a2dc <__lshift>
 8009a92:	4605      	mov	r5, r0
 8009a94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d05a      	beq.n	8009b50 <_dtoa_r+0xa18>
 8009a9a:	6869      	ldr	r1, [r5, #4]
 8009a9c:	4658      	mov	r0, fp
 8009a9e:	f000 fa0f 	bl	8009ec0 <_Balloc>
 8009aa2:	4606      	mov	r6, r0
 8009aa4:	b928      	cbnz	r0, 8009ab2 <_dtoa_r+0x97a>
 8009aa6:	4b84      	ldr	r3, [pc, #528]	@ (8009cb8 <_dtoa_r+0xb80>)
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009aae:	f7ff bb5a 	b.w	8009166 <_dtoa_r+0x2e>
 8009ab2:	692a      	ldr	r2, [r5, #16]
 8009ab4:	3202      	adds	r2, #2
 8009ab6:	0092      	lsls	r2, r2, #2
 8009ab8:	f105 010c 	add.w	r1, r5, #12
 8009abc:	300c      	adds	r0, #12
 8009abe:	f000 ffaf 	bl	800aa20 <memcpy>
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	4631      	mov	r1, r6
 8009ac6:	4658      	mov	r0, fp
 8009ac8:	f000 fc08 	bl	800a2dc <__lshift>
 8009acc:	f10a 0301 	add.w	r3, sl, #1
 8009ad0:	9307      	str	r3, [sp, #28]
 8009ad2:	9b00      	ldr	r3, [sp, #0]
 8009ad4:	4453      	add	r3, sl
 8009ad6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ad8:	9b02      	ldr	r3, [sp, #8]
 8009ada:	f003 0301 	and.w	r3, r3, #1
 8009ade:	462f      	mov	r7, r5
 8009ae0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ae2:	4605      	mov	r5, r0
 8009ae4:	9b07      	ldr	r3, [sp, #28]
 8009ae6:	4621      	mov	r1, r4
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	4648      	mov	r0, r9
 8009aec:	9300      	str	r3, [sp, #0]
 8009aee:	f7ff fa98 	bl	8009022 <quorem>
 8009af2:	4639      	mov	r1, r7
 8009af4:	9002      	str	r0, [sp, #8]
 8009af6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009afa:	4648      	mov	r0, r9
 8009afc:	f000 fc5a 	bl	800a3b4 <__mcmp>
 8009b00:	462a      	mov	r2, r5
 8009b02:	9008      	str	r0, [sp, #32]
 8009b04:	4621      	mov	r1, r4
 8009b06:	4658      	mov	r0, fp
 8009b08:	f000 fc70 	bl	800a3ec <__mdiff>
 8009b0c:	68c2      	ldr	r2, [r0, #12]
 8009b0e:	4606      	mov	r6, r0
 8009b10:	bb02      	cbnz	r2, 8009b54 <_dtoa_r+0xa1c>
 8009b12:	4601      	mov	r1, r0
 8009b14:	4648      	mov	r0, r9
 8009b16:	f000 fc4d 	bl	800a3b4 <__mcmp>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	4631      	mov	r1, r6
 8009b1e:	4658      	mov	r0, fp
 8009b20:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b22:	f000 fa0d 	bl	8009f40 <_Bfree>
 8009b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b2a:	9e07      	ldr	r6, [sp, #28]
 8009b2c:	ea43 0102 	orr.w	r1, r3, r2
 8009b30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b32:	4319      	orrs	r1, r3
 8009b34:	d110      	bne.n	8009b58 <_dtoa_r+0xa20>
 8009b36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009b3a:	d029      	beq.n	8009b90 <_dtoa_r+0xa58>
 8009b3c:	9b08      	ldr	r3, [sp, #32]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	dd02      	ble.n	8009b48 <_dtoa_r+0xa10>
 8009b42:	9b02      	ldr	r3, [sp, #8]
 8009b44:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009b48:	9b00      	ldr	r3, [sp, #0]
 8009b4a:	f883 8000 	strb.w	r8, [r3]
 8009b4e:	e63f      	b.n	80097d0 <_dtoa_r+0x698>
 8009b50:	4628      	mov	r0, r5
 8009b52:	e7bb      	b.n	8009acc <_dtoa_r+0x994>
 8009b54:	2201      	movs	r2, #1
 8009b56:	e7e1      	b.n	8009b1c <_dtoa_r+0x9e4>
 8009b58:	9b08      	ldr	r3, [sp, #32]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	db04      	blt.n	8009b68 <_dtoa_r+0xa30>
 8009b5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b60:	430b      	orrs	r3, r1
 8009b62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b64:	430b      	orrs	r3, r1
 8009b66:	d120      	bne.n	8009baa <_dtoa_r+0xa72>
 8009b68:	2a00      	cmp	r2, #0
 8009b6a:	dded      	ble.n	8009b48 <_dtoa_r+0xa10>
 8009b6c:	4649      	mov	r1, r9
 8009b6e:	2201      	movs	r2, #1
 8009b70:	4658      	mov	r0, fp
 8009b72:	f000 fbb3 	bl	800a2dc <__lshift>
 8009b76:	4621      	mov	r1, r4
 8009b78:	4681      	mov	r9, r0
 8009b7a:	f000 fc1b 	bl	800a3b4 <__mcmp>
 8009b7e:	2800      	cmp	r0, #0
 8009b80:	dc03      	bgt.n	8009b8a <_dtoa_r+0xa52>
 8009b82:	d1e1      	bne.n	8009b48 <_dtoa_r+0xa10>
 8009b84:	f018 0f01 	tst.w	r8, #1
 8009b88:	d0de      	beq.n	8009b48 <_dtoa_r+0xa10>
 8009b8a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009b8e:	d1d8      	bne.n	8009b42 <_dtoa_r+0xa0a>
 8009b90:	9a00      	ldr	r2, [sp, #0]
 8009b92:	2339      	movs	r3, #57	@ 0x39
 8009b94:	7013      	strb	r3, [r2, #0]
 8009b96:	4633      	mov	r3, r6
 8009b98:	461e      	mov	r6, r3
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009ba0:	2a39      	cmp	r2, #57	@ 0x39
 8009ba2:	d052      	beq.n	8009c4a <_dtoa_r+0xb12>
 8009ba4:	3201      	adds	r2, #1
 8009ba6:	701a      	strb	r2, [r3, #0]
 8009ba8:	e612      	b.n	80097d0 <_dtoa_r+0x698>
 8009baa:	2a00      	cmp	r2, #0
 8009bac:	dd07      	ble.n	8009bbe <_dtoa_r+0xa86>
 8009bae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009bb2:	d0ed      	beq.n	8009b90 <_dtoa_r+0xa58>
 8009bb4:	9a00      	ldr	r2, [sp, #0]
 8009bb6:	f108 0301 	add.w	r3, r8, #1
 8009bba:	7013      	strb	r3, [r2, #0]
 8009bbc:	e608      	b.n	80097d0 <_dtoa_r+0x698>
 8009bbe:	9b07      	ldr	r3, [sp, #28]
 8009bc0:	9a07      	ldr	r2, [sp, #28]
 8009bc2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009bc6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d028      	beq.n	8009c1e <_dtoa_r+0xae6>
 8009bcc:	4649      	mov	r1, r9
 8009bce:	2300      	movs	r3, #0
 8009bd0:	220a      	movs	r2, #10
 8009bd2:	4658      	mov	r0, fp
 8009bd4:	f000 f9d6 	bl	8009f84 <__multadd>
 8009bd8:	42af      	cmp	r7, r5
 8009bda:	4681      	mov	r9, r0
 8009bdc:	f04f 0300 	mov.w	r3, #0
 8009be0:	f04f 020a 	mov.w	r2, #10
 8009be4:	4639      	mov	r1, r7
 8009be6:	4658      	mov	r0, fp
 8009be8:	d107      	bne.n	8009bfa <_dtoa_r+0xac2>
 8009bea:	f000 f9cb 	bl	8009f84 <__multadd>
 8009bee:	4607      	mov	r7, r0
 8009bf0:	4605      	mov	r5, r0
 8009bf2:	9b07      	ldr	r3, [sp, #28]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	9307      	str	r3, [sp, #28]
 8009bf8:	e774      	b.n	8009ae4 <_dtoa_r+0x9ac>
 8009bfa:	f000 f9c3 	bl	8009f84 <__multadd>
 8009bfe:	4629      	mov	r1, r5
 8009c00:	4607      	mov	r7, r0
 8009c02:	2300      	movs	r3, #0
 8009c04:	220a      	movs	r2, #10
 8009c06:	4658      	mov	r0, fp
 8009c08:	f000 f9bc 	bl	8009f84 <__multadd>
 8009c0c:	4605      	mov	r5, r0
 8009c0e:	e7f0      	b.n	8009bf2 <_dtoa_r+0xaba>
 8009c10:	9b00      	ldr	r3, [sp, #0]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	bfcc      	ite	gt
 8009c16:	461e      	movgt	r6, r3
 8009c18:	2601      	movle	r6, #1
 8009c1a:	4456      	add	r6, sl
 8009c1c:	2700      	movs	r7, #0
 8009c1e:	4649      	mov	r1, r9
 8009c20:	2201      	movs	r2, #1
 8009c22:	4658      	mov	r0, fp
 8009c24:	f000 fb5a 	bl	800a2dc <__lshift>
 8009c28:	4621      	mov	r1, r4
 8009c2a:	4681      	mov	r9, r0
 8009c2c:	f000 fbc2 	bl	800a3b4 <__mcmp>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	dcb0      	bgt.n	8009b96 <_dtoa_r+0xa5e>
 8009c34:	d102      	bne.n	8009c3c <_dtoa_r+0xb04>
 8009c36:	f018 0f01 	tst.w	r8, #1
 8009c3a:	d1ac      	bne.n	8009b96 <_dtoa_r+0xa5e>
 8009c3c:	4633      	mov	r3, r6
 8009c3e:	461e      	mov	r6, r3
 8009c40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c44:	2a30      	cmp	r2, #48	@ 0x30
 8009c46:	d0fa      	beq.n	8009c3e <_dtoa_r+0xb06>
 8009c48:	e5c2      	b.n	80097d0 <_dtoa_r+0x698>
 8009c4a:	459a      	cmp	sl, r3
 8009c4c:	d1a4      	bne.n	8009b98 <_dtoa_r+0xa60>
 8009c4e:	9b04      	ldr	r3, [sp, #16]
 8009c50:	3301      	adds	r3, #1
 8009c52:	9304      	str	r3, [sp, #16]
 8009c54:	2331      	movs	r3, #49	@ 0x31
 8009c56:	f88a 3000 	strb.w	r3, [sl]
 8009c5a:	e5b9      	b.n	80097d0 <_dtoa_r+0x698>
 8009c5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009c5e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009cbc <_dtoa_r+0xb84>
 8009c62:	b11b      	cbz	r3, 8009c6c <_dtoa_r+0xb34>
 8009c64:	f10a 0308 	add.w	r3, sl, #8
 8009c68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009c6a:	6013      	str	r3, [r2, #0]
 8009c6c:	4650      	mov	r0, sl
 8009c6e:	b019      	add	sp, #100	@ 0x64
 8009c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	f77f ae37 	ble.w	80098ea <_dtoa_r+0x7b2>
 8009c7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c80:	2001      	movs	r0, #1
 8009c82:	e655      	b.n	8009930 <_dtoa_r+0x7f8>
 8009c84:	9b00      	ldr	r3, [sp, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	f77f aed6 	ble.w	8009a38 <_dtoa_r+0x900>
 8009c8c:	4656      	mov	r6, sl
 8009c8e:	4621      	mov	r1, r4
 8009c90:	4648      	mov	r0, r9
 8009c92:	f7ff f9c6 	bl	8009022 <quorem>
 8009c96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009c9a:	f806 8b01 	strb.w	r8, [r6], #1
 8009c9e:	9b00      	ldr	r3, [sp, #0]
 8009ca0:	eba6 020a 	sub.w	r2, r6, sl
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	ddb3      	ble.n	8009c10 <_dtoa_r+0xad8>
 8009ca8:	4649      	mov	r1, r9
 8009caa:	2300      	movs	r3, #0
 8009cac:	220a      	movs	r2, #10
 8009cae:	4658      	mov	r0, fp
 8009cb0:	f000 f968 	bl	8009f84 <__multadd>
 8009cb4:	4681      	mov	r9, r0
 8009cb6:	e7ea      	b.n	8009c8e <_dtoa_r+0xb56>
 8009cb8:	0800b1d4 	.word	0x0800b1d4
 8009cbc:	0800b158 	.word	0x0800b158

08009cc0 <_free_r>:
 8009cc0:	b538      	push	{r3, r4, r5, lr}
 8009cc2:	4605      	mov	r5, r0
 8009cc4:	2900      	cmp	r1, #0
 8009cc6:	d041      	beq.n	8009d4c <_free_r+0x8c>
 8009cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ccc:	1f0c      	subs	r4, r1, #4
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	bfb8      	it	lt
 8009cd2:	18e4      	addlt	r4, r4, r3
 8009cd4:	f000 f8e8 	bl	8009ea8 <__malloc_lock>
 8009cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8009d50 <_free_r+0x90>)
 8009cda:	6813      	ldr	r3, [r2, #0]
 8009cdc:	b933      	cbnz	r3, 8009cec <_free_r+0x2c>
 8009cde:	6063      	str	r3, [r4, #4]
 8009ce0:	6014      	str	r4, [r2, #0]
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ce8:	f000 b8e4 	b.w	8009eb4 <__malloc_unlock>
 8009cec:	42a3      	cmp	r3, r4
 8009cee:	d908      	bls.n	8009d02 <_free_r+0x42>
 8009cf0:	6820      	ldr	r0, [r4, #0]
 8009cf2:	1821      	adds	r1, r4, r0
 8009cf4:	428b      	cmp	r3, r1
 8009cf6:	bf01      	itttt	eq
 8009cf8:	6819      	ldreq	r1, [r3, #0]
 8009cfa:	685b      	ldreq	r3, [r3, #4]
 8009cfc:	1809      	addeq	r1, r1, r0
 8009cfe:	6021      	streq	r1, [r4, #0]
 8009d00:	e7ed      	b.n	8009cde <_free_r+0x1e>
 8009d02:	461a      	mov	r2, r3
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	b10b      	cbz	r3, 8009d0c <_free_r+0x4c>
 8009d08:	42a3      	cmp	r3, r4
 8009d0a:	d9fa      	bls.n	8009d02 <_free_r+0x42>
 8009d0c:	6811      	ldr	r1, [r2, #0]
 8009d0e:	1850      	adds	r0, r2, r1
 8009d10:	42a0      	cmp	r0, r4
 8009d12:	d10b      	bne.n	8009d2c <_free_r+0x6c>
 8009d14:	6820      	ldr	r0, [r4, #0]
 8009d16:	4401      	add	r1, r0
 8009d18:	1850      	adds	r0, r2, r1
 8009d1a:	4283      	cmp	r3, r0
 8009d1c:	6011      	str	r1, [r2, #0]
 8009d1e:	d1e0      	bne.n	8009ce2 <_free_r+0x22>
 8009d20:	6818      	ldr	r0, [r3, #0]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	6053      	str	r3, [r2, #4]
 8009d26:	4408      	add	r0, r1
 8009d28:	6010      	str	r0, [r2, #0]
 8009d2a:	e7da      	b.n	8009ce2 <_free_r+0x22>
 8009d2c:	d902      	bls.n	8009d34 <_free_r+0x74>
 8009d2e:	230c      	movs	r3, #12
 8009d30:	602b      	str	r3, [r5, #0]
 8009d32:	e7d6      	b.n	8009ce2 <_free_r+0x22>
 8009d34:	6820      	ldr	r0, [r4, #0]
 8009d36:	1821      	adds	r1, r4, r0
 8009d38:	428b      	cmp	r3, r1
 8009d3a:	bf04      	itt	eq
 8009d3c:	6819      	ldreq	r1, [r3, #0]
 8009d3e:	685b      	ldreq	r3, [r3, #4]
 8009d40:	6063      	str	r3, [r4, #4]
 8009d42:	bf04      	itt	eq
 8009d44:	1809      	addeq	r1, r1, r0
 8009d46:	6021      	streq	r1, [r4, #0]
 8009d48:	6054      	str	r4, [r2, #4]
 8009d4a:	e7ca      	b.n	8009ce2 <_free_r+0x22>
 8009d4c:	bd38      	pop	{r3, r4, r5, pc}
 8009d4e:	bf00      	nop
 8009d50:	2000072c 	.word	0x2000072c

08009d54 <malloc>:
 8009d54:	4b02      	ldr	r3, [pc, #8]	@ (8009d60 <malloc+0xc>)
 8009d56:	4601      	mov	r1, r0
 8009d58:	6818      	ldr	r0, [r3, #0]
 8009d5a:	f000 b825 	b.w	8009da8 <_malloc_r>
 8009d5e:	bf00      	nop
 8009d60:	20000044 	.word	0x20000044

08009d64 <sbrk_aligned>:
 8009d64:	b570      	push	{r4, r5, r6, lr}
 8009d66:	4e0f      	ldr	r6, [pc, #60]	@ (8009da4 <sbrk_aligned+0x40>)
 8009d68:	460c      	mov	r4, r1
 8009d6a:	6831      	ldr	r1, [r6, #0]
 8009d6c:	4605      	mov	r5, r0
 8009d6e:	b911      	cbnz	r1, 8009d76 <sbrk_aligned+0x12>
 8009d70:	f000 fe46 	bl	800aa00 <_sbrk_r>
 8009d74:	6030      	str	r0, [r6, #0]
 8009d76:	4621      	mov	r1, r4
 8009d78:	4628      	mov	r0, r5
 8009d7a:	f000 fe41 	bl	800aa00 <_sbrk_r>
 8009d7e:	1c43      	adds	r3, r0, #1
 8009d80:	d103      	bne.n	8009d8a <sbrk_aligned+0x26>
 8009d82:	f04f 34ff 	mov.w	r4, #4294967295
 8009d86:	4620      	mov	r0, r4
 8009d88:	bd70      	pop	{r4, r5, r6, pc}
 8009d8a:	1cc4      	adds	r4, r0, #3
 8009d8c:	f024 0403 	bic.w	r4, r4, #3
 8009d90:	42a0      	cmp	r0, r4
 8009d92:	d0f8      	beq.n	8009d86 <sbrk_aligned+0x22>
 8009d94:	1a21      	subs	r1, r4, r0
 8009d96:	4628      	mov	r0, r5
 8009d98:	f000 fe32 	bl	800aa00 <_sbrk_r>
 8009d9c:	3001      	adds	r0, #1
 8009d9e:	d1f2      	bne.n	8009d86 <sbrk_aligned+0x22>
 8009da0:	e7ef      	b.n	8009d82 <sbrk_aligned+0x1e>
 8009da2:	bf00      	nop
 8009da4:	20000728 	.word	0x20000728

08009da8 <_malloc_r>:
 8009da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dac:	1ccd      	adds	r5, r1, #3
 8009dae:	f025 0503 	bic.w	r5, r5, #3
 8009db2:	3508      	adds	r5, #8
 8009db4:	2d0c      	cmp	r5, #12
 8009db6:	bf38      	it	cc
 8009db8:	250c      	movcc	r5, #12
 8009dba:	2d00      	cmp	r5, #0
 8009dbc:	4606      	mov	r6, r0
 8009dbe:	db01      	blt.n	8009dc4 <_malloc_r+0x1c>
 8009dc0:	42a9      	cmp	r1, r5
 8009dc2:	d904      	bls.n	8009dce <_malloc_r+0x26>
 8009dc4:	230c      	movs	r3, #12
 8009dc6:	6033      	str	r3, [r6, #0]
 8009dc8:	2000      	movs	r0, #0
 8009dca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ea4 <_malloc_r+0xfc>
 8009dd2:	f000 f869 	bl	8009ea8 <__malloc_lock>
 8009dd6:	f8d8 3000 	ldr.w	r3, [r8]
 8009dda:	461c      	mov	r4, r3
 8009ddc:	bb44      	cbnz	r4, 8009e30 <_malloc_r+0x88>
 8009dde:	4629      	mov	r1, r5
 8009de0:	4630      	mov	r0, r6
 8009de2:	f7ff ffbf 	bl	8009d64 <sbrk_aligned>
 8009de6:	1c43      	adds	r3, r0, #1
 8009de8:	4604      	mov	r4, r0
 8009dea:	d158      	bne.n	8009e9e <_malloc_r+0xf6>
 8009dec:	f8d8 4000 	ldr.w	r4, [r8]
 8009df0:	4627      	mov	r7, r4
 8009df2:	2f00      	cmp	r7, #0
 8009df4:	d143      	bne.n	8009e7e <_malloc_r+0xd6>
 8009df6:	2c00      	cmp	r4, #0
 8009df8:	d04b      	beq.n	8009e92 <_malloc_r+0xea>
 8009dfa:	6823      	ldr	r3, [r4, #0]
 8009dfc:	4639      	mov	r1, r7
 8009dfe:	4630      	mov	r0, r6
 8009e00:	eb04 0903 	add.w	r9, r4, r3
 8009e04:	f000 fdfc 	bl	800aa00 <_sbrk_r>
 8009e08:	4581      	cmp	r9, r0
 8009e0a:	d142      	bne.n	8009e92 <_malloc_r+0xea>
 8009e0c:	6821      	ldr	r1, [r4, #0]
 8009e0e:	1a6d      	subs	r5, r5, r1
 8009e10:	4629      	mov	r1, r5
 8009e12:	4630      	mov	r0, r6
 8009e14:	f7ff ffa6 	bl	8009d64 <sbrk_aligned>
 8009e18:	3001      	adds	r0, #1
 8009e1a:	d03a      	beq.n	8009e92 <_malloc_r+0xea>
 8009e1c:	6823      	ldr	r3, [r4, #0]
 8009e1e:	442b      	add	r3, r5
 8009e20:	6023      	str	r3, [r4, #0]
 8009e22:	f8d8 3000 	ldr.w	r3, [r8]
 8009e26:	685a      	ldr	r2, [r3, #4]
 8009e28:	bb62      	cbnz	r2, 8009e84 <_malloc_r+0xdc>
 8009e2a:	f8c8 7000 	str.w	r7, [r8]
 8009e2e:	e00f      	b.n	8009e50 <_malloc_r+0xa8>
 8009e30:	6822      	ldr	r2, [r4, #0]
 8009e32:	1b52      	subs	r2, r2, r5
 8009e34:	d420      	bmi.n	8009e78 <_malloc_r+0xd0>
 8009e36:	2a0b      	cmp	r2, #11
 8009e38:	d917      	bls.n	8009e6a <_malloc_r+0xc2>
 8009e3a:	1961      	adds	r1, r4, r5
 8009e3c:	42a3      	cmp	r3, r4
 8009e3e:	6025      	str	r5, [r4, #0]
 8009e40:	bf18      	it	ne
 8009e42:	6059      	strne	r1, [r3, #4]
 8009e44:	6863      	ldr	r3, [r4, #4]
 8009e46:	bf08      	it	eq
 8009e48:	f8c8 1000 	streq.w	r1, [r8]
 8009e4c:	5162      	str	r2, [r4, r5]
 8009e4e:	604b      	str	r3, [r1, #4]
 8009e50:	4630      	mov	r0, r6
 8009e52:	f000 f82f 	bl	8009eb4 <__malloc_unlock>
 8009e56:	f104 000b 	add.w	r0, r4, #11
 8009e5a:	1d23      	adds	r3, r4, #4
 8009e5c:	f020 0007 	bic.w	r0, r0, #7
 8009e60:	1ac2      	subs	r2, r0, r3
 8009e62:	bf1c      	itt	ne
 8009e64:	1a1b      	subne	r3, r3, r0
 8009e66:	50a3      	strne	r3, [r4, r2]
 8009e68:	e7af      	b.n	8009dca <_malloc_r+0x22>
 8009e6a:	6862      	ldr	r2, [r4, #4]
 8009e6c:	42a3      	cmp	r3, r4
 8009e6e:	bf0c      	ite	eq
 8009e70:	f8c8 2000 	streq.w	r2, [r8]
 8009e74:	605a      	strne	r2, [r3, #4]
 8009e76:	e7eb      	b.n	8009e50 <_malloc_r+0xa8>
 8009e78:	4623      	mov	r3, r4
 8009e7a:	6864      	ldr	r4, [r4, #4]
 8009e7c:	e7ae      	b.n	8009ddc <_malloc_r+0x34>
 8009e7e:	463c      	mov	r4, r7
 8009e80:	687f      	ldr	r7, [r7, #4]
 8009e82:	e7b6      	b.n	8009df2 <_malloc_r+0x4a>
 8009e84:	461a      	mov	r2, r3
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	42a3      	cmp	r3, r4
 8009e8a:	d1fb      	bne.n	8009e84 <_malloc_r+0xdc>
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	6053      	str	r3, [r2, #4]
 8009e90:	e7de      	b.n	8009e50 <_malloc_r+0xa8>
 8009e92:	230c      	movs	r3, #12
 8009e94:	6033      	str	r3, [r6, #0]
 8009e96:	4630      	mov	r0, r6
 8009e98:	f000 f80c 	bl	8009eb4 <__malloc_unlock>
 8009e9c:	e794      	b.n	8009dc8 <_malloc_r+0x20>
 8009e9e:	6005      	str	r5, [r0, #0]
 8009ea0:	e7d6      	b.n	8009e50 <_malloc_r+0xa8>
 8009ea2:	bf00      	nop
 8009ea4:	2000072c 	.word	0x2000072c

08009ea8 <__malloc_lock>:
 8009ea8:	4801      	ldr	r0, [pc, #4]	@ (8009eb0 <__malloc_lock+0x8>)
 8009eaa:	f7ff b8b8 	b.w	800901e <__retarget_lock_acquire_recursive>
 8009eae:	bf00      	nop
 8009eb0:	20000724 	.word	0x20000724

08009eb4 <__malloc_unlock>:
 8009eb4:	4801      	ldr	r0, [pc, #4]	@ (8009ebc <__malloc_unlock+0x8>)
 8009eb6:	f7ff b8b3 	b.w	8009020 <__retarget_lock_release_recursive>
 8009eba:	bf00      	nop
 8009ebc:	20000724 	.word	0x20000724

08009ec0 <_Balloc>:
 8009ec0:	b570      	push	{r4, r5, r6, lr}
 8009ec2:	69c6      	ldr	r6, [r0, #28]
 8009ec4:	4604      	mov	r4, r0
 8009ec6:	460d      	mov	r5, r1
 8009ec8:	b976      	cbnz	r6, 8009ee8 <_Balloc+0x28>
 8009eca:	2010      	movs	r0, #16
 8009ecc:	f7ff ff42 	bl	8009d54 <malloc>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	61e0      	str	r0, [r4, #28]
 8009ed4:	b920      	cbnz	r0, 8009ee0 <_Balloc+0x20>
 8009ed6:	4b18      	ldr	r3, [pc, #96]	@ (8009f38 <_Balloc+0x78>)
 8009ed8:	4818      	ldr	r0, [pc, #96]	@ (8009f3c <_Balloc+0x7c>)
 8009eda:	216b      	movs	r1, #107	@ 0x6b
 8009edc:	f000 fdae 	bl	800aa3c <__assert_func>
 8009ee0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ee4:	6006      	str	r6, [r0, #0]
 8009ee6:	60c6      	str	r6, [r0, #12]
 8009ee8:	69e6      	ldr	r6, [r4, #28]
 8009eea:	68f3      	ldr	r3, [r6, #12]
 8009eec:	b183      	cbz	r3, 8009f10 <_Balloc+0x50>
 8009eee:	69e3      	ldr	r3, [r4, #28]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ef6:	b9b8      	cbnz	r0, 8009f28 <_Balloc+0x68>
 8009ef8:	2101      	movs	r1, #1
 8009efa:	fa01 f605 	lsl.w	r6, r1, r5
 8009efe:	1d72      	adds	r2, r6, #5
 8009f00:	0092      	lsls	r2, r2, #2
 8009f02:	4620      	mov	r0, r4
 8009f04:	f000 fdb8 	bl	800aa78 <_calloc_r>
 8009f08:	b160      	cbz	r0, 8009f24 <_Balloc+0x64>
 8009f0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f0e:	e00e      	b.n	8009f2e <_Balloc+0x6e>
 8009f10:	2221      	movs	r2, #33	@ 0x21
 8009f12:	2104      	movs	r1, #4
 8009f14:	4620      	mov	r0, r4
 8009f16:	f000 fdaf 	bl	800aa78 <_calloc_r>
 8009f1a:	69e3      	ldr	r3, [r4, #28]
 8009f1c:	60f0      	str	r0, [r6, #12]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d1e4      	bne.n	8009eee <_Balloc+0x2e>
 8009f24:	2000      	movs	r0, #0
 8009f26:	bd70      	pop	{r4, r5, r6, pc}
 8009f28:	6802      	ldr	r2, [r0, #0]
 8009f2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f2e:	2300      	movs	r3, #0
 8009f30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f34:	e7f7      	b.n	8009f26 <_Balloc+0x66>
 8009f36:	bf00      	nop
 8009f38:	0800b165 	.word	0x0800b165
 8009f3c:	0800b1e5 	.word	0x0800b1e5

08009f40 <_Bfree>:
 8009f40:	b570      	push	{r4, r5, r6, lr}
 8009f42:	69c6      	ldr	r6, [r0, #28]
 8009f44:	4605      	mov	r5, r0
 8009f46:	460c      	mov	r4, r1
 8009f48:	b976      	cbnz	r6, 8009f68 <_Bfree+0x28>
 8009f4a:	2010      	movs	r0, #16
 8009f4c:	f7ff ff02 	bl	8009d54 <malloc>
 8009f50:	4602      	mov	r2, r0
 8009f52:	61e8      	str	r0, [r5, #28]
 8009f54:	b920      	cbnz	r0, 8009f60 <_Bfree+0x20>
 8009f56:	4b09      	ldr	r3, [pc, #36]	@ (8009f7c <_Bfree+0x3c>)
 8009f58:	4809      	ldr	r0, [pc, #36]	@ (8009f80 <_Bfree+0x40>)
 8009f5a:	218f      	movs	r1, #143	@ 0x8f
 8009f5c:	f000 fd6e 	bl	800aa3c <__assert_func>
 8009f60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f64:	6006      	str	r6, [r0, #0]
 8009f66:	60c6      	str	r6, [r0, #12]
 8009f68:	b13c      	cbz	r4, 8009f7a <_Bfree+0x3a>
 8009f6a:	69eb      	ldr	r3, [r5, #28]
 8009f6c:	6862      	ldr	r2, [r4, #4]
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f74:	6021      	str	r1, [r4, #0]
 8009f76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f7a:	bd70      	pop	{r4, r5, r6, pc}
 8009f7c:	0800b165 	.word	0x0800b165
 8009f80:	0800b1e5 	.word	0x0800b1e5

08009f84 <__multadd>:
 8009f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f88:	690d      	ldr	r5, [r1, #16]
 8009f8a:	4607      	mov	r7, r0
 8009f8c:	460c      	mov	r4, r1
 8009f8e:	461e      	mov	r6, r3
 8009f90:	f101 0c14 	add.w	ip, r1, #20
 8009f94:	2000      	movs	r0, #0
 8009f96:	f8dc 3000 	ldr.w	r3, [ip]
 8009f9a:	b299      	uxth	r1, r3
 8009f9c:	fb02 6101 	mla	r1, r2, r1, r6
 8009fa0:	0c1e      	lsrs	r6, r3, #16
 8009fa2:	0c0b      	lsrs	r3, r1, #16
 8009fa4:	fb02 3306 	mla	r3, r2, r6, r3
 8009fa8:	b289      	uxth	r1, r1
 8009faa:	3001      	adds	r0, #1
 8009fac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009fb0:	4285      	cmp	r5, r0
 8009fb2:	f84c 1b04 	str.w	r1, [ip], #4
 8009fb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009fba:	dcec      	bgt.n	8009f96 <__multadd+0x12>
 8009fbc:	b30e      	cbz	r6, 800a002 <__multadd+0x7e>
 8009fbe:	68a3      	ldr	r3, [r4, #8]
 8009fc0:	42ab      	cmp	r3, r5
 8009fc2:	dc19      	bgt.n	8009ff8 <__multadd+0x74>
 8009fc4:	6861      	ldr	r1, [r4, #4]
 8009fc6:	4638      	mov	r0, r7
 8009fc8:	3101      	adds	r1, #1
 8009fca:	f7ff ff79 	bl	8009ec0 <_Balloc>
 8009fce:	4680      	mov	r8, r0
 8009fd0:	b928      	cbnz	r0, 8009fde <__multadd+0x5a>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	4b0c      	ldr	r3, [pc, #48]	@ (800a008 <__multadd+0x84>)
 8009fd6:	480d      	ldr	r0, [pc, #52]	@ (800a00c <__multadd+0x88>)
 8009fd8:	21ba      	movs	r1, #186	@ 0xba
 8009fda:	f000 fd2f 	bl	800aa3c <__assert_func>
 8009fde:	6922      	ldr	r2, [r4, #16]
 8009fe0:	3202      	adds	r2, #2
 8009fe2:	f104 010c 	add.w	r1, r4, #12
 8009fe6:	0092      	lsls	r2, r2, #2
 8009fe8:	300c      	adds	r0, #12
 8009fea:	f000 fd19 	bl	800aa20 <memcpy>
 8009fee:	4621      	mov	r1, r4
 8009ff0:	4638      	mov	r0, r7
 8009ff2:	f7ff ffa5 	bl	8009f40 <_Bfree>
 8009ff6:	4644      	mov	r4, r8
 8009ff8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ffc:	3501      	adds	r5, #1
 8009ffe:	615e      	str	r6, [r3, #20]
 800a000:	6125      	str	r5, [r4, #16]
 800a002:	4620      	mov	r0, r4
 800a004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a008:	0800b1d4 	.word	0x0800b1d4
 800a00c:	0800b1e5 	.word	0x0800b1e5

0800a010 <__hi0bits>:
 800a010:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a014:	4603      	mov	r3, r0
 800a016:	bf36      	itet	cc
 800a018:	0403      	lslcc	r3, r0, #16
 800a01a:	2000      	movcs	r0, #0
 800a01c:	2010      	movcc	r0, #16
 800a01e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a022:	bf3c      	itt	cc
 800a024:	021b      	lslcc	r3, r3, #8
 800a026:	3008      	addcc	r0, #8
 800a028:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a02c:	bf3c      	itt	cc
 800a02e:	011b      	lslcc	r3, r3, #4
 800a030:	3004      	addcc	r0, #4
 800a032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a036:	bf3c      	itt	cc
 800a038:	009b      	lslcc	r3, r3, #2
 800a03a:	3002      	addcc	r0, #2
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	db05      	blt.n	800a04c <__hi0bits+0x3c>
 800a040:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a044:	f100 0001 	add.w	r0, r0, #1
 800a048:	bf08      	it	eq
 800a04a:	2020      	moveq	r0, #32
 800a04c:	4770      	bx	lr

0800a04e <__lo0bits>:
 800a04e:	6803      	ldr	r3, [r0, #0]
 800a050:	4602      	mov	r2, r0
 800a052:	f013 0007 	ands.w	r0, r3, #7
 800a056:	d00b      	beq.n	800a070 <__lo0bits+0x22>
 800a058:	07d9      	lsls	r1, r3, #31
 800a05a:	d421      	bmi.n	800a0a0 <__lo0bits+0x52>
 800a05c:	0798      	lsls	r0, r3, #30
 800a05e:	bf49      	itett	mi
 800a060:	085b      	lsrmi	r3, r3, #1
 800a062:	089b      	lsrpl	r3, r3, #2
 800a064:	2001      	movmi	r0, #1
 800a066:	6013      	strmi	r3, [r2, #0]
 800a068:	bf5c      	itt	pl
 800a06a:	6013      	strpl	r3, [r2, #0]
 800a06c:	2002      	movpl	r0, #2
 800a06e:	4770      	bx	lr
 800a070:	b299      	uxth	r1, r3
 800a072:	b909      	cbnz	r1, 800a078 <__lo0bits+0x2a>
 800a074:	0c1b      	lsrs	r3, r3, #16
 800a076:	2010      	movs	r0, #16
 800a078:	b2d9      	uxtb	r1, r3
 800a07a:	b909      	cbnz	r1, 800a080 <__lo0bits+0x32>
 800a07c:	3008      	adds	r0, #8
 800a07e:	0a1b      	lsrs	r3, r3, #8
 800a080:	0719      	lsls	r1, r3, #28
 800a082:	bf04      	itt	eq
 800a084:	091b      	lsreq	r3, r3, #4
 800a086:	3004      	addeq	r0, #4
 800a088:	0799      	lsls	r1, r3, #30
 800a08a:	bf04      	itt	eq
 800a08c:	089b      	lsreq	r3, r3, #2
 800a08e:	3002      	addeq	r0, #2
 800a090:	07d9      	lsls	r1, r3, #31
 800a092:	d403      	bmi.n	800a09c <__lo0bits+0x4e>
 800a094:	085b      	lsrs	r3, r3, #1
 800a096:	f100 0001 	add.w	r0, r0, #1
 800a09a:	d003      	beq.n	800a0a4 <__lo0bits+0x56>
 800a09c:	6013      	str	r3, [r2, #0]
 800a09e:	4770      	bx	lr
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	4770      	bx	lr
 800a0a4:	2020      	movs	r0, #32
 800a0a6:	4770      	bx	lr

0800a0a8 <__i2b>:
 800a0a8:	b510      	push	{r4, lr}
 800a0aa:	460c      	mov	r4, r1
 800a0ac:	2101      	movs	r1, #1
 800a0ae:	f7ff ff07 	bl	8009ec0 <_Balloc>
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	b928      	cbnz	r0, 800a0c2 <__i2b+0x1a>
 800a0b6:	4b05      	ldr	r3, [pc, #20]	@ (800a0cc <__i2b+0x24>)
 800a0b8:	4805      	ldr	r0, [pc, #20]	@ (800a0d0 <__i2b+0x28>)
 800a0ba:	f240 1145 	movw	r1, #325	@ 0x145
 800a0be:	f000 fcbd 	bl	800aa3c <__assert_func>
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	6144      	str	r4, [r0, #20]
 800a0c6:	6103      	str	r3, [r0, #16]
 800a0c8:	bd10      	pop	{r4, pc}
 800a0ca:	bf00      	nop
 800a0cc:	0800b1d4 	.word	0x0800b1d4
 800a0d0:	0800b1e5 	.word	0x0800b1e5

0800a0d4 <__multiply>:
 800a0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d8:	4614      	mov	r4, r2
 800a0da:	690a      	ldr	r2, [r1, #16]
 800a0dc:	6923      	ldr	r3, [r4, #16]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	bfa8      	it	ge
 800a0e2:	4623      	movge	r3, r4
 800a0e4:	460f      	mov	r7, r1
 800a0e6:	bfa4      	itt	ge
 800a0e8:	460c      	movge	r4, r1
 800a0ea:	461f      	movge	r7, r3
 800a0ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a0f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a0f4:	68a3      	ldr	r3, [r4, #8]
 800a0f6:	6861      	ldr	r1, [r4, #4]
 800a0f8:	eb0a 0609 	add.w	r6, sl, r9
 800a0fc:	42b3      	cmp	r3, r6
 800a0fe:	b085      	sub	sp, #20
 800a100:	bfb8      	it	lt
 800a102:	3101      	addlt	r1, #1
 800a104:	f7ff fedc 	bl	8009ec0 <_Balloc>
 800a108:	b930      	cbnz	r0, 800a118 <__multiply+0x44>
 800a10a:	4602      	mov	r2, r0
 800a10c:	4b44      	ldr	r3, [pc, #272]	@ (800a220 <__multiply+0x14c>)
 800a10e:	4845      	ldr	r0, [pc, #276]	@ (800a224 <__multiply+0x150>)
 800a110:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a114:	f000 fc92 	bl	800aa3c <__assert_func>
 800a118:	f100 0514 	add.w	r5, r0, #20
 800a11c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a120:	462b      	mov	r3, r5
 800a122:	2200      	movs	r2, #0
 800a124:	4543      	cmp	r3, r8
 800a126:	d321      	bcc.n	800a16c <__multiply+0x98>
 800a128:	f107 0114 	add.w	r1, r7, #20
 800a12c:	f104 0214 	add.w	r2, r4, #20
 800a130:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a134:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a138:	9302      	str	r3, [sp, #8]
 800a13a:	1b13      	subs	r3, r2, r4
 800a13c:	3b15      	subs	r3, #21
 800a13e:	f023 0303 	bic.w	r3, r3, #3
 800a142:	3304      	adds	r3, #4
 800a144:	f104 0715 	add.w	r7, r4, #21
 800a148:	42ba      	cmp	r2, r7
 800a14a:	bf38      	it	cc
 800a14c:	2304      	movcc	r3, #4
 800a14e:	9301      	str	r3, [sp, #4]
 800a150:	9b02      	ldr	r3, [sp, #8]
 800a152:	9103      	str	r1, [sp, #12]
 800a154:	428b      	cmp	r3, r1
 800a156:	d80c      	bhi.n	800a172 <__multiply+0x9e>
 800a158:	2e00      	cmp	r6, #0
 800a15a:	dd03      	ble.n	800a164 <__multiply+0x90>
 800a15c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a160:	2b00      	cmp	r3, #0
 800a162:	d05b      	beq.n	800a21c <__multiply+0x148>
 800a164:	6106      	str	r6, [r0, #16]
 800a166:	b005      	add	sp, #20
 800a168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a16c:	f843 2b04 	str.w	r2, [r3], #4
 800a170:	e7d8      	b.n	800a124 <__multiply+0x50>
 800a172:	f8b1 a000 	ldrh.w	sl, [r1]
 800a176:	f1ba 0f00 	cmp.w	sl, #0
 800a17a:	d024      	beq.n	800a1c6 <__multiply+0xf2>
 800a17c:	f104 0e14 	add.w	lr, r4, #20
 800a180:	46a9      	mov	r9, r5
 800a182:	f04f 0c00 	mov.w	ip, #0
 800a186:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a18a:	f8d9 3000 	ldr.w	r3, [r9]
 800a18e:	fa1f fb87 	uxth.w	fp, r7
 800a192:	b29b      	uxth	r3, r3
 800a194:	fb0a 330b 	mla	r3, sl, fp, r3
 800a198:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a19c:	f8d9 7000 	ldr.w	r7, [r9]
 800a1a0:	4463      	add	r3, ip
 800a1a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a1a6:	fb0a c70b 	mla	r7, sl, fp, ip
 800a1aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a1b4:	4572      	cmp	r2, lr
 800a1b6:	f849 3b04 	str.w	r3, [r9], #4
 800a1ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a1be:	d8e2      	bhi.n	800a186 <__multiply+0xb2>
 800a1c0:	9b01      	ldr	r3, [sp, #4]
 800a1c2:	f845 c003 	str.w	ip, [r5, r3]
 800a1c6:	9b03      	ldr	r3, [sp, #12]
 800a1c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a1cc:	3104      	adds	r1, #4
 800a1ce:	f1b9 0f00 	cmp.w	r9, #0
 800a1d2:	d021      	beq.n	800a218 <__multiply+0x144>
 800a1d4:	682b      	ldr	r3, [r5, #0]
 800a1d6:	f104 0c14 	add.w	ip, r4, #20
 800a1da:	46ae      	mov	lr, r5
 800a1dc:	f04f 0a00 	mov.w	sl, #0
 800a1e0:	f8bc b000 	ldrh.w	fp, [ip]
 800a1e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a1e8:	fb09 770b 	mla	r7, r9, fp, r7
 800a1ec:	4457      	add	r7, sl
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a1f4:	f84e 3b04 	str.w	r3, [lr], #4
 800a1f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a1fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a200:	f8be 3000 	ldrh.w	r3, [lr]
 800a204:	fb09 330a 	mla	r3, r9, sl, r3
 800a208:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a20c:	4562      	cmp	r2, ip
 800a20e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a212:	d8e5      	bhi.n	800a1e0 <__multiply+0x10c>
 800a214:	9f01      	ldr	r7, [sp, #4]
 800a216:	51eb      	str	r3, [r5, r7]
 800a218:	3504      	adds	r5, #4
 800a21a:	e799      	b.n	800a150 <__multiply+0x7c>
 800a21c:	3e01      	subs	r6, #1
 800a21e:	e79b      	b.n	800a158 <__multiply+0x84>
 800a220:	0800b1d4 	.word	0x0800b1d4
 800a224:	0800b1e5 	.word	0x0800b1e5

0800a228 <__pow5mult>:
 800a228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a22c:	4615      	mov	r5, r2
 800a22e:	f012 0203 	ands.w	r2, r2, #3
 800a232:	4607      	mov	r7, r0
 800a234:	460e      	mov	r6, r1
 800a236:	d007      	beq.n	800a248 <__pow5mult+0x20>
 800a238:	4c25      	ldr	r4, [pc, #148]	@ (800a2d0 <__pow5mult+0xa8>)
 800a23a:	3a01      	subs	r2, #1
 800a23c:	2300      	movs	r3, #0
 800a23e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a242:	f7ff fe9f 	bl	8009f84 <__multadd>
 800a246:	4606      	mov	r6, r0
 800a248:	10ad      	asrs	r5, r5, #2
 800a24a:	d03d      	beq.n	800a2c8 <__pow5mult+0xa0>
 800a24c:	69fc      	ldr	r4, [r7, #28]
 800a24e:	b97c      	cbnz	r4, 800a270 <__pow5mult+0x48>
 800a250:	2010      	movs	r0, #16
 800a252:	f7ff fd7f 	bl	8009d54 <malloc>
 800a256:	4602      	mov	r2, r0
 800a258:	61f8      	str	r0, [r7, #28]
 800a25a:	b928      	cbnz	r0, 800a268 <__pow5mult+0x40>
 800a25c:	4b1d      	ldr	r3, [pc, #116]	@ (800a2d4 <__pow5mult+0xac>)
 800a25e:	481e      	ldr	r0, [pc, #120]	@ (800a2d8 <__pow5mult+0xb0>)
 800a260:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a264:	f000 fbea 	bl	800aa3c <__assert_func>
 800a268:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a26c:	6004      	str	r4, [r0, #0]
 800a26e:	60c4      	str	r4, [r0, #12]
 800a270:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a274:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a278:	b94c      	cbnz	r4, 800a28e <__pow5mult+0x66>
 800a27a:	f240 2171 	movw	r1, #625	@ 0x271
 800a27e:	4638      	mov	r0, r7
 800a280:	f7ff ff12 	bl	800a0a8 <__i2b>
 800a284:	2300      	movs	r3, #0
 800a286:	f8c8 0008 	str.w	r0, [r8, #8]
 800a28a:	4604      	mov	r4, r0
 800a28c:	6003      	str	r3, [r0, #0]
 800a28e:	f04f 0900 	mov.w	r9, #0
 800a292:	07eb      	lsls	r3, r5, #31
 800a294:	d50a      	bpl.n	800a2ac <__pow5mult+0x84>
 800a296:	4631      	mov	r1, r6
 800a298:	4622      	mov	r2, r4
 800a29a:	4638      	mov	r0, r7
 800a29c:	f7ff ff1a 	bl	800a0d4 <__multiply>
 800a2a0:	4631      	mov	r1, r6
 800a2a2:	4680      	mov	r8, r0
 800a2a4:	4638      	mov	r0, r7
 800a2a6:	f7ff fe4b 	bl	8009f40 <_Bfree>
 800a2aa:	4646      	mov	r6, r8
 800a2ac:	106d      	asrs	r5, r5, #1
 800a2ae:	d00b      	beq.n	800a2c8 <__pow5mult+0xa0>
 800a2b0:	6820      	ldr	r0, [r4, #0]
 800a2b2:	b938      	cbnz	r0, 800a2c4 <__pow5mult+0x9c>
 800a2b4:	4622      	mov	r2, r4
 800a2b6:	4621      	mov	r1, r4
 800a2b8:	4638      	mov	r0, r7
 800a2ba:	f7ff ff0b 	bl	800a0d4 <__multiply>
 800a2be:	6020      	str	r0, [r4, #0]
 800a2c0:	f8c0 9000 	str.w	r9, [r0]
 800a2c4:	4604      	mov	r4, r0
 800a2c6:	e7e4      	b.n	800a292 <__pow5mult+0x6a>
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2ce:	bf00      	nop
 800a2d0:	0800b240 	.word	0x0800b240
 800a2d4:	0800b165 	.word	0x0800b165
 800a2d8:	0800b1e5 	.word	0x0800b1e5

0800a2dc <__lshift>:
 800a2dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2e0:	460c      	mov	r4, r1
 800a2e2:	6849      	ldr	r1, [r1, #4]
 800a2e4:	6923      	ldr	r3, [r4, #16]
 800a2e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a2ea:	68a3      	ldr	r3, [r4, #8]
 800a2ec:	4607      	mov	r7, r0
 800a2ee:	4691      	mov	r9, r2
 800a2f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2f4:	f108 0601 	add.w	r6, r8, #1
 800a2f8:	42b3      	cmp	r3, r6
 800a2fa:	db0b      	blt.n	800a314 <__lshift+0x38>
 800a2fc:	4638      	mov	r0, r7
 800a2fe:	f7ff fddf 	bl	8009ec0 <_Balloc>
 800a302:	4605      	mov	r5, r0
 800a304:	b948      	cbnz	r0, 800a31a <__lshift+0x3e>
 800a306:	4602      	mov	r2, r0
 800a308:	4b28      	ldr	r3, [pc, #160]	@ (800a3ac <__lshift+0xd0>)
 800a30a:	4829      	ldr	r0, [pc, #164]	@ (800a3b0 <__lshift+0xd4>)
 800a30c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a310:	f000 fb94 	bl	800aa3c <__assert_func>
 800a314:	3101      	adds	r1, #1
 800a316:	005b      	lsls	r3, r3, #1
 800a318:	e7ee      	b.n	800a2f8 <__lshift+0x1c>
 800a31a:	2300      	movs	r3, #0
 800a31c:	f100 0114 	add.w	r1, r0, #20
 800a320:	f100 0210 	add.w	r2, r0, #16
 800a324:	4618      	mov	r0, r3
 800a326:	4553      	cmp	r3, sl
 800a328:	db33      	blt.n	800a392 <__lshift+0xb6>
 800a32a:	6920      	ldr	r0, [r4, #16]
 800a32c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a330:	f104 0314 	add.w	r3, r4, #20
 800a334:	f019 091f 	ands.w	r9, r9, #31
 800a338:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a33c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a340:	d02b      	beq.n	800a39a <__lshift+0xbe>
 800a342:	f1c9 0e20 	rsb	lr, r9, #32
 800a346:	468a      	mov	sl, r1
 800a348:	2200      	movs	r2, #0
 800a34a:	6818      	ldr	r0, [r3, #0]
 800a34c:	fa00 f009 	lsl.w	r0, r0, r9
 800a350:	4310      	orrs	r0, r2
 800a352:	f84a 0b04 	str.w	r0, [sl], #4
 800a356:	f853 2b04 	ldr.w	r2, [r3], #4
 800a35a:	459c      	cmp	ip, r3
 800a35c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a360:	d8f3      	bhi.n	800a34a <__lshift+0x6e>
 800a362:	ebac 0304 	sub.w	r3, ip, r4
 800a366:	3b15      	subs	r3, #21
 800a368:	f023 0303 	bic.w	r3, r3, #3
 800a36c:	3304      	adds	r3, #4
 800a36e:	f104 0015 	add.w	r0, r4, #21
 800a372:	4584      	cmp	ip, r0
 800a374:	bf38      	it	cc
 800a376:	2304      	movcc	r3, #4
 800a378:	50ca      	str	r2, [r1, r3]
 800a37a:	b10a      	cbz	r2, 800a380 <__lshift+0xa4>
 800a37c:	f108 0602 	add.w	r6, r8, #2
 800a380:	3e01      	subs	r6, #1
 800a382:	4638      	mov	r0, r7
 800a384:	612e      	str	r6, [r5, #16]
 800a386:	4621      	mov	r1, r4
 800a388:	f7ff fdda 	bl	8009f40 <_Bfree>
 800a38c:	4628      	mov	r0, r5
 800a38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a392:	f842 0f04 	str.w	r0, [r2, #4]!
 800a396:	3301      	adds	r3, #1
 800a398:	e7c5      	b.n	800a326 <__lshift+0x4a>
 800a39a:	3904      	subs	r1, #4
 800a39c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3a4:	459c      	cmp	ip, r3
 800a3a6:	d8f9      	bhi.n	800a39c <__lshift+0xc0>
 800a3a8:	e7ea      	b.n	800a380 <__lshift+0xa4>
 800a3aa:	bf00      	nop
 800a3ac:	0800b1d4 	.word	0x0800b1d4
 800a3b0:	0800b1e5 	.word	0x0800b1e5

0800a3b4 <__mcmp>:
 800a3b4:	690a      	ldr	r2, [r1, #16]
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	6900      	ldr	r0, [r0, #16]
 800a3ba:	1a80      	subs	r0, r0, r2
 800a3bc:	b530      	push	{r4, r5, lr}
 800a3be:	d10e      	bne.n	800a3de <__mcmp+0x2a>
 800a3c0:	3314      	adds	r3, #20
 800a3c2:	3114      	adds	r1, #20
 800a3c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a3c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a3cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a3d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a3d4:	4295      	cmp	r5, r2
 800a3d6:	d003      	beq.n	800a3e0 <__mcmp+0x2c>
 800a3d8:	d205      	bcs.n	800a3e6 <__mcmp+0x32>
 800a3da:	f04f 30ff 	mov.w	r0, #4294967295
 800a3de:	bd30      	pop	{r4, r5, pc}
 800a3e0:	42a3      	cmp	r3, r4
 800a3e2:	d3f3      	bcc.n	800a3cc <__mcmp+0x18>
 800a3e4:	e7fb      	b.n	800a3de <__mcmp+0x2a>
 800a3e6:	2001      	movs	r0, #1
 800a3e8:	e7f9      	b.n	800a3de <__mcmp+0x2a>
	...

0800a3ec <__mdiff>:
 800a3ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f0:	4689      	mov	r9, r1
 800a3f2:	4606      	mov	r6, r0
 800a3f4:	4611      	mov	r1, r2
 800a3f6:	4648      	mov	r0, r9
 800a3f8:	4614      	mov	r4, r2
 800a3fa:	f7ff ffdb 	bl	800a3b4 <__mcmp>
 800a3fe:	1e05      	subs	r5, r0, #0
 800a400:	d112      	bne.n	800a428 <__mdiff+0x3c>
 800a402:	4629      	mov	r1, r5
 800a404:	4630      	mov	r0, r6
 800a406:	f7ff fd5b 	bl	8009ec0 <_Balloc>
 800a40a:	4602      	mov	r2, r0
 800a40c:	b928      	cbnz	r0, 800a41a <__mdiff+0x2e>
 800a40e:	4b3f      	ldr	r3, [pc, #252]	@ (800a50c <__mdiff+0x120>)
 800a410:	f240 2137 	movw	r1, #567	@ 0x237
 800a414:	483e      	ldr	r0, [pc, #248]	@ (800a510 <__mdiff+0x124>)
 800a416:	f000 fb11 	bl	800aa3c <__assert_func>
 800a41a:	2301      	movs	r3, #1
 800a41c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a420:	4610      	mov	r0, r2
 800a422:	b003      	add	sp, #12
 800a424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a428:	bfbc      	itt	lt
 800a42a:	464b      	movlt	r3, r9
 800a42c:	46a1      	movlt	r9, r4
 800a42e:	4630      	mov	r0, r6
 800a430:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a434:	bfba      	itte	lt
 800a436:	461c      	movlt	r4, r3
 800a438:	2501      	movlt	r5, #1
 800a43a:	2500      	movge	r5, #0
 800a43c:	f7ff fd40 	bl	8009ec0 <_Balloc>
 800a440:	4602      	mov	r2, r0
 800a442:	b918      	cbnz	r0, 800a44c <__mdiff+0x60>
 800a444:	4b31      	ldr	r3, [pc, #196]	@ (800a50c <__mdiff+0x120>)
 800a446:	f240 2145 	movw	r1, #581	@ 0x245
 800a44a:	e7e3      	b.n	800a414 <__mdiff+0x28>
 800a44c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a450:	6926      	ldr	r6, [r4, #16]
 800a452:	60c5      	str	r5, [r0, #12]
 800a454:	f109 0310 	add.w	r3, r9, #16
 800a458:	f109 0514 	add.w	r5, r9, #20
 800a45c:	f104 0e14 	add.w	lr, r4, #20
 800a460:	f100 0b14 	add.w	fp, r0, #20
 800a464:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a468:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a46c:	9301      	str	r3, [sp, #4]
 800a46e:	46d9      	mov	r9, fp
 800a470:	f04f 0c00 	mov.w	ip, #0
 800a474:	9b01      	ldr	r3, [sp, #4]
 800a476:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a47a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a47e:	9301      	str	r3, [sp, #4]
 800a480:	fa1f f38a 	uxth.w	r3, sl
 800a484:	4619      	mov	r1, r3
 800a486:	b283      	uxth	r3, r0
 800a488:	1acb      	subs	r3, r1, r3
 800a48a:	0c00      	lsrs	r0, r0, #16
 800a48c:	4463      	add	r3, ip
 800a48e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a492:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a496:	b29b      	uxth	r3, r3
 800a498:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a49c:	4576      	cmp	r6, lr
 800a49e:	f849 3b04 	str.w	r3, [r9], #4
 800a4a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a4a6:	d8e5      	bhi.n	800a474 <__mdiff+0x88>
 800a4a8:	1b33      	subs	r3, r6, r4
 800a4aa:	3b15      	subs	r3, #21
 800a4ac:	f023 0303 	bic.w	r3, r3, #3
 800a4b0:	3415      	adds	r4, #21
 800a4b2:	3304      	adds	r3, #4
 800a4b4:	42a6      	cmp	r6, r4
 800a4b6:	bf38      	it	cc
 800a4b8:	2304      	movcc	r3, #4
 800a4ba:	441d      	add	r5, r3
 800a4bc:	445b      	add	r3, fp
 800a4be:	461e      	mov	r6, r3
 800a4c0:	462c      	mov	r4, r5
 800a4c2:	4544      	cmp	r4, r8
 800a4c4:	d30e      	bcc.n	800a4e4 <__mdiff+0xf8>
 800a4c6:	f108 0103 	add.w	r1, r8, #3
 800a4ca:	1b49      	subs	r1, r1, r5
 800a4cc:	f021 0103 	bic.w	r1, r1, #3
 800a4d0:	3d03      	subs	r5, #3
 800a4d2:	45a8      	cmp	r8, r5
 800a4d4:	bf38      	it	cc
 800a4d6:	2100      	movcc	r1, #0
 800a4d8:	440b      	add	r3, r1
 800a4da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a4de:	b191      	cbz	r1, 800a506 <__mdiff+0x11a>
 800a4e0:	6117      	str	r7, [r2, #16]
 800a4e2:	e79d      	b.n	800a420 <__mdiff+0x34>
 800a4e4:	f854 1b04 	ldr.w	r1, [r4], #4
 800a4e8:	46e6      	mov	lr, ip
 800a4ea:	0c08      	lsrs	r0, r1, #16
 800a4ec:	fa1c fc81 	uxtah	ip, ip, r1
 800a4f0:	4471      	add	r1, lr
 800a4f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a4f6:	b289      	uxth	r1, r1
 800a4f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a4fc:	f846 1b04 	str.w	r1, [r6], #4
 800a500:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a504:	e7dd      	b.n	800a4c2 <__mdiff+0xd6>
 800a506:	3f01      	subs	r7, #1
 800a508:	e7e7      	b.n	800a4da <__mdiff+0xee>
 800a50a:	bf00      	nop
 800a50c:	0800b1d4 	.word	0x0800b1d4
 800a510:	0800b1e5 	.word	0x0800b1e5

0800a514 <__d2b>:
 800a514:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a518:	460f      	mov	r7, r1
 800a51a:	2101      	movs	r1, #1
 800a51c:	ec59 8b10 	vmov	r8, r9, d0
 800a520:	4616      	mov	r6, r2
 800a522:	f7ff fccd 	bl	8009ec0 <_Balloc>
 800a526:	4604      	mov	r4, r0
 800a528:	b930      	cbnz	r0, 800a538 <__d2b+0x24>
 800a52a:	4602      	mov	r2, r0
 800a52c:	4b23      	ldr	r3, [pc, #140]	@ (800a5bc <__d2b+0xa8>)
 800a52e:	4824      	ldr	r0, [pc, #144]	@ (800a5c0 <__d2b+0xac>)
 800a530:	f240 310f 	movw	r1, #783	@ 0x30f
 800a534:	f000 fa82 	bl	800aa3c <__assert_func>
 800a538:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a53c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a540:	b10d      	cbz	r5, 800a546 <__d2b+0x32>
 800a542:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a546:	9301      	str	r3, [sp, #4]
 800a548:	f1b8 0300 	subs.w	r3, r8, #0
 800a54c:	d023      	beq.n	800a596 <__d2b+0x82>
 800a54e:	4668      	mov	r0, sp
 800a550:	9300      	str	r3, [sp, #0]
 800a552:	f7ff fd7c 	bl	800a04e <__lo0bits>
 800a556:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a55a:	b1d0      	cbz	r0, 800a592 <__d2b+0x7e>
 800a55c:	f1c0 0320 	rsb	r3, r0, #32
 800a560:	fa02 f303 	lsl.w	r3, r2, r3
 800a564:	430b      	orrs	r3, r1
 800a566:	40c2      	lsrs	r2, r0
 800a568:	6163      	str	r3, [r4, #20]
 800a56a:	9201      	str	r2, [sp, #4]
 800a56c:	9b01      	ldr	r3, [sp, #4]
 800a56e:	61a3      	str	r3, [r4, #24]
 800a570:	2b00      	cmp	r3, #0
 800a572:	bf0c      	ite	eq
 800a574:	2201      	moveq	r2, #1
 800a576:	2202      	movne	r2, #2
 800a578:	6122      	str	r2, [r4, #16]
 800a57a:	b1a5      	cbz	r5, 800a5a6 <__d2b+0x92>
 800a57c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a580:	4405      	add	r5, r0
 800a582:	603d      	str	r5, [r7, #0]
 800a584:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a588:	6030      	str	r0, [r6, #0]
 800a58a:	4620      	mov	r0, r4
 800a58c:	b003      	add	sp, #12
 800a58e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a592:	6161      	str	r1, [r4, #20]
 800a594:	e7ea      	b.n	800a56c <__d2b+0x58>
 800a596:	a801      	add	r0, sp, #4
 800a598:	f7ff fd59 	bl	800a04e <__lo0bits>
 800a59c:	9b01      	ldr	r3, [sp, #4]
 800a59e:	6163      	str	r3, [r4, #20]
 800a5a0:	3020      	adds	r0, #32
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	e7e8      	b.n	800a578 <__d2b+0x64>
 800a5a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a5aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a5ae:	6038      	str	r0, [r7, #0]
 800a5b0:	6918      	ldr	r0, [r3, #16]
 800a5b2:	f7ff fd2d 	bl	800a010 <__hi0bits>
 800a5b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a5ba:	e7e5      	b.n	800a588 <__d2b+0x74>
 800a5bc:	0800b1d4 	.word	0x0800b1d4
 800a5c0:	0800b1e5 	.word	0x0800b1e5

0800a5c4 <__ssputs_r>:
 800a5c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c8:	688e      	ldr	r6, [r1, #8]
 800a5ca:	461f      	mov	r7, r3
 800a5cc:	42be      	cmp	r6, r7
 800a5ce:	680b      	ldr	r3, [r1, #0]
 800a5d0:	4682      	mov	sl, r0
 800a5d2:	460c      	mov	r4, r1
 800a5d4:	4690      	mov	r8, r2
 800a5d6:	d82d      	bhi.n	800a634 <__ssputs_r+0x70>
 800a5d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a5dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a5e0:	d026      	beq.n	800a630 <__ssputs_r+0x6c>
 800a5e2:	6965      	ldr	r5, [r4, #20]
 800a5e4:	6909      	ldr	r1, [r1, #16]
 800a5e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a5ea:	eba3 0901 	sub.w	r9, r3, r1
 800a5ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a5f2:	1c7b      	adds	r3, r7, #1
 800a5f4:	444b      	add	r3, r9
 800a5f6:	106d      	asrs	r5, r5, #1
 800a5f8:	429d      	cmp	r5, r3
 800a5fa:	bf38      	it	cc
 800a5fc:	461d      	movcc	r5, r3
 800a5fe:	0553      	lsls	r3, r2, #21
 800a600:	d527      	bpl.n	800a652 <__ssputs_r+0x8e>
 800a602:	4629      	mov	r1, r5
 800a604:	f7ff fbd0 	bl	8009da8 <_malloc_r>
 800a608:	4606      	mov	r6, r0
 800a60a:	b360      	cbz	r0, 800a666 <__ssputs_r+0xa2>
 800a60c:	6921      	ldr	r1, [r4, #16]
 800a60e:	464a      	mov	r2, r9
 800a610:	f000 fa06 	bl	800aa20 <memcpy>
 800a614:	89a3      	ldrh	r3, [r4, #12]
 800a616:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a61a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a61e:	81a3      	strh	r3, [r4, #12]
 800a620:	6126      	str	r6, [r4, #16]
 800a622:	6165      	str	r5, [r4, #20]
 800a624:	444e      	add	r6, r9
 800a626:	eba5 0509 	sub.w	r5, r5, r9
 800a62a:	6026      	str	r6, [r4, #0]
 800a62c:	60a5      	str	r5, [r4, #8]
 800a62e:	463e      	mov	r6, r7
 800a630:	42be      	cmp	r6, r7
 800a632:	d900      	bls.n	800a636 <__ssputs_r+0x72>
 800a634:	463e      	mov	r6, r7
 800a636:	6820      	ldr	r0, [r4, #0]
 800a638:	4632      	mov	r2, r6
 800a63a:	4641      	mov	r1, r8
 800a63c:	f000 f9c6 	bl	800a9cc <memmove>
 800a640:	68a3      	ldr	r3, [r4, #8]
 800a642:	1b9b      	subs	r3, r3, r6
 800a644:	60a3      	str	r3, [r4, #8]
 800a646:	6823      	ldr	r3, [r4, #0]
 800a648:	4433      	add	r3, r6
 800a64a:	6023      	str	r3, [r4, #0]
 800a64c:	2000      	movs	r0, #0
 800a64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a652:	462a      	mov	r2, r5
 800a654:	f000 fa36 	bl	800aac4 <_realloc_r>
 800a658:	4606      	mov	r6, r0
 800a65a:	2800      	cmp	r0, #0
 800a65c:	d1e0      	bne.n	800a620 <__ssputs_r+0x5c>
 800a65e:	6921      	ldr	r1, [r4, #16]
 800a660:	4650      	mov	r0, sl
 800a662:	f7ff fb2d 	bl	8009cc0 <_free_r>
 800a666:	230c      	movs	r3, #12
 800a668:	f8ca 3000 	str.w	r3, [sl]
 800a66c:	89a3      	ldrh	r3, [r4, #12]
 800a66e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a672:	81a3      	strh	r3, [r4, #12]
 800a674:	f04f 30ff 	mov.w	r0, #4294967295
 800a678:	e7e9      	b.n	800a64e <__ssputs_r+0x8a>
	...

0800a67c <_svfiprintf_r>:
 800a67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a680:	4698      	mov	r8, r3
 800a682:	898b      	ldrh	r3, [r1, #12]
 800a684:	061b      	lsls	r3, r3, #24
 800a686:	b09d      	sub	sp, #116	@ 0x74
 800a688:	4607      	mov	r7, r0
 800a68a:	460d      	mov	r5, r1
 800a68c:	4614      	mov	r4, r2
 800a68e:	d510      	bpl.n	800a6b2 <_svfiprintf_r+0x36>
 800a690:	690b      	ldr	r3, [r1, #16]
 800a692:	b973      	cbnz	r3, 800a6b2 <_svfiprintf_r+0x36>
 800a694:	2140      	movs	r1, #64	@ 0x40
 800a696:	f7ff fb87 	bl	8009da8 <_malloc_r>
 800a69a:	6028      	str	r0, [r5, #0]
 800a69c:	6128      	str	r0, [r5, #16]
 800a69e:	b930      	cbnz	r0, 800a6ae <_svfiprintf_r+0x32>
 800a6a0:	230c      	movs	r3, #12
 800a6a2:	603b      	str	r3, [r7, #0]
 800a6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a8:	b01d      	add	sp, #116	@ 0x74
 800a6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ae:	2340      	movs	r3, #64	@ 0x40
 800a6b0:	616b      	str	r3, [r5, #20]
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6b6:	2320      	movs	r3, #32
 800a6b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a6bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6c0:	2330      	movs	r3, #48	@ 0x30
 800a6c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a860 <_svfiprintf_r+0x1e4>
 800a6c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a6ca:	f04f 0901 	mov.w	r9, #1
 800a6ce:	4623      	mov	r3, r4
 800a6d0:	469a      	mov	sl, r3
 800a6d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6d6:	b10a      	cbz	r2, 800a6dc <_svfiprintf_r+0x60>
 800a6d8:	2a25      	cmp	r2, #37	@ 0x25
 800a6da:	d1f9      	bne.n	800a6d0 <_svfiprintf_r+0x54>
 800a6dc:	ebba 0b04 	subs.w	fp, sl, r4
 800a6e0:	d00b      	beq.n	800a6fa <_svfiprintf_r+0x7e>
 800a6e2:	465b      	mov	r3, fp
 800a6e4:	4622      	mov	r2, r4
 800a6e6:	4629      	mov	r1, r5
 800a6e8:	4638      	mov	r0, r7
 800a6ea:	f7ff ff6b 	bl	800a5c4 <__ssputs_r>
 800a6ee:	3001      	adds	r0, #1
 800a6f0:	f000 80a7 	beq.w	800a842 <_svfiprintf_r+0x1c6>
 800a6f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6f6:	445a      	add	r2, fp
 800a6f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	f000 809f 	beq.w	800a842 <_svfiprintf_r+0x1c6>
 800a704:	2300      	movs	r3, #0
 800a706:	f04f 32ff 	mov.w	r2, #4294967295
 800a70a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a70e:	f10a 0a01 	add.w	sl, sl, #1
 800a712:	9304      	str	r3, [sp, #16]
 800a714:	9307      	str	r3, [sp, #28]
 800a716:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a71a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a71c:	4654      	mov	r4, sl
 800a71e:	2205      	movs	r2, #5
 800a720:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a724:	484e      	ldr	r0, [pc, #312]	@ (800a860 <_svfiprintf_r+0x1e4>)
 800a726:	f7f5 fd5b 	bl	80001e0 <memchr>
 800a72a:	9a04      	ldr	r2, [sp, #16]
 800a72c:	b9d8      	cbnz	r0, 800a766 <_svfiprintf_r+0xea>
 800a72e:	06d0      	lsls	r0, r2, #27
 800a730:	bf44      	itt	mi
 800a732:	2320      	movmi	r3, #32
 800a734:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a738:	0711      	lsls	r1, r2, #28
 800a73a:	bf44      	itt	mi
 800a73c:	232b      	movmi	r3, #43	@ 0x2b
 800a73e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a742:	f89a 3000 	ldrb.w	r3, [sl]
 800a746:	2b2a      	cmp	r3, #42	@ 0x2a
 800a748:	d015      	beq.n	800a776 <_svfiprintf_r+0xfa>
 800a74a:	9a07      	ldr	r2, [sp, #28]
 800a74c:	4654      	mov	r4, sl
 800a74e:	2000      	movs	r0, #0
 800a750:	f04f 0c0a 	mov.w	ip, #10
 800a754:	4621      	mov	r1, r4
 800a756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a75a:	3b30      	subs	r3, #48	@ 0x30
 800a75c:	2b09      	cmp	r3, #9
 800a75e:	d94b      	bls.n	800a7f8 <_svfiprintf_r+0x17c>
 800a760:	b1b0      	cbz	r0, 800a790 <_svfiprintf_r+0x114>
 800a762:	9207      	str	r2, [sp, #28]
 800a764:	e014      	b.n	800a790 <_svfiprintf_r+0x114>
 800a766:	eba0 0308 	sub.w	r3, r0, r8
 800a76a:	fa09 f303 	lsl.w	r3, r9, r3
 800a76e:	4313      	orrs	r3, r2
 800a770:	9304      	str	r3, [sp, #16]
 800a772:	46a2      	mov	sl, r4
 800a774:	e7d2      	b.n	800a71c <_svfiprintf_r+0xa0>
 800a776:	9b03      	ldr	r3, [sp, #12]
 800a778:	1d19      	adds	r1, r3, #4
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	9103      	str	r1, [sp, #12]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	bfbb      	ittet	lt
 800a782:	425b      	neglt	r3, r3
 800a784:	f042 0202 	orrlt.w	r2, r2, #2
 800a788:	9307      	strge	r3, [sp, #28]
 800a78a:	9307      	strlt	r3, [sp, #28]
 800a78c:	bfb8      	it	lt
 800a78e:	9204      	strlt	r2, [sp, #16]
 800a790:	7823      	ldrb	r3, [r4, #0]
 800a792:	2b2e      	cmp	r3, #46	@ 0x2e
 800a794:	d10a      	bne.n	800a7ac <_svfiprintf_r+0x130>
 800a796:	7863      	ldrb	r3, [r4, #1]
 800a798:	2b2a      	cmp	r3, #42	@ 0x2a
 800a79a:	d132      	bne.n	800a802 <_svfiprintf_r+0x186>
 800a79c:	9b03      	ldr	r3, [sp, #12]
 800a79e:	1d1a      	adds	r2, r3, #4
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	9203      	str	r2, [sp, #12]
 800a7a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a7a8:	3402      	adds	r4, #2
 800a7aa:	9305      	str	r3, [sp, #20]
 800a7ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a870 <_svfiprintf_r+0x1f4>
 800a7b0:	7821      	ldrb	r1, [r4, #0]
 800a7b2:	2203      	movs	r2, #3
 800a7b4:	4650      	mov	r0, sl
 800a7b6:	f7f5 fd13 	bl	80001e0 <memchr>
 800a7ba:	b138      	cbz	r0, 800a7cc <_svfiprintf_r+0x150>
 800a7bc:	9b04      	ldr	r3, [sp, #16]
 800a7be:	eba0 000a 	sub.w	r0, r0, sl
 800a7c2:	2240      	movs	r2, #64	@ 0x40
 800a7c4:	4082      	lsls	r2, r0
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	3401      	adds	r4, #1
 800a7ca:	9304      	str	r3, [sp, #16]
 800a7cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7d0:	4824      	ldr	r0, [pc, #144]	@ (800a864 <_svfiprintf_r+0x1e8>)
 800a7d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a7d6:	2206      	movs	r2, #6
 800a7d8:	f7f5 fd02 	bl	80001e0 <memchr>
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	d036      	beq.n	800a84e <_svfiprintf_r+0x1d2>
 800a7e0:	4b21      	ldr	r3, [pc, #132]	@ (800a868 <_svfiprintf_r+0x1ec>)
 800a7e2:	bb1b      	cbnz	r3, 800a82c <_svfiprintf_r+0x1b0>
 800a7e4:	9b03      	ldr	r3, [sp, #12]
 800a7e6:	3307      	adds	r3, #7
 800a7e8:	f023 0307 	bic.w	r3, r3, #7
 800a7ec:	3308      	adds	r3, #8
 800a7ee:	9303      	str	r3, [sp, #12]
 800a7f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7f2:	4433      	add	r3, r6
 800a7f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7f6:	e76a      	b.n	800a6ce <_svfiprintf_r+0x52>
 800a7f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7fc:	460c      	mov	r4, r1
 800a7fe:	2001      	movs	r0, #1
 800a800:	e7a8      	b.n	800a754 <_svfiprintf_r+0xd8>
 800a802:	2300      	movs	r3, #0
 800a804:	3401      	adds	r4, #1
 800a806:	9305      	str	r3, [sp, #20]
 800a808:	4619      	mov	r1, r3
 800a80a:	f04f 0c0a 	mov.w	ip, #10
 800a80e:	4620      	mov	r0, r4
 800a810:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a814:	3a30      	subs	r2, #48	@ 0x30
 800a816:	2a09      	cmp	r2, #9
 800a818:	d903      	bls.n	800a822 <_svfiprintf_r+0x1a6>
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d0c6      	beq.n	800a7ac <_svfiprintf_r+0x130>
 800a81e:	9105      	str	r1, [sp, #20]
 800a820:	e7c4      	b.n	800a7ac <_svfiprintf_r+0x130>
 800a822:	fb0c 2101 	mla	r1, ip, r1, r2
 800a826:	4604      	mov	r4, r0
 800a828:	2301      	movs	r3, #1
 800a82a:	e7f0      	b.n	800a80e <_svfiprintf_r+0x192>
 800a82c:	ab03      	add	r3, sp, #12
 800a82e:	9300      	str	r3, [sp, #0]
 800a830:	462a      	mov	r2, r5
 800a832:	4b0e      	ldr	r3, [pc, #56]	@ (800a86c <_svfiprintf_r+0x1f0>)
 800a834:	a904      	add	r1, sp, #16
 800a836:	4638      	mov	r0, r7
 800a838:	f7fd fe82 	bl	8008540 <_printf_float>
 800a83c:	1c42      	adds	r2, r0, #1
 800a83e:	4606      	mov	r6, r0
 800a840:	d1d6      	bne.n	800a7f0 <_svfiprintf_r+0x174>
 800a842:	89ab      	ldrh	r3, [r5, #12]
 800a844:	065b      	lsls	r3, r3, #25
 800a846:	f53f af2d 	bmi.w	800a6a4 <_svfiprintf_r+0x28>
 800a84a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a84c:	e72c      	b.n	800a6a8 <_svfiprintf_r+0x2c>
 800a84e:	ab03      	add	r3, sp, #12
 800a850:	9300      	str	r3, [sp, #0]
 800a852:	462a      	mov	r2, r5
 800a854:	4b05      	ldr	r3, [pc, #20]	@ (800a86c <_svfiprintf_r+0x1f0>)
 800a856:	a904      	add	r1, sp, #16
 800a858:	4638      	mov	r0, r7
 800a85a:	f7fe f909 	bl	8008a70 <_printf_i>
 800a85e:	e7ed      	b.n	800a83c <_svfiprintf_r+0x1c0>
 800a860:	0800b340 	.word	0x0800b340
 800a864:	0800b34a 	.word	0x0800b34a
 800a868:	08008541 	.word	0x08008541
 800a86c:	0800a5c5 	.word	0x0800a5c5
 800a870:	0800b346 	.word	0x0800b346

0800a874 <__sflush_r>:
 800a874:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a87c:	0716      	lsls	r6, r2, #28
 800a87e:	4605      	mov	r5, r0
 800a880:	460c      	mov	r4, r1
 800a882:	d454      	bmi.n	800a92e <__sflush_r+0xba>
 800a884:	684b      	ldr	r3, [r1, #4]
 800a886:	2b00      	cmp	r3, #0
 800a888:	dc02      	bgt.n	800a890 <__sflush_r+0x1c>
 800a88a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	dd48      	ble.n	800a922 <__sflush_r+0xae>
 800a890:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a892:	2e00      	cmp	r6, #0
 800a894:	d045      	beq.n	800a922 <__sflush_r+0xae>
 800a896:	2300      	movs	r3, #0
 800a898:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a89c:	682f      	ldr	r7, [r5, #0]
 800a89e:	6a21      	ldr	r1, [r4, #32]
 800a8a0:	602b      	str	r3, [r5, #0]
 800a8a2:	d030      	beq.n	800a906 <__sflush_r+0x92>
 800a8a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a8a6:	89a3      	ldrh	r3, [r4, #12]
 800a8a8:	0759      	lsls	r1, r3, #29
 800a8aa:	d505      	bpl.n	800a8b8 <__sflush_r+0x44>
 800a8ac:	6863      	ldr	r3, [r4, #4]
 800a8ae:	1ad2      	subs	r2, r2, r3
 800a8b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a8b2:	b10b      	cbz	r3, 800a8b8 <__sflush_r+0x44>
 800a8b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a8b6:	1ad2      	subs	r2, r2, r3
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8bc:	6a21      	ldr	r1, [r4, #32]
 800a8be:	4628      	mov	r0, r5
 800a8c0:	47b0      	blx	r6
 800a8c2:	1c43      	adds	r3, r0, #1
 800a8c4:	89a3      	ldrh	r3, [r4, #12]
 800a8c6:	d106      	bne.n	800a8d6 <__sflush_r+0x62>
 800a8c8:	6829      	ldr	r1, [r5, #0]
 800a8ca:	291d      	cmp	r1, #29
 800a8cc:	d82b      	bhi.n	800a926 <__sflush_r+0xb2>
 800a8ce:	4a2a      	ldr	r2, [pc, #168]	@ (800a978 <__sflush_r+0x104>)
 800a8d0:	410a      	asrs	r2, r1
 800a8d2:	07d6      	lsls	r6, r2, #31
 800a8d4:	d427      	bmi.n	800a926 <__sflush_r+0xb2>
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	6062      	str	r2, [r4, #4]
 800a8da:	04d9      	lsls	r1, r3, #19
 800a8dc:	6922      	ldr	r2, [r4, #16]
 800a8de:	6022      	str	r2, [r4, #0]
 800a8e0:	d504      	bpl.n	800a8ec <__sflush_r+0x78>
 800a8e2:	1c42      	adds	r2, r0, #1
 800a8e4:	d101      	bne.n	800a8ea <__sflush_r+0x76>
 800a8e6:	682b      	ldr	r3, [r5, #0]
 800a8e8:	b903      	cbnz	r3, 800a8ec <__sflush_r+0x78>
 800a8ea:	6560      	str	r0, [r4, #84]	@ 0x54
 800a8ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8ee:	602f      	str	r7, [r5, #0]
 800a8f0:	b1b9      	cbz	r1, 800a922 <__sflush_r+0xae>
 800a8f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a8f6:	4299      	cmp	r1, r3
 800a8f8:	d002      	beq.n	800a900 <__sflush_r+0x8c>
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	f7ff f9e0 	bl	8009cc0 <_free_r>
 800a900:	2300      	movs	r3, #0
 800a902:	6363      	str	r3, [r4, #52]	@ 0x34
 800a904:	e00d      	b.n	800a922 <__sflush_r+0xae>
 800a906:	2301      	movs	r3, #1
 800a908:	4628      	mov	r0, r5
 800a90a:	47b0      	blx	r6
 800a90c:	4602      	mov	r2, r0
 800a90e:	1c50      	adds	r0, r2, #1
 800a910:	d1c9      	bne.n	800a8a6 <__sflush_r+0x32>
 800a912:	682b      	ldr	r3, [r5, #0]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d0c6      	beq.n	800a8a6 <__sflush_r+0x32>
 800a918:	2b1d      	cmp	r3, #29
 800a91a:	d001      	beq.n	800a920 <__sflush_r+0xac>
 800a91c:	2b16      	cmp	r3, #22
 800a91e:	d11e      	bne.n	800a95e <__sflush_r+0xea>
 800a920:	602f      	str	r7, [r5, #0]
 800a922:	2000      	movs	r0, #0
 800a924:	e022      	b.n	800a96c <__sflush_r+0xf8>
 800a926:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a92a:	b21b      	sxth	r3, r3
 800a92c:	e01b      	b.n	800a966 <__sflush_r+0xf2>
 800a92e:	690f      	ldr	r7, [r1, #16]
 800a930:	2f00      	cmp	r7, #0
 800a932:	d0f6      	beq.n	800a922 <__sflush_r+0xae>
 800a934:	0793      	lsls	r3, r2, #30
 800a936:	680e      	ldr	r6, [r1, #0]
 800a938:	bf08      	it	eq
 800a93a:	694b      	ldreq	r3, [r1, #20]
 800a93c:	600f      	str	r7, [r1, #0]
 800a93e:	bf18      	it	ne
 800a940:	2300      	movne	r3, #0
 800a942:	eba6 0807 	sub.w	r8, r6, r7
 800a946:	608b      	str	r3, [r1, #8]
 800a948:	f1b8 0f00 	cmp.w	r8, #0
 800a94c:	dde9      	ble.n	800a922 <__sflush_r+0xae>
 800a94e:	6a21      	ldr	r1, [r4, #32]
 800a950:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a952:	4643      	mov	r3, r8
 800a954:	463a      	mov	r2, r7
 800a956:	4628      	mov	r0, r5
 800a958:	47b0      	blx	r6
 800a95a:	2800      	cmp	r0, #0
 800a95c:	dc08      	bgt.n	800a970 <__sflush_r+0xfc>
 800a95e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a966:	81a3      	strh	r3, [r4, #12]
 800a968:	f04f 30ff 	mov.w	r0, #4294967295
 800a96c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a970:	4407      	add	r7, r0
 800a972:	eba8 0800 	sub.w	r8, r8, r0
 800a976:	e7e7      	b.n	800a948 <__sflush_r+0xd4>
 800a978:	dfbffffe 	.word	0xdfbffffe

0800a97c <_fflush_r>:
 800a97c:	b538      	push	{r3, r4, r5, lr}
 800a97e:	690b      	ldr	r3, [r1, #16]
 800a980:	4605      	mov	r5, r0
 800a982:	460c      	mov	r4, r1
 800a984:	b913      	cbnz	r3, 800a98c <_fflush_r+0x10>
 800a986:	2500      	movs	r5, #0
 800a988:	4628      	mov	r0, r5
 800a98a:	bd38      	pop	{r3, r4, r5, pc}
 800a98c:	b118      	cbz	r0, 800a996 <_fflush_r+0x1a>
 800a98e:	6a03      	ldr	r3, [r0, #32]
 800a990:	b90b      	cbnz	r3, 800a996 <_fflush_r+0x1a>
 800a992:	f7fe fa19 	bl	8008dc8 <__sinit>
 800a996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d0f3      	beq.n	800a986 <_fflush_r+0xa>
 800a99e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a9a0:	07d0      	lsls	r0, r2, #31
 800a9a2:	d404      	bmi.n	800a9ae <_fflush_r+0x32>
 800a9a4:	0599      	lsls	r1, r3, #22
 800a9a6:	d402      	bmi.n	800a9ae <_fflush_r+0x32>
 800a9a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9aa:	f7fe fb38 	bl	800901e <__retarget_lock_acquire_recursive>
 800a9ae:	4628      	mov	r0, r5
 800a9b0:	4621      	mov	r1, r4
 800a9b2:	f7ff ff5f 	bl	800a874 <__sflush_r>
 800a9b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9b8:	07da      	lsls	r2, r3, #31
 800a9ba:	4605      	mov	r5, r0
 800a9bc:	d4e4      	bmi.n	800a988 <_fflush_r+0xc>
 800a9be:	89a3      	ldrh	r3, [r4, #12]
 800a9c0:	059b      	lsls	r3, r3, #22
 800a9c2:	d4e1      	bmi.n	800a988 <_fflush_r+0xc>
 800a9c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9c6:	f7fe fb2b 	bl	8009020 <__retarget_lock_release_recursive>
 800a9ca:	e7dd      	b.n	800a988 <_fflush_r+0xc>

0800a9cc <memmove>:
 800a9cc:	4288      	cmp	r0, r1
 800a9ce:	b510      	push	{r4, lr}
 800a9d0:	eb01 0402 	add.w	r4, r1, r2
 800a9d4:	d902      	bls.n	800a9dc <memmove+0x10>
 800a9d6:	4284      	cmp	r4, r0
 800a9d8:	4623      	mov	r3, r4
 800a9da:	d807      	bhi.n	800a9ec <memmove+0x20>
 800a9dc:	1e43      	subs	r3, r0, #1
 800a9de:	42a1      	cmp	r1, r4
 800a9e0:	d008      	beq.n	800a9f4 <memmove+0x28>
 800a9e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9ea:	e7f8      	b.n	800a9de <memmove+0x12>
 800a9ec:	4402      	add	r2, r0
 800a9ee:	4601      	mov	r1, r0
 800a9f0:	428a      	cmp	r2, r1
 800a9f2:	d100      	bne.n	800a9f6 <memmove+0x2a>
 800a9f4:	bd10      	pop	{r4, pc}
 800a9f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a9fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a9fe:	e7f7      	b.n	800a9f0 <memmove+0x24>

0800aa00 <_sbrk_r>:
 800aa00:	b538      	push	{r3, r4, r5, lr}
 800aa02:	4d06      	ldr	r5, [pc, #24]	@ (800aa1c <_sbrk_r+0x1c>)
 800aa04:	2300      	movs	r3, #0
 800aa06:	4604      	mov	r4, r0
 800aa08:	4608      	mov	r0, r1
 800aa0a:	602b      	str	r3, [r5, #0]
 800aa0c:	f7f7 fb14 	bl	8002038 <_sbrk>
 800aa10:	1c43      	adds	r3, r0, #1
 800aa12:	d102      	bne.n	800aa1a <_sbrk_r+0x1a>
 800aa14:	682b      	ldr	r3, [r5, #0]
 800aa16:	b103      	cbz	r3, 800aa1a <_sbrk_r+0x1a>
 800aa18:	6023      	str	r3, [r4, #0]
 800aa1a:	bd38      	pop	{r3, r4, r5, pc}
 800aa1c:	20000720 	.word	0x20000720

0800aa20 <memcpy>:
 800aa20:	440a      	add	r2, r1
 800aa22:	4291      	cmp	r1, r2
 800aa24:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa28:	d100      	bne.n	800aa2c <memcpy+0xc>
 800aa2a:	4770      	bx	lr
 800aa2c:	b510      	push	{r4, lr}
 800aa2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa36:	4291      	cmp	r1, r2
 800aa38:	d1f9      	bne.n	800aa2e <memcpy+0xe>
 800aa3a:	bd10      	pop	{r4, pc}

0800aa3c <__assert_func>:
 800aa3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa3e:	4614      	mov	r4, r2
 800aa40:	461a      	mov	r2, r3
 800aa42:	4b09      	ldr	r3, [pc, #36]	@ (800aa68 <__assert_func+0x2c>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4605      	mov	r5, r0
 800aa48:	68d8      	ldr	r0, [r3, #12]
 800aa4a:	b954      	cbnz	r4, 800aa62 <__assert_func+0x26>
 800aa4c:	4b07      	ldr	r3, [pc, #28]	@ (800aa6c <__assert_func+0x30>)
 800aa4e:	461c      	mov	r4, r3
 800aa50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa54:	9100      	str	r1, [sp, #0]
 800aa56:	462b      	mov	r3, r5
 800aa58:	4905      	ldr	r1, [pc, #20]	@ (800aa70 <__assert_func+0x34>)
 800aa5a:	f000 f86f 	bl	800ab3c <fiprintf>
 800aa5e:	f000 f87f 	bl	800ab60 <abort>
 800aa62:	4b04      	ldr	r3, [pc, #16]	@ (800aa74 <__assert_func+0x38>)
 800aa64:	e7f4      	b.n	800aa50 <__assert_func+0x14>
 800aa66:	bf00      	nop
 800aa68:	20000044 	.word	0x20000044
 800aa6c:	0800b396 	.word	0x0800b396
 800aa70:	0800b368 	.word	0x0800b368
 800aa74:	0800b35b 	.word	0x0800b35b

0800aa78 <_calloc_r>:
 800aa78:	b570      	push	{r4, r5, r6, lr}
 800aa7a:	fba1 5402 	umull	r5, r4, r1, r2
 800aa7e:	b93c      	cbnz	r4, 800aa90 <_calloc_r+0x18>
 800aa80:	4629      	mov	r1, r5
 800aa82:	f7ff f991 	bl	8009da8 <_malloc_r>
 800aa86:	4606      	mov	r6, r0
 800aa88:	b928      	cbnz	r0, 800aa96 <_calloc_r+0x1e>
 800aa8a:	2600      	movs	r6, #0
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	bd70      	pop	{r4, r5, r6, pc}
 800aa90:	220c      	movs	r2, #12
 800aa92:	6002      	str	r2, [r0, #0]
 800aa94:	e7f9      	b.n	800aa8a <_calloc_r+0x12>
 800aa96:	462a      	mov	r2, r5
 800aa98:	4621      	mov	r1, r4
 800aa9a:	f7fe fa42 	bl	8008f22 <memset>
 800aa9e:	e7f5      	b.n	800aa8c <_calloc_r+0x14>

0800aaa0 <__ascii_mbtowc>:
 800aaa0:	b082      	sub	sp, #8
 800aaa2:	b901      	cbnz	r1, 800aaa6 <__ascii_mbtowc+0x6>
 800aaa4:	a901      	add	r1, sp, #4
 800aaa6:	b142      	cbz	r2, 800aaba <__ascii_mbtowc+0x1a>
 800aaa8:	b14b      	cbz	r3, 800aabe <__ascii_mbtowc+0x1e>
 800aaaa:	7813      	ldrb	r3, [r2, #0]
 800aaac:	600b      	str	r3, [r1, #0]
 800aaae:	7812      	ldrb	r2, [r2, #0]
 800aab0:	1e10      	subs	r0, r2, #0
 800aab2:	bf18      	it	ne
 800aab4:	2001      	movne	r0, #1
 800aab6:	b002      	add	sp, #8
 800aab8:	4770      	bx	lr
 800aaba:	4610      	mov	r0, r2
 800aabc:	e7fb      	b.n	800aab6 <__ascii_mbtowc+0x16>
 800aabe:	f06f 0001 	mvn.w	r0, #1
 800aac2:	e7f8      	b.n	800aab6 <__ascii_mbtowc+0x16>

0800aac4 <_realloc_r>:
 800aac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aac8:	4680      	mov	r8, r0
 800aaca:	4615      	mov	r5, r2
 800aacc:	460c      	mov	r4, r1
 800aace:	b921      	cbnz	r1, 800aada <_realloc_r+0x16>
 800aad0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aad4:	4611      	mov	r1, r2
 800aad6:	f7ff b967 	b.w	8009da8 <_malloc_r>
 800aada:	b92a      	cbnz	r2, 800aae8 <_realloc_r+0x24>
 800aadc:	f7ff f8f0 	bl	8009cc0 <_free_r>
 800aae0:	2400      	movs	r4, #0
 800aae2:	4620      	mov	r0, r4
 800aae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aae8:	f000 f841 	bl	800ab6e <_malloc_usable_size_r>
 800aaec:	4285      	cmp	r5, r0
 800aaee:	4606      	mov	r6, r0
 800aaf0:	d802      	bhi.n	800aaf8 <_realloc_r+0x34>
 800aaf2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800aaf6:	d8f4      	bhi.n	800aae2 <_realloc_r+0x1e>
 800aaf8:	4629      	mov	r1, r5
 800aafa:	4640      	mov	r0, r8
 800aafc:	f7ff f954 	bl	8009da8 <_malloc_r>
 800ab00:	4607      	mov	r7, r0
 800ab02:	2800      	cmp	r0, #0
 800ab04:	d0ec      	beq.n	800aae0 <_realloc_r+0x1c>
 800ab06:	42b5      	cmp	r5, r6
 800ab08:	462a      	mov	r2, r5
 800ab0a:	4621      	mov	r1, r4
 800ab0c:	bf28      	it	cs
 800ab0e:	4632      	movcs	r2, r6
 800ab10:	f7ff ff86 	bl	800aa20 <memcpy>
 800ab14:	4621      	mov	r1, r4
 800ab16:	4640      	mov	r0, r8
 800ab18:	f7ff f8d2 	bl	8009cc0 <_free_r>
 800ab1c:	463c      	mov	r4, r7
 800ab1e:	e7e0      	b.n	800aae2 <_realloc_r+0x1e>

0800ab20 <__ascii_wctomb>:
 800ab20:	4603      	mov	r3, r0
 800ab22:	4608      	mov	r0, r1
 800ab24:	b141      	cbz	r1, 800ab38 <__ascii_wctomb+0x18>
 800ab26:	2aff      	cmp	r2, #255	@ 0xff
 800ab28:	d904      	bls.n	800ab34 <__ascii_wctomb+0x14>
 800ab2a:	228a      	movs	r2, #138	@ 0x8a
 800ab2c:	601a      	str	r2, [r3, #0]
 800ab2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab32:	4770      	bx	lr
 800ab34:	700a      	strb	r2, [r1, #0]
 800ab36:	2001      	movs	r0, #1
 800ab38:	4770      	bx	lr
	...

0800ab3c <fiprintf>:
 800ab3c:	b40e      	push	{r1, r2, r3}
 800ab3e:	b503      	push	{r0, r1, lr}
 800ab40:	4601      	mov	r1, r0
 800ab42:	ab03      	add	r3, sp, #12
 800ab44:	4805      	ldr	r0, [pc, #20]	@ (800ab5c <fiprintf+0x20>)
 800ab46:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab4a:	6800      	ldr	r0, [r0, #0]
 800ab4c:	9301      	str	r3, [sp, #4]
 800ab4e:	f000 f83f 	bl	800abd0 <_vfiprintf_r>
 800ab52:	b002      	add	sp, #8
 800ab54:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab58:	b003      	add	sp, #12
 800ab5a:	4770      	bx	lr
 800ab5c:	20000044 	.word	0x20000044

0800ab60 <abort>:
 800ab60:	b508      	push	{r3, lr}
 800ab62:	2006      	movs	r0, #6
 800ab64:	f000 fa08 	bl	800af78 <raise>
 800ab68:	2001      	movs	r0, #1
 800ab6a:	f7f7 f9ed 	bl	8001f48 <_exit>

0800ab6e <_malloc_usable_size_r>:
 800ab6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab72:	1f18      	subs	r0, r3, #4
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	bfbc      	itt	lt
 800ab78:	580b      	ldrlt	r3, [r1, r0]
 800ab7a:	18c0      	addlt	r0, r0, r3
 800ab7c:	4770      	bx	lr

0800ab7e <__sfputc_r>:
 800ab7e:	6893      	ldr	r3, [r2, #8]
 800ab80:	3b01      	subs	r3, #1
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	b410      	push	{r4}
 800ab86:	6093      	str	r3, [r2, #8]
 800ab88:	da08      	bge.n	800ab9c <__sfputc_r+0x1e>
 800ab8a:	6994      	ldr	r4, [r2, #24]
 800ab8c:	42a3      	cmp	r3, r4
 800ab8e:	db01      	blt.n	800ab94 <__sfputc_r+0x16>
 800ab90:	290a      	cmp	r1, #10
 800ab92:	d103      	bne.n	800ab9c <__sfputc_r+0x1e>
 800ab94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab98:	f000 b932 	b.w	800ae00 <__swbuf_r>
 800ab9c:	6813      	ldr	r3, [r2, #0]
 800ab9e:	1c58      	adds	r0, r3, #1
 800aba0:	6010      	str	r0, [r2, #0]
 800aba2:	7019      	strb	r1, [r3, #0]
 800aba4:	4608      	mov	r0, r1
 800aba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <__sfputs_r>:
 800abac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abae:	4606      	mov	r6, r0
 800abb0:	460f      	mov	r7, r1
 800abb2:	4614      	mov	r4, r2
 800abb4:	18d5      	adds	r5, r2, r3
 800abb6:	42ac      	cmp	r4, r5
 800abb8:	d101      	bne.n	800abbe <__sfputs_r+0x12>
 800abba:	2000      	movs	r0, #0
 800abbc:	e007      	b.n	800abce <__sfputs_r+0x22>
 800abbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abc2:	463a      	mov	r2, r7
 800abc4:	4630      	mov	r0, r6
 800abc6:	f7ff ffda 	bl	800ab7e <__sfputc_r>
 800abca:	1c43      	adds	r3, r0, #1
 800abcc:	d1f3      	bne.n	800abb6 <__sfputs_r+0xa>
 800abce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800abd0 <_vfiprintf_r>:
 800abd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd4:	460d      	mov	r5, r1
 800abd6:	b09d      	sub	sp, #116	@ 0x74
 800abd8:	4614      	mov	r4, r2
 800abda:	4698      	mov	r8, r3
 800abdc:	4606      	mov	r6, r0
 800abde:	b118      	cbz	r0, 800abe8 <_vfiprintf_r+0x18>
 800abe0:	6a03      	ldr	r3, [r0, #32]
 800abe2:	b90b      	cbnz	r3, 800abe8 <_vfiprintf_r+0x18>
 800abe4:	f7fe f8f0 	bl	8008dc8 <__sinit>
 800abe8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abea:	07d9      	lsls	r1, r3, #31
 800abec:	d405      	bmi.n	800abfa <_vfiprintf_r+0x2a>
 800abee:	89ab      	ldrh	r3, [r5, #12]
 800abf0:	059a      	lsls	r2, r3, #22
 800abf2:	d402      	bmi.n	800abfa <_vfiprintf_r+0x2a>
 800abf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abf6:	f7fe fa12 	bl	800901e <__retarget_lock_acquire_recursive>
 800abfa:	89ab      	ldrh	r3, [r5, #12]
 800abfc:	071b      	lsls	r3, r3, #28
 800abfe:	d501      	bpl.n	800ac04 <_vfiprintf_r+0x34>
 800ac00:	692b      	ldr	r3, [r5, #16]
 800ac02:	b99b      	cbnz	r3, 800ac2c <_vfiprintf_r+0x5c>
 800ac04:	4629      	mov	r1, r5
 800ac06:	4630      	mov	r0, r6
 800ac08:	f000 f938 	bl	800ae7c <__swsetup_r>
 800ac0c:	b170      	cbz	r0, 800ac2c <_vfiprintf_r+0x5c>
 800ac0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac10:	07dc      	lsls	r4, r3, #31
 800ac12:	d504      	bpl.n	800ac1e <_vfiprintf_r+0x4e>
 800ac14:	f04f 30ff 	mov.w	r0, #4294967295
 800ac18:	b01d      	add	sp, #116	@ 0x74
 800ac1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac1e:	89ab      	ldrh	r3, [r5, #12]
 800ac20:	0598      	lsls	r0, r3, #22
 800ac22:	d4f7      	bmi.n	800ac14 <_vfiprintf_r+0x44>
 800ac24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac26:	f7fe f9fb 	bl	8009020 <__retarget_lock_release_recursive>
 800ac2a:	e7f3      	b.n	800ac14 <_vfiprintf_r+0x44>
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac30:	2320      	movs	r3, #32
 800ac32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac36:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac3a:	2330      	movs	r3, #48	@ 0x30
 800ac3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800adec <_vfiprintf_r+0x21c>
 800ac40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac44:	f04f 0901 	mov.w	r9, #1
 800ac48:	4623      	mov	r3, r4
 800ac4a:	469a      	mov	sl, r3
 800ac4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac50:	b10a      	cbz	r2, 800ac56 <_vfiprintf_r+0x86>
 800ac52:	2a25      	cmp	r2, #37	@ 0x25
 800ac54:	d1f9      	bne.n	800ac4a <_vfiprintf_r+0x7a>
 800ac56:	ebba 0b04 	subs.w	fp, sl, r4
 800ac5a:	d00b      	beq.n	800ac74 <_vfiprintf_r+0xa4>
 800ac5c:	465b      	mov	r3, fp
 800ac5e:	4622      	mov	r2, r4
 800ac60:	4629      	mov	r1, r5
 800ac62:	4630      	mov	r0, r6
 800ac64:	f7ff ffa2 	bl	800abac <__sfputs_r>
 800ac68:	3001      	adds	r0, #1
 800ac6a:	f000 80a7 	beq.w	800adbc <_vfiprintf_r+0x1ec>
 800ac6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac70:	445a      	add	r2, fp
 800ac72:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac74:	f89a 3000 	ldrb.w	r3, [sl]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	f000 809f 	beq.w	800adbc <_vfiprintf_r+0x1ec>
 800ac7e:	2300      	movs	r3, #0
 800ac80:	f04f 32ff 	mov.w	r2, #4294967295
 800ac84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac88:	f10a 0a01 	add.w	sl, sl, #1
 800ac8c:	9304      	str	r3, [sp, #16]
 800ac8e:	9307      	str	r3, [sp, #28]
 800ac90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac94:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac96:	4654      	mov	r4, sl
 800ac98:	2205      	movs	r2, #5
 800ac9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac9e:	4853      	ldr	r0, [pc, #332]	@ (800adec <_vfiprintf_r+0x21c>)
 800aca0:	f7f5 fa9e 	bl	80001e0 <memchr>
 800aca4:	9a04      	ldr	r2, [sp, #16]
 800aca6:	b9d8      	cbnz	r0, 800ace0 <_vfiprintf_r+0x110>
 800aca8:	06d1      	lsls	r1, r2, #27
 800acaa:	bf44      	itt	mi
 800acac:	2320      	movmi	r3, #32
 800acae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acb2:	0713      	lsls	r3, r2, #28
 800acb4:	bf44      	itt	mi
 800acb6:	232b      	movmi	r3, #43	@ 0x2b
 800acb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acbc:	f89a 3000 	ldrb.w	r3, [sl]
 800acc0:	2b2a      	cmp	r3, #42	@ 0x2a
 800acc2:	d015      	beq.n	800acf0 <_vfiprintf_r+0x120>
 800acc4:	9a07      	ldr	r2, [sp, #28]
 800acc6:	4654      	mov	r4, sl
 800acc8:	2000      	movs	r0, #0
 800acca:	f04f 0c0a 	mov.w	ip, #10
 800acce:	4621      	mov	r1, r4
 800acd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acd4:	3b30      	subs	r3, #48	@ 0x30
 800acd6:	2b09      	cmp	r3, #9
 800acd8:	d94b      	bls.n	800ad72 <_vfiprintf_r+0x1a2>
 800acda:	b1b0      	cbz	r0, 800ad0a <_vfiprintf_r+0x13a>
 800acdc:	9207      	str	r2, [sp, #28]
 800acde:	e014      	b.n	800ad0a <_vfiprintf_r+0x13a>
 800ace0:	eba0 0308 	sub.w	r3, r0, r8
 800ace4:	fa09 f303 	lsl.w	r3, r9, r3
 800ace8:	4313      	orrs	r3, r2
 800acea:	9304      	str	r3, [sp, #16]
 800acec:	46a2      	mov	sl, r4
 800acee:	e7d2      	b.n	800ac96 <_vfiprintf_r+0xc6>
 800acf0:	9b03      	ldr	r3, [sp, #12]
 800acf2:	1d19      	adds	r1, r3, #4
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	9103      	str	r1, [sp, #12]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	bfbb      	ittet	lt
 800acfc:	425b      	neglt	r3, r3
 800acfe:	f042 0202 	orrlt.w	r2, r2, #2
 800ad02:	9307      	strge	r3, [sp, #28]
 800ad04:	9307      	strlt	r3, [sp, #28]
 800ad06:	bfb8      	it	lt
 800ad08:	9204      	strlt	r2, [sp, #16]
 800ad0a:	7823      	ldrb	r3, [r4, #0]
 800ad0c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad0e:	d10a      	bne.n	800ad26 <_vfiprintf_r+0x156>
 800ad10:	7863      	ldrb	r3, [r4, #1]
 800ad12:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad14:	d132      	bne.n	800ad7c <_vfiprintf_r+0x1ac>
 800ad16:	9b03      	ldr	r3, [sp, #12]
 800ad18:	1d1a      	adds	r2, r3, #4
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	9203      	str	r2, [sp, #12]
 800ad1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad22:	3402      	adds	r4, #2
 800ad24:	9305      	str	r3, [sp, #20]
 800ad26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800adfc <_vfiprintf_r+0x22c>
 800ad2a:	7821      	ldrb	r1, [r4, #0]
 800ad2c:	2203      	movs	r2, #3
 800ad2e:	4650      	mov	r0, sl
 800ad30:	f7f5 fa56 	bl	80001e0 <memchr>
 800ad34:	b138      	cbz	r0, 800ad46 <_vfiprintf_r+0x176>
 800ad36:	9b04      	ldr	r3, [sp, #16]
 800ad38:	eba0 000a 	sub.w	r0, r0, sl
 800ad3c:	2240      	movs	r2, #64	@ 0x40
 800ad3e:	4082      	lsls	r2, r0
 800ad40:	4313      	orrs	r3, r2
 800ad42:	3401      	adds	r4, #1
 800ad44:	9304      	str	r3, [sp, #16]
 800ad46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad4a:	4829      	ldr	r0, [pc, #164]	@ (800adf0 <_vfiprintf_r+0x220>)
 800ad4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad50:	2206      	movs	r2, #6
 800ad52:	f7f5 fa45 	bl	80001e0 <memchr>
 800ad56:	2800      	cmp	r0, #0
 800ad58:	d03f      	beq.n	800adda <_vfiprintf_r+0x20a>
 800ad5a:	4b26      	ldr	r3, [pc, #152]	@ (800adf4 <_vfiprintf_r+0x224>)
 800ad5c:	bb1b      	cbnz	r3, 800ada6 <_vfiprintf_r+0x1d6>
 800ad5e:	9b03      	ldr	r3, [sp, #12]
 800ad60:	3307      	adds	r3, #7
 800ad62:	f023 0307 	bic.w	r3, r3, #7
 800ad66:	3308      	adds	r3, #8
 800ad68:	9303      	str	r3, [sp, #12]
 800ad6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad6c:	443b      	add	r3, r7
 800ad6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad70:	e76a      	b.n	800ac48 <_vfiprintf_r+0x78>
 800ad72:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad76:	460c      	mov	r4, r1
 800ad78:	2001      	movs	r0, #1
 800ad7a:	e7a8      	b.n	800acce <_vfiprintf_r+0xfe>
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	3401      	adds	r4, #1
 800ad80:	9305      	str	r3, [sp, #20]
 800ad82:	4619      	mov	r1, r3
 800ad84:	f04f 0c0a 	mov.w	ip, #10
 800ad88:	4620      	mov	r0, r4
 800ad8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad8e:	3a30      	subs	r2, #48	@ 0x30
 800ad90:	2a09      	cmp	r2, #9
 800ad92:	d903      	bls.n	800ad9c <_vfiprintf_r+0x1cc>
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d0c6      	beq.n	800ad26 <_vfiprintf_r+0x156>
 800ad98:	9105      	str	r1, [sp, #20]
 800ad9a:	e7c4      	b.n	800ad26 <_vfiprintf_r+0x156>
 800ad9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ada0:	4604      	mov	r4, r0
 800ada2:	2301      	movs	r3, #1
 800ada4:	e7f0      	b.n	800ad88 <_vfiprintf_r+0x1b8>
 800ada6:	ab03      	add	r3, sp, #12
 800ada8:	9300      	str	r3, [sp, #0]
 800adaa:	462a      	mov	r2, r5
 800adac:	4b12      	ldr	r3, [pc, #72]	@ (800adf8 <_vfiprintf_r+0x228>)
 800adae:	a904      	add	r1, sp, #16
 800adb0:	4630      	mov	r0, r6
 800adb2:	f7fd fbc5 	bl	8008540 <_printf_float>
 800adb6:	4607      	mov	r7, r0
 800adb8:	1c78      	adds	r0, r7, #1
 800adba:	d1d6      	bne.n	800ad6a <_vfiprintf_r+0x19a>
 800adbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800adbe:	07d9      	lsls	r1, r3, #31
 800adc0:	d405      	bmi.n	800adce <_vfiprintf_r+0x1fe>
 800adc2:	89ab      	ldrh	r3, [r5, #12]
 800adc4:	059a      	lsls	r2, r3, #22
 800adc6:	d402      	bmi.n	800adce <_vfiprintf_r+0x1fe>
 800adc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adca:	f7fe f929 	bl	8009020 <__retarget_lock_release_recursive>
 800adce:	89ab      	ldrh	r3, [r5, #12]
 800add0:	065b      	lsls	r3, r3, #25
 800add2:	f53f af1f 	bmi.w	800ac14 <_vfiprintf_r+0x44>
 800add6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800add8:	e71e      	b.n	800ac18 <_vfiprintf_r+0x48>
 800adda:	ab03      	add	r3, sp, #12
 800addc:	9300      	str	r3, [sp, #0]
 800adde:	462a      	mov	r2, r5
 800ade0:	4b05      	ldr	r3, [pc, #20]	@ (800adf8 <_vfiprintf_r+0x228>)
 800ade2:	a904      	add	r1, sp, #16
 800ade4:	4630      	mov	r0, r6
 800ade6:	f7fd fe43 	bl	8008a70 <_printf_i>
 800adea:	e7e4      	b.n	800adb6 <_vfiprintf_r+0x1e6>
 800adec:	0800b340 	.word	0x0800b340
 800adf0:	0800b34a 	.word	0x0800b34a
 800adf4:	08008541 	.word	0x08008541
 800adf8:	0800abad 	.word	0x0800abad
 800adfc:	0800b346 	.word	0x0800b346

0800ae00 <__swbuf_r>:
 800ae00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae02:	460e      	mov	r6, r1
 800ae04:	4614      	mov	r4, r2
 800ae06:	4605      	mov	r5, r0
 800ae08:	b118      	cbz	r0, 800ae12 <__swbuf_r+0x12>
 800ae0a:	6a03      	ldr	r3, [r0, #32]
 800ae0c:	b90b      	cbnz	r3, 800ae12 <__swbuf_r+0x12>
 800ae0e:	f7fd ffdb 	bl	8008dc8 <__sinit>
 800ae12:	69a3      	ldr	r3, [r4, #24]
 800ae14:	60a3      	str	r3, [r4, #8]
 800ae16:	89a3      	ldrh	r3, [r4, #12]
 800ae18:	071a      	lsls	r2, r3, #28
 800ae1a:	d501      	bpl.n	800ae20 <__swbuf_r+0x20>
 800ae1c:	6923      	ldr	r3, [r4, #16]
 800ae1e:	b943      	cbnz	r3, 800ae32 <__swbuf_r+0x32>
 800ae20:	4621      	mov	r1, r4
 800ae22:	4628      	mov	r0, r5
 800ae24:	f000 f82a 	bl	800ae7c <__swsetup_r>
 800ae28:	b118      	cbz	r0, 800ae32 <__swbuf_r+0x32>
 800ae2a:	f04f 37ff 	mov.w	r7, #4294967295
 800ae2e:	4638      	mov	r0, r7
 800ae30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae32:	6823      	ldr	r3, [r4, #0]
 800ae34:	6922      	ldr	r2, [r4, #16]
 800ae36:	1a98      	subs	r0, r3, r2
 800ae38:	6963      	ldr	r3, [r4, #20]
 800ae3a:	b2f6      	uxtb	r6, r6
 800ae3c:	4283      	cmp	r3, r0
 800ae3e:	4637      	mov	r7, r6
 800ae40:	dc05      	bgt.n	800ae4e <__swbuf_r+0x4e>
 800ae42:	4621      	mov	r1, r4
 800ae44:	4628      	mov	r0, r5
 800ae46:	f7ff fd99 	bl	800a97c <_fflush_r>
 800ae4a:	2800      	cmp	r0, #0
 800ae4c:	d1ed      	bne.n	800ae2a <__swbuf_r+0x2a>
 800ae4e:	68a3      	ldr	r3, [r4, #8]
 800ae50:	3b01      	subs	r3, #1
 800ae52:	60a3      	str	r3, [r4, #8]
 800ae54:	6823      	ldr	r3, [r4, #0]
 800ae56:	1c5a      	adds	r2, r3, #1
 800ae58:	6022      	str	r2, [r4, #0]
 800ae5a:	701e      	strb	r6, [r3, #0]
 800ae5c:	6962      	ldr	r2, [r4, #20]
 800ae5e:	1c43      	adds	r3, r0, #1
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d004      	beq.n	800ae6e <__swbuf_r+0x6e>
 800ae64:	89a3      	ldrh	r3, [r4, #12]
 800ae66:	07db      	lsls	r3, r3, #31
 800ae68:	d5e1      	bpl.n	800ae2e <__swbuf_r+0x2e>
 800ae6a:	2e0a      	cmp	r6, #10
 800ae6c:	d1df      	bne.n	800ae2e <__swbuf_r+0x2e>
 800ae6e:	4621      	mov	r1, r4
 800ae70:	4628      	mov	r0, r5
 800ae72:	f7ff fd83 	bl	800a97c <_fflush_r>
 800ae76:	2800      	cmp	r0, #0
 800ae78:	d0d9      	beq.n	800ae2e <__swbuf_r+0x2e>
 800ae7a:	e7d6      	b.n	800ae2a <__swbuf_r+0x2a>

0800ae7c <__swsetup_r>:
 800ae7c:	b538      	push	{r3, r4, r5, lr}
 800ae7e:	4b29      	ldr	r3, [pc, #164]	@ (800af24 <__swsetup_r+0xa8>)
 800ae80:	4605      	mov	r5, r0
 800ae82:	6818      	ldr	r0, [r3, #0]
 800ae84:	460c      	mov	r4, r1
 800ae86:	b118      	cbz	r0, 800ae90 <__swsetup_r+0x14>
 800ae88:	6a03      	ldr	r3, [r0, #32]
 800ae8a:	b90b      	cbnz	r3, 800ae90 <__swsetup_r+0x14>
 800ae8c:	f7fd ff9c 	bl	8008dc8 <__sinit>
 800ae90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae94:	0719      	lsls	r1, r3, #28
 800ae96:	d422      	bmi.n	800aede <__swsetup_r+0x62>
 800ae98:	06da      	lsls	r2, r3, #27
 800ae9a:	d407      	bmi.n	800aeac <__swsetup_r+0x30>
 800ae9c:	2209      	movs	r2, #9
 800ae9e:	602a      	str	r2, [r5, #0]
 800aea0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aea4:	81a3      	strh	r3, [r4, #12]
 800aea6:	f04f 30ff 	mov.w	r0, #4294967295
 800aeaa:	e033      	b.n	800af14 <__swsetup_r+0x98>
 800aeac:	0758      	lsls	r0, r3, #29
 800aeae:	d512      	bpl.n	800aed6 <__swsetup_r+0x5a>
 800aeb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aeb2:	b141      	cbz	r1, 800aec6 <__swsetup_r+0x4a>
 800aeb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aeb8:	4299      	cmp	r1, r3
 800aeba:	d002      	beq.n	800aec2 <__swsetup_r+0x46>
 800aebc:	4628      	mov	r0, r5
 800aebe:	f7fe feff 	bl	8009cc0 <_free_r>
 800aec2:	2300      	movs	r3, #0
 800aec4:	6363      	str	r3, [r4, #52]	@ 0x34
 800aec6:	89a3      	ldrh	r3, [r4, #12]
 800aec8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aecc:	81a3      	strh	r3, [r4, #12]
 800aece:	2300      	movs	r3, #0
 800aed0:	6063      	str	r3, [r4, #4]
 800aed2:	6923      	ldr	r3, [r4, #16]
 800aed4:	6023      	str	r3, [r4, #0]
 800aed6:	89a3      	ldrh	r3, [r4, #12]
 800aed8:	f043 0308 	orr.w	r3, r3, #8
 800aedc:	81a3      	strh	r3, [r4, #12]
 800aede:	6923      	ldr	r3, [r4, #16]
 800aee0:	b94b      	cbnz	r3, 800aef6 <__swsetup_r+0x7a>
 800aee2:	89a3      	ldrh	r3, [r4, #12]
 800aee4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aeec:	d003      	beq.n	800aef6 <__swsetup_r+0x7a>
 800aeee:	4621      	mov	r1, r4
 800aef0:	4628      	mov	r0, r5
 800aef2:	f000 f883 	bl	800affc <__smakebuf_r>
 800aef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aefa:	f013 0201 	ands.w	r2, r3, #1
 800aefe:	d00a      	beq.n	800af16 <__swsetup_r+0x9a>
 800af00:	2200      	movs	r2, #0
 800af02:	60a2      	str	r2, [r4, #8]
 800af04:	6962      	ldr	r2, [r4, #20]
 800af06:	4252      	negs	r2, r2
 800af08:	61a2      	str	r2, [r4, #24]
 800af0a:	6922      	ldr	r2, [r4, #16]
 800af0c:	b942      	cbnz	r2, 800af20 <__swsetup_r+0xa4>
 800af0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800af12:	d1c5      	bne.n	800aea0 <__swsetup_r+0x24>
 800af14:	bd38      	pop	{r3, r4, r5, pc}
 800af16:	0799      	lsls	r1, r3, #30
 800af18:	bf58      	it	pl
 800af1a:	6962      	ldrpl	r2, [r4, #20]
 800af1c:	60a2      	str	r2, [r4, #8]
 800af1e:	e7f4      	b.n	800af0a <__swsetup_r+0x8e>
 800af20:	2000      	movs	r0, #0
 800af22:	e7f7      	b.n	800af14 <__swsetup_r+0x98>
 800af24:	20000044 	.word	0x20000044

0800af28 <_raise_r>:
 800af28:	291f      	cmp	r1, #31
 800af2a:	b538      	push	{r3, r4, r5, lr}
 800af2c:	4605      	mov	r5, r0
 800af2e:	460c      	mov	r4, r1
 800af30:	d904      	bls.n	800af3c <_raise_r+0x14>
 800af32:	2316      	movs	r3, #22
 800af34:	6003      	str	r3, [r0, #0]
 800af36:	f04f 30ff 	mov.w	r0, #4294967295
 800af3a:	bd38      	pop	{r3, r4, r5, pc}
 800af3c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800af3e:	b112      	cbz	r2, 800af46 <_raise_r+0x1e>
 800af40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af44:	b94b      	cbnz	r3, 800af5a <_raise_r+0x32>
 800af46:	4628      	mov	r0, r5
 800af48:	f000 f830 	bl	800afac <_getpid_r>
 800af4c:	4622      	mov	r2, r4
 800af4e:	4601      	mov	r1, r0
 800af50:	4628      	mov	r0, r5
 800af52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af56:	f000 b817 	b.w	800af88 <_kill_r>
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d00a      	beq.n	800af74 <_raise_r+0x4c>
 800af5e:	1c59      	adds	r1, r3, #1
 800af60:	d103      	bne.n	800af6a <_raise_r+0x42>
 800af62:	2316      	movs	r3, #22
 800af64:	6003      	str	r3, [r0, #0]
 800af66:	2001      	movs	r0, #1
 800af68:	e7e7      	b.n	800af3a <_raise_r+0x12>
 800af6a:	2100      	movs	r1, #0
 800af6c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800af70:	4620      	mov	r0, r4
 800af72:	4798      	blx	r3
 800af74:	2000      	movs	r0, #0
 800af76:	e7e0      	b.n	800af3a <_raise_r+0x12>

0800af78 <raise>:
 800af78:	4b02      	ldr	r3, [pc, #8]	@ (800af84 <raise+0xc>)
 800af7a:	4601      	mov	r1, r0
 800af7c:	6818      	ldr	r0, [r3, #0]
 800af7e:	f7ff bfd3 	b.w	800af28 <_raise_r>
 800af82:	bf00      	nop
 800af84:	20000044 	.word	0x20000044

0800af88 <_kill_r>:
 800af88:	b538      	push	{r3, r4, r5, lr}
 800af8a:	4d07      	ldr	r5, [pc, #28]	@ (800afa8 <_kill_r+0x20>)
 800af8c:	2300      	movs	r3, #0
 800af8e:	4604      	mov	r4, r0
 800af90:	4608      	mov	r0, r1
 800af92:	4611      	mov	r1, r2
 800af94:	602b      	str	r3, [r5, #0]
 800af96:	f7f6 ffc7 	bl	8001f28 <_kill>
 800af9a:	1c43      	adds	r3, r0, #1
 800af9c:	d102      	bne.n	800afa4 <_kill_r+0x1c>
 800af9e:	682b      	ldr	r3, [r5, #0]
 800afa0:	b103      	cbz	r3, 800afa4 <_kill_r+0x1c>
 800afa2:	6023      	str	r3, [r4, #0]
 800afa4:	bd38      	pop	{r3, r4, r5, pc}
 800afa6:	bf00      	nop
 800afa8:	20000720 	.word	0x20000720

0800afac <_getpid_r>:
 800afac:	f7f6 bfb4 	b.w	8001f18 <_getpid>

0800afb0 <__swhatbuf_r>:
 800afb0:	b570      	push	{r4, r5, r6, lr}
 800afb2:	460c      	mov	r4, r1
 800afb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afb8:	2900      	cmp	r1, #0
 800afba:	b096      	sub	sp, #88	@ 0x58
 800afbc:	4615      	mov	r5, r2
 800afbe:	461e      	mov	r6, r3
 800afc0:	da0d      	bge.n	800afde <__swhatbuf_r+0x2e>
 800afc2:	89a3      	ldrh	r3, [r4, #12]
 800afc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800afc8:	f04f 0100 	mov.w	r1, #0
 800afcc:	bf14      	ite	ne
 800afce:	2340      	movne	r3, #64	@ 0x40
 800afd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800afd4:	2000      	movs	r0, #0
 800afd6:	6031      	str	r1, [r6, #0]
 800afd8:	602b      	str	r3, [r5, #0]
 800afda:	b016      	add	sp, #88	@ 0x58
 800afdc:	bd70      	pop	{r4, r5, r6, pc}
 800afde:	466a      	mov	r2, sp
 800afe0:	f000 f848 	bl	800b074 <_fstat_r>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	dbec      	blt.n	800afc2 <__swhatbuf_r+0x12>
 800afe8:	9901      	ldr	r1, [sp, #4]
 800afea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800afee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aff2:	4259      	negs	r1, r3
 800aff4:	4159      	adcs	r1, r3
 800aff6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800affa:	e7eb      	b.n	800afd4 <__swhatbuf_r+0x24>

0800affc <__smakebuf_r>:
 800affc:	898b      	ldrh	r3, [r1, #12]
 800affe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b000:	079d      	lsls	r5, r3, #30
 800b002:	4606      	mov	r6, r0
 800b004:	460c      	mov	r4, r1
 800b006:	d507      	bpl.n	800b018 <__smakebuf_r+0x1c>
 800b008:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b00c:	6023      	str	r3, [r4, #0]
 800b00e:	6123      	str	r3, [r4, #16]
 800b010:	2301      	movs	r3, #1
 800b012:	6163      	str	r3, [r4, #20]
 800b014:	b003      	add	sp, #12
 800b016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b018:	ab01      	add	r3, sp, #4
 800b01a:	466a      	mov	r2, sp
 800b01c:	f7ff ffc8 	bl	800afb0 <__swhatbuf_r>
 800b020:	9f00      	ldr	r7, [sp, #0]
 800b022:	4605      	mov	r5, r0
 800b024:	4639      	mov	r1, r7
 800b026:	4630      	mov	r0, r6
 800b028:	f7fe febe 	bl	8009da8 <_malloc_r>
 800b02c:	b948      	cbnz	r0, 800b042 <__smakebuf_r+0x46>
 800b02e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b032:	059a      	lsls	r2, r3, #22
 800b034:	d4ee      	bmi.n	800b014 <__smakebuf_r+0x18>
 800b036:	f023 0303 	bic.w	r3, r3, #3
 800b03a:	f043 0302 	orr.w	r3, r3, #2
 800b03e:	81a3      	strh	r3, [r4, #12]
 800b040:	e7e2      	b.n	800b008 <__smakebuf_r+0xc>
 800b042:	89a3      	ldrh	r3, [r4, #12]
 800b044:	6020      	str	r0, [r4, #0]
 800b046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b04a:	81a3      	strh	r3, [r4, #12]
 800b04c:	9b01      	ldr	r3, [sp, #4]
 800b04e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b052:	b15b      	cbz	r3, 800b06c <__smakebuf_r+0x70>
 800b054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b058:	4630      	mov	r0, r6
 800b05a:	f000 f81d 	bl	800b098 <_isatty_r>
 800b05e:	b128      	cbz	r0, 800b06c <__smakebuf_r+0x70>
 800b060:	89a3      	ldrh	r3, [r4, #12]
 800b062:	f023 0303 	bic.w	r3, r3, #3
 800b066:	f043 0301 	orr.w	r3, r3, #1
 800b06a:	81a3      	strh	r3, [r4, #12]
 800b06c:	89a3      	ldrh	r3, [r4, #12]
 800b06e:	431d      	orrs	r5, r3
 800b070:	81a5      	strh	r5, [r4, #12]
 800b072:	e7cf      	b.n	800b014 <__smakebuf_r+0x18>

0800b074 <_fstat_r>:
 800b074:	b538      	push	{r3, r4, r5, lr}
 800b076:	4d07      	ldr	r5, [pc, #28]	@ (800b094 <_fstat_r+0x20>)
 800b078:	2300      	movs	r3, #0
 800b07a:	4604      	mov	r4, r0
 800b07c:	4608      	mov	r0, r1
 800b07e:	4611      	mov	r1, r2
 800b080:	602b      	str	r3, [r5, #0]
 800b082:	f7f6 ffb1 	bl	8001fe8 <_fstat>
 800b086:	1c43      	adds	r3, r0, #1
 800b088:	d102      	bne.n	800b090 <_fstat_r+0x1c>
 800b08a:	682b      	ldr	r3, [r5, #0]
 800b08c:	b103      	cbz	r3, 800b090 <_fstat_r+0x1c>
 800b08e:	6023      	str	r3, [r4, #0]
 800b090:	bd38      	pop	{r3, r4, r5, pc}
 800b092:	bf00      	nop
 800b094:	20000720 	.word	0x20000720

0800b098 <_isatty_r>:
 800b098:	b538      	push	{r3, r4, r5, lr}
 800b09a:	4d06      	ldr	r5, [pc, #24]	@ (800b0b4 <_isatty_r+0x1c>)
 800b09c:	2300      	movs	r3, #0
 800b09e:	4604      	mov	r4, r0
 800b0a0:	4608      	mov	r0, r1
 800b0a2:	602b      	str	r3, [r5, #0]
 800b0a4:	f7f6 ffb0 	bl	8002008 <_isatty>
 800b0a8:	1c43      	adds	r3, r0, #1
 800b0aa:	d102      	bne.n	800b0b2 <_isatty_r+0x1a>
 800b0ac:	682b      	ldr	r3, [r5, #0]
 800b0ae:	b103      	cbz	r3, 800b0b2 <_isatty_r+0x1a>
 800b0b0:	6023      	str	r3, [r4, #0]
 800b0b2:	bd38      	pop	{r3, r4, r5, pc}
 800b0b4:	20000720 	.word	0x20000720

0800b0b8 <_init>:
 800b0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ba:	bf00      	nop
 800b0bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0be:	bc08      	pop	{r3}
 800b0c0:	469e      	mov	lr, r3
 800b0c2:	4770      	bx	lr

0800b0c4 <_fini>:
 800b0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0c6:	bf00      	nop
 800b0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ca:	bc08      	pop	{r3}
 800b0cc:	469e      	mov	lr, r3
 800b0ce:	4770      	bx	lr
